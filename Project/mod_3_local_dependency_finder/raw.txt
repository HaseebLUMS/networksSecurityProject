220 FTP print service:V-1.13/Use the network password for the ID if updating.How to UPDATE from SELECT in SQL Server
Product
Overview
Visual SQL
Data Sources
Pricing
Security
Data Advisors
Customers
Solutions
Data Analysts
Executives
Marketing
Sales Ops
Customer Success
Product Teams
Learn
Featured
Tutorials
Data School
Events
White Papers
Off the Charts
Blog
Login
Menu
Overview
Visual SQL
Data Sources
Security
Customers
Learn
Blog
Login
Get Started Free
Featured
Tutorials
Data School
Events
White Papers
Off the Charts
How to UPDATE from SELECT in SQL Server
Data Tutorial
Databases
JOIN people ON data
Easily connect your databases and create powerful visualizations and interactive dashboards in minutes.
Get Started with Chartio
New Learning Platform
We've launched a new website to help you understand the data principles you need to get answers today.
Learn Data
Under most circumstances, SQL updates are performed using direct references to a particular table (UPDATE books SET books.title = 'The Hobbit' WHERE books.id = 1).
Yet, on occasion, it may prove beneficial to alter the contents of a table indirectly, by using a subset of data obtained from secondary query statement.
Performing an UPDATE using a secondary SELECT statement can be accomplished in one of two ways, primarily depending upon which version of SQL Server you are using.
We’ll briefly explore both options so you can find what works best for you.
Using INNER JOINS
For all SQL Server installations, the most basic method of performing this action is to use an INNER JOIN, whereby values in the columns of two different tables are compared to one another.
UPDATE
books
SET
books.primary_author = authors.name
FROM
books
INNER JOIN
authors
ON
books.author_id = authors.id
WHERE
books.title = 'The Hobbit'
In the above example, we’re UPDATING the books.primary_author field to match the authors.name for ‘The Hobbit’ by JOINING both tables in the query to their respective, matching values of authors.id and books.author_id.
Using MERGE to UPDATE and INSERT Simultaneously
For SQL Server 2008 and newer, Microsoft introduced the exceptionally useful MERGE operation which is similar to the above INNER JOIN method, but MERGE attempts to perform both an UPDATE and an INSERT command together.
This effectively synchronizes the two tables based on the query performed, updating and inserting records as necessary for the two to match.
MERGE INTO
books
USING
authors
ON
books.author_id = authors.id
WHEN MATCHED THEN
UPDATE SET
books.primary_author = authors.name
WHEN NOT MATCHED THEN
INSERT
(books.author_id, books.primary_author)
VALUES
(authors.id, authors.name)
The full query when using MERGE is certainly a bit more complex then that of a basic INNER JOIN, but once you grasp how the operation functions, you’ll quickly understand how powerful this capability can truly be.
The first few lines are rather self-explanatory:
MERGE INTO
books
USING
authors
ON
books.author_id = authors.id
We want to MERGE INTO (UPDATE/INSERT) the books table by using the secondary authors table, and we’re matching the two based on the same books.author_id = authors.id comparison.
Where the MERGE command differs is in the branching logic that follows.
WHEN MATCHED THEN
UPDATE SET
books.primary_author = authors.name
Here we’re asking SQL to perform an action only when records MATCHED – when an existing record is found.
In that case, we perform a standard UPDATE just as we did before, setting the books.primary_author field to equal the authors.name field.
Finally, if the query discovers a matching comparative record that doesn’t exist, we instead perform an INSERT.
WHEN NOT MATCHED THEN
INSERT
(books.author_id, books.primary_author)
VALUES
(authors.id, authors.name)
Here we’re simply asking SQL to INSERT a new record into the books table and passing along the values for the author_id and primary_author fields, grabbed from the associated authors table record.
The end result of our MERGE statement is that for every author in the authors table, we verify whether a corresponding book exists in books.
If a record is found, we ensure books.primary_author is set using UPDATE, and where no match is found, we add a new record to books.
With that, you should have a solid understanding of two different methods that can be used to UPDATE records in SQL by using secondary, comparative SELECT statements.
Working with Redshift, BigQuery, MySQL, MongoDB, Postgres, IBM DB2, Oracle?
Easily connect your databases and create powerful visualizations and interactive dashboards in minutes.
Get Started with Chartio
Recent Databases Tutorials
How to Find Duplicate Values in a SQL Table
How Does Indexing Work
SQL Server INFORMATION_SCHEMA Views | See if a Table Exists
Joining Disparate Data Sources in Layering
Learn about MySQL Table Level Permissions
Understanding Amazon Aurora's Multi-AZ Deployment
Learn why 80% of our Data Heroes use Chartio at least once a day.
Get Started Free
Product
Visual SQL
Data Sources
Pricing
Security
Data Advisors
Success Stories
Solutions
Data Analysts
Executives
Marketing
Sales Ops
Customer Success
Product Teams
Learn
SQL Tutorial
Data Tutorials
Data School
Events
White Papers
Off the Charts
About Us
Careers
Blog
Customers
Customer Reviews
Partners
Brand Kit
Support
Documentation
Chartio Videos
Feature Releases
Office Hours
Get a Demo
hello@chartio.com
222 Kearny St #525
SF, CA 94108
©2019 All Rights Reserved. • Terms • Privacy & CookiesAddress Changes
DMV Home Page | About us | Driver License | Registration | License Plates | Business | Forms | Offices | State of Nevada Home Page
Please enable Javascript! This site uses Javascript for menus and many other features. You must enable both Javascript and cookies to use DMV Online Transactions.
Address Changes
On this Page
Real ID
Address Change Options
Registration Renewals
Related Topics
Name Changes
We do not accept any address change by email. Address changes on Commercial Driver Licenses must be completed in person.
Nevada law requires motorists to notify DMV of a change of address within 30 days of the move, including residents who are leaving the state permanently.
Keeping your address current with us is important as we mail your renewal notices and notification of license suspensions, insurance valiation requests, etc.
You may list separate mailing and residence addresses. The DMV can also update the address on your voter registration when you change your address with us if you move within the same county.
Real ID Top ↑
As of October 1, 2020, the federal government will require your driver's license or ID card to be Real ID compliant if you wish to use it as identification to board an aircraft or enter federal facilities where ID is required.
If you have not upgraded to a Real ID, you may wish to visit a DMV office to change your address and upgrade at the same time. See the Real ID Act in Nevada for requirements.
Options Top ↑
Be sure to select/include your driver's license AND
your vehicles. Have your license plates number(s) ready. Vehicle addresses are not changed automatically.
Internet
Change your address online with a MyDMV account. You'll receive a new license or ID in the mail. You also have the option of ordering duplicate registration certificates.
Take a moment to create your account and get access to your license and vehicle records all in one place. MyDMV is
address changes and much more!
Get Started!
Please note your license or ID will be marked "NOT FOR FEDERAL OFFICIAL USE" unless you have already received a Real ID.
Mail/Fax
Complete the Change of Address Notification (DMV 22). You may fax the request to
(775) 684-4829 or mail it to the address on the application.
You should include a Payment Authorization (ADM 205) with faxed orders. Send
an authorization, a check or a money order with mailed applications. Do not send cash.
The cost for your license or ID card is $4.25. We will mail you a new license or ID card within 10 business days.
Updated Registration Certificates for your vehicles are optional. You may write your new address on the existing certificate. If you wish to order a new certificate and/or license plate decal, the cost is $6 for each vehicle. These are mailed separately from your license.
Change of Address Notification by Mail (DMV 22)
Payment
Authorization (ADM 205)
Active-duty military members, spouses and dependents who are residents of Nevada but stationed in another state should include a copy of their most recent Leave and Earnings Statement.
Handicapped Placards
You must submit a DMV 22 Application to change the address on handicapped placards.
This is not available online.
Off-Highway Vehicles
OHV address changes are completed and mailed on a separate form. Complete the OHV Change of Address Notification (OHV 010). Do not submit this at a DMV office.
In Person
You can complete a change of address in person at any DMV office. The new license or ID will be mailed to you. Registration Certificates are issued at the office.
The fee for an address change only is $4.25. If you are upgrading to a Real ID, the fee is $9.25 for a driver's license, $8.25 for an ID card or $13.25 for a commercial license.
Use the following application for in-person address changes:
Application for Driving Privileges or ID Card (DMV 002):English  |  Spanish  |  Tagalog
Updated Registration Certificates are optional. You may write your new address on the existing certificate. If you wish to order a new certificate and/or license plate decal, the cost is $6 for each vehicle.
Registration Renewal Top ↑
Use MyDMV if your vehicle registration is due and you must change your address. Create a MyDMV account, change your address and renew online in just a few simple steps.
Vehicle registration renewals completed through the Internet or emission inspection stations are sent to the address on record for the vehicle. The U.S. Postal Service will not forward the Registration Certificate and decal. A forwarding order with the Postal Service does not change your address with the DMV.
You may also renew by mail and include a Change of Address Notification (DMV 22). If your registration is due or expired, you may renew at a DMV kiosk and complete the address change afterward. You do not need a renewal notice to obtain an emission inspection or renew.
If you have already completed the renewal, you will have to apply for a substitute decal. You may change your address and order a duplicate through MyDMV.
Or, you may use
an Application for Duplicate Registration Certificate (VP 013) and a Payment Authorization (ADM 205). Include a cover letter with your daytime telephone number. Fax these to (775) 684-4797 or mail them to the address on the application. If you are mailing your application, you may pay by check or money order.
You may also renew or obtain a substitute decal in person at any DMV office. See Renewal Options.The correct way to force Vue to re-render a component - Michael Thiessen
Michael ThiessenThe correct way to force Vue to re-render a componentSeptember 2018Sometimes Vue's reactivity system isn't enough, and you just need to re-render a component.
Or maybe you just want to blow away the current DOM and start over.
So how do you get Vue to re-render a component the right way?
The best way to force Vue to re-render a component is to set a :key on the component. When you need the component to be re-rendered, you just change the value of the key and Vue will re-render the component.
It's a pretty simple solution, right?
You'll be happy to know that there are lots of others ways to do it:
The horrible way: reloading the entire page
The terrible way: using the v-if hack
The better way: using Vue's built-in forceUpdate method
The best way: key-changing on your component
Except here is where I'm going to ruin it for you.
If you need to force a reload or force an update, there's probably a better way.
It's likely that you're misunderstanding one of the following tricky things:
1. Vue's reactivity
1. Computed props
1. Watched props (sometimes)
1. Not using a :key attribute with v-for
Now, there are valid use cases for forcing an update. Most of these will be solved using the key-changing technique that's at the bottom of this article.
Horrible way: reload the entire page
This is one is equivalent to restarting your computer every time you want to close an app.
I guess it would work some of the time, but it's a pretty bad solution.
There isn't really much more to say about this. Don't do it.
Let's look for a better way.
Terrible way: the v-if hack
Vue comes with the v-if directive that will only render the component when it's true. If it's false, the component will not exist at all in the DOM.
Here's how we set it up for the v-if hack to work.
In your template you'll add the v-if directive:
<template>
<my-component v-if="renderComponent" />
</template>
In your script you'll add in this method that uses nextTick:
<script>
export default {
data() {
return {
renderComponent: true,
};
},
methods: {
forceRerender() {
// Remove my-component from the DOM
this.renderComponent = false;
this.$nextTick(() => {
// Add the component back in
this.renderComponent = true;
});
}
}
};
</script>
This is what's going on here:
Initially renderComponent is set to true, so my-component is rendered
When we call forceRerender we immediately set renderComponent to false
We stop rendering my-component because the v-if directive now evaluates to false
On the next tick renderComponent is set back to true
Now the v-if directive evaluates to true, so we start rendering my-component again
There are two pieces that are important in understanding how this works.
First, we have to wait until the next tick or we won't see any changes.
In Vue, a tick is a single DOM update cycle. Vue will collect all updates made in the same tick, and at the end of a tick it will update what is rendered into the DOM based on these updates. If we don't wait until the next tick, our updates to renderComponent will just cancel themselves out, and nothing will change.
Second, Vue will create an entirely new component when we render the second time. Vue will destroy the first one and create a new one. This means that our new my-component will go through all of its lifecycles as normal — created, mounted, and so on.
On a side note, you can use nextTick with promises if you prefer that:
forceRerender() {
// Remove my-component from the DOM
this.renderComponent = false;
// If you like promises better you can
// also use nextTick this way
this.$nextTick().then(() => {
// Add the component back in
this.renderComponent = true;
});
}
Still, this isn't a great solution. I call it a hack because we're hacking around what Vue wants us to do.
So instead, let's do what Vue wants us to do!
Better way: You can use forceUpdate
This is one of the two best ways to solve this problem, both of which are officially supported by Vue.
Normally, Vue will react to changes in dependencies by updating the view. However, when you call forceUpdate, you can force that update to occur, even if none of the dependencies has actually changed.
Here is where most people make the biggest mistakes with this method.
If Vue automatically updates when things change, why should we need to force an update?
The reason is that sometimes Vue's reactivity system can be confusing, and we think that Vue will react to changes to a certain property or variable, but it doesn't actually. There are also certain cases where Vue's reactivity system won't detect any changes at all.
So just like the last methods, if you need this to re-render your component, there's probably a better way.
There are two different ways that you can call forceUpdate, on the component instance itself as well as globally:
// Globally
import Vue from 'vue';
Vue.forceUpdate();
// Using the component instance
export default {
methods: {
methodThatForcesUpdate() {
// ...
this.$forceUpdate();
// Notice we have to use a $ here
// ...
}
}
}
Important: This will not update any computed properties you have. Calling forceUpdate will only force the view to re-render.
The best way: key-changing
There are many cases where you will have a legitimate need to re-render a component.
To do this the proper way, we will supply a key attribute so Vue knows that a specific component is tied to a specific piece of data. If the key stays the same, it won't change the component, but if the key changes, Vue knows that it should get rid of the old component and create a new one.
Exactly what we need!
But first we'll need to take a very short detour to understand why we use key in Vue.
Why do we need to use key in Vue?
Once you understand this, it's a pretty small step to understanding how to force re-renders the proper way.
Let's say you're rendering a list of components that has one or more of the following:
It's own local state
Some sort of initialization process, typically in created or mounted hooks
Non-reactive DOM manipulation, through jQuery or vanilla APIs
If you sort that list, or update it in any other way, you'll need to re-render parts of the list. But you won't want to re-render everything in the list, just the things that have changed.
To help Vue keep track of what has changed and what hasn't, we supply a key attribute. Using the index of an array is not helpful here, since the index is not tied to specific objects in our list.
Here is an example list that we have:
const people = [
{ name: 'Evan', age: 34 },
{ name: 'Sarah', age: 98 },
{ name: 'James', age: 45 },
];
If we render it out using indexes we will get this:
<ul>
<li v-for="(person, index) in people" :key="index">
{{ person.name }} - {{ index }}
</li>
</ul>
// Outputs
Evan - 0
Sarah - 1
James - 2
If we remove Sarah, we will get:
Evan - 0
James - 1
The index associated with James is changed, even though James is still James. James will be re-rendered, even if we don't want him to be.
So here we want to use some sort of unique id, however we end up generating it.
const people = [
{ id: 'this-is-an-id', name: 'Evan', age: 34 },
{ id: 'unique-id', name: 'Sarah', age: 98 },
{ id: 'another-unique-id', name: 'James', age: 45 },
];
<ul>
<li v-for="person in people" :key="person.id">
{{ person.name }} - {{ person.id }}
</li>
</ul>
Before when we removed Sarah from our list, Vue deleted the components for Sarah and James, and then created a new component for James. Now, Vue knows that it can keep the two components for Evan and James, and all it has to do is delete Sarah's.
If we add a person to the list, it also knows that it can keep all of the existing components, and it only has to create a single new component and insert it into the correct place. This is really useful, and helps us a lot when we have more complex components that have their own state, have initialization logic, or do any sort of DOM manipulation.
Maybe that detour wasn't so short. But it was necessary to explain how keys in Vue work.
Anyways, let's get on with the best method of forcing re-renders!
Key-changing to force re-renders of a component
Finally, here is the very best way (in my opinion) to force Vue to re-render a component.
You take this strategy of assigning keys to children, but whenever you want to re-render a component, you just update the key.
Here is a very basic way of doing it:
<template>
<component-to-re-render :key="componentKey" />
</template>
export default {
data() {
return {
componentKey: 0,
};
},
methods: {
forceRerender() {
this.componentKey += 1;
}
}
}
Every time that forceRerender is called, our prop componentKey will change. When this happens, Vue will know that it has to destroy the component and create a new one.
What you get is a child component that will re-initialize itself and "reset" it's state.
A simple and elegant way to solve our problem!
Just remember, if you find yourself needing to force Vue to re-render a component, maybe you aren't doing something the best way.
If, however, you do need to re-render something, choose the key-changing method over anything else.
Level up on VueJS
My best content is only available to my email list.
Join thousands of other devs and level up your Vue skills each week!
Sign upMost PopularThe Paradox of Abstraction: When Good Code is Bad CodeMay 2019I felt like a freaking genius. My code had transcended bits and bytes. Now it was truly a work of art, worthy of awards and accolades... or so I thought.26 Time Saving Tips for VueJanuary 2019When writing Vue applications, we waste our time by doing things the wrong way, when we could have been doing it the right way from the start. That's why I put together this list of 26 articles that will help you save time, by teaching you how to avoid some common time-wasters.I'm Michael Thiessen and I write about all things VueJS here. You can also follow me on Twitter for hot tips and insights about Vue!Level up on VueJS
My best content is only available to my email list.
Join thousands of other devs and level up your Vue skills each week!
Sign up
Nah, I'm goodData Loader:
15 vs. 18 character IDs for updating records - Answers - Salesforce Trailblazer Community
Search
Log In
Log in with Salesforce
or
Log in with Salesforce Events
Log in with Marketing Cloud
By logging in, you agree to our
Terms of Use
Log In
using your Salesforce account
Home
Answers
Help
Events
Collaboration
Ideas
Featured Groups
Known Issues
New here?
Sign Up
Have an account?
Sign In
Browse by categories
All
Collaboration
Configuration & Data Management
CPQ and Billing
Customer Service & Support
Desktop Integration
Einstein Analytics
Email
Email Marketing
Journey Management
Mobile
Mobile Messaging
Packaging, Uploading & Installing Apps
Reports & Dashboards
Sales & Marketing
Security
Social Marketing
Trailhead Challenges
Additional Products
Ask
Search:
Reset Search
Welcome to Support!
Search for an answer or ask a question of the zone or Customer Support.
Need help?
Dismiss
ShowAll Questionssorted byDate Posted
ShowAll QuestionsUnanswered QuestionsUnsolved QuestionsSolved Questions
sorted byDate PostedRecent ActivityMost Popular
Solved QuestionsThis Question
Steve Thurston Data Loader:
15 vs. 18 character IDs for updating recordsI need to update a couple thousand Account records.  However, the original data export we used from Salesforce has the 15 digit case sensitive ID.  I know that if you treat these as case insensitive, then there are "duplicates".  (Friggin' Excel being case insensitive for it's pivot tables revealed this.)Now I need to upload the updated records back into Salesforce.  I know Data Loader exports the 18 character ID.  If you Update using a 15 character ID, is Data Loader smart enough to know that it needs to treat them as case sensitive?August 28, 2012 · Like1 · Follow1
Best Answer chosen by Moderator (salesforce.com) Steve MolisAs long as you maintained the 15 char ID in the original Upper/Lower Case format the Dataloader should match the records with no problems.  August 28, 2012 · Like1 · Dislike1
All AnswersAndrew GrossI do not think it is smart enough.Excel connector has a built in function to convert your 15s to 18s called =Fixid() - install excel connector and convert.Here is a relevant blog post: http://www.forcecollective.com/2012/05/09/hello-casesafeid/August 28, 2012 · Like0 · Dislike0
Steve MolisAs long as you maintained the 15 char ID in the original Upper/Lower Case format the Dataloader should match the records with no problems.  This was selected as the best answerAndrew GrossWhoops, Steve is right - thanks Steve!  I've done this so many times so I feel silly now - the reason I've had to go to 18 in the past is for doing VLOOKUP type functions within excel.  August 28, 2012 · Like0 · Dislike0
Steve ThurstonThank you very much, gentlement!August 31, 2012 · Like0 · Dislike0
Neha ReddyHI,You Can Generate a Account Report with their Names And ID's  ,here it generates the report with 15 char Id's,Now Export the Report Copy the ID's Which you want and ,OR ,you can see the Report in Printable Viewand copy the IDs,Upload the data into That ID records.November 26, 2012 · Like0 · Dislike0
Bruce WantuchHi all,Im having a similar issue as the OP. I am importing around a thousand tasks to various accounts using the Account ID. When I used the 18 character ID, it said that the account could not be found. When i used the 15 character ID, it said there are multiple Accounts with that ID. Not sure what the solution is. As a side question, what is the reasoning behind having 2 account IDs for every account?ThanksJune 25, 2014 · Like0 · Dislike0
Kane Chelster MacaspacInternally, Salesforce uses a case-sensitive 15 digit ID for all records.  Since there are applications like Access or Excel which do not recognize that 50130000000014c is a different ID than 50130000000014C, the case-safe 18 character ID was introduced.For a more in-depth explanation, you can check this article: https://help.salesforce.com/apex/HTViewSolution?urlname=How-can-I-use-case-safe-IDs-1327109414620&language=en_USSeptember 10, 2014 · Like1 · Dislike0
You need to sign in to do that.
Need an account?
Sign Up
Have an account?
Sign In
Dismiss
Need help?
©Copyright 2000-
, salesforce.com, inc. All rights reserved. Various trademarks held by their respective owners.
1-800-NO-SOFTWARE
1-800-667-6389
The Landmark © One Market St.,
Suite 300
San Francisco, CA 94105
United States
Links
Privacy Statement
Security Statement
Terms of Use
Participation Guidelines
Follow us on Facebook
Follow us on Twitter
Visit our Channel on YouTube
Follow us on Google+
Check us out on LinkedIn
Salesforce
Salesforce.com
AppExchange
Salesforce Admins
Salesforce Developers
Trailhead
Need Help?
If you can't find what you're looking for,
contact Salesforce Customer Support.
Powered by Community Cloud.
Learn More >
We use cookies to make interactions with our websites and services easy and meaningful, to better understand how they are used and to tailor advertising. You can read more and make your cookie choices here. By continuing to use this site you are giving us your consent to do this.Updating Specific Rows | Modifying Data with SQL | Treehouse
Home
Free Trial
Sign In
Techdegree
Tracks
Library
Community
Support
Bummer! This is just a preview. You need to be signed in with a Basic account to view the entire video.
Modifying Data with SQL
Preview
Start a free Basic trialto watch this video
Sign up for Treehouse
Updating Specific Rows
4:42
with Andrew Chalkley
It's more useful to update specific rows. Like with SELECT statements, you can use conditions to target specific rows.
Teacher's Notes
Video Transcript
Downloads
SQL Used
An update statement for specific rows:
UPDATE <table> SET <column> = <value> WHERE <condition>;
Examples:
UPDATE users SET password = "thisisabadidea" WHERE id = 3;
UPDATE blog_posts SET view_count = 1923 WHERE title = "SQL is Awesome";
Update multiple columns for specific rows:
UPDATE <table> SET <column 1> = <value 1>, <column 2> = <value 2> WHERE <condition>;
Examples:
UPDATE users SET entry_url = "/home", last_login = "2016-01-05" WHERE id = 329;
UPDATE products SET status = "SOLD OUT", availability = "In 1 Week" WHERE stock_count = 0;
See all of the SQL used in Modifying Data With SQL in the Modifying Data With SQL Cheatsheet.
0:00
Now it's one thing changing
all entries in a table,
0:03
how about targeting specific rows?
0:06
I can see that being more useful.
0:09
Let's start with our original UPDATE
statement that updates all the rows.
0:13
How do you think we should select
the rows where we want to update them?
0:17
Well, just like a SELECT statement
where you can use a WHERE clause,
0:21
you can do the same thing with WHERE
conditions on UPDATE statements.
0:26
This time, instead of reading the rows,
0:28
you're updating the rows
that match this criteria.
0:32
Remember, conditions come
in all shapes and sizes.
0:36
Some have operators such as a quality and
inequality, greater than or
0:40
less than to name a few.
0:42
Then there's searching in sets
of values with the IN keyword.
0:46
There's also conditions
where you can search for
0:48
ranges with the BETWEEN keyword.
0:51
Finally, you could use the LIKE
keyword where you could search for
0:55
patterns of characters.
0:57
If you've taken the prerequisites or
have the prerequisite knowledge for
1:01
this course, you should be
familiar with these conditions.
1:04
Let's use some of these
conditions to update rows.
1:08
Let's look for some missing
information in our books table.
1:14
As you can see in the last entry,
1:16
Animal Farm, there’s a missing
value in the genre column.
1:20
What condition would we use in
order just to select this row?
1:24
The most unique value
would be the ID of 20.
1:37
Other books could have the name,
Animal Farm, or the same author,
1:42
or released in 1945.
1:44
Let's update the genre of
Animal Farm to Classic.
1:58
All right, let's take another
look at Animal Farm again.
2:13
It's now a Classic.
2:15
Let's update our loans table too.
2:18
Let's take a look at it and
see what values we're missing.
2:22
Let's say the patron
with the ID of 1 returned
2:25
all their books that they've loaned,
books 4 and 8.
2:29
Let's imagine today is December 18th,
2015.
2:35
So let's start with UPDATE loans
2:40
SET returned_on =
2:44
"2015-12-18".
2:50
Now to the WHERE clause.
2:54
Well I could do something like this,
WHERE patron_id = 1,
3:00
and this will update the rows we need.
3:04
But imagine there were hundreds or
thousands of rows,
3:08
we may not want to update
all the loans for patron 1.
3:12
They may have loaned hundreds
of books over the years, so
3:16
to qualify it further would be better.
3:19
I could do, AND,
3:27
returned_on IS NULL.
3:34
This will only update loans
that hadn't been returned for
3:37
patron 1, and not any historical ones.
3:40
Now you can go even further and
3:47
add, AND book_id IN (4, 8).
3:54
Just in case if they had rented
out a different book and
3:58
they hadn't returned that one yet.
4:00
But since we can see all
entries in the loans table and
4:05
all the entries for patron 1,
we can simply do, WHERE patron id = 1
4:15
And as you can see
the returned_on has been updated.
4:19
Depending on your circumstances,
4:21
you can update multiple rows based
on any condition you construct.
4:25
The WHERE conditions are exactly how
you'd use them in a SELECT statement.
4:30
Instead of retrieving rows,
you're updating them.
4:33
So before running the UPDATE statement,
you can try your condition out first with
4:37
a SELECT query to make sure that the rows
returned are the ones you want to update.
You need to sign up for Treehouse in order to download course files.
Sign up
Our mission is to bring affordable technology education to people everywhere in order to help them achieve their dreams and change the world.
Our Company
About Us
Contact Us
Community
Treehouse Stories
Student Perks
Treehouse Blog
Affiliate Program
Careers
Topics
HTML
CSS
Design
JavaScript
Ruby
PHP
WordPress
iOS
Android
Development Tools
Business
Tracks
Web Design
Web Development
Rails Development
PHP Development
iOS Development
Android Development
WordPress Development
Starting a Business
Treehouse Blog
Shop Treehouse
About Treehouse
Privacy Policy
Terms & Conditions
© 2019 Treehouse Island, Inc.
Sign in
Email Address
Password
I forgot my password
Sign inCustomer.update() | Ruby - Braintree Developer Documentation
Skip to main content
Braintree a PayPal Service
Support Articles
Developer Docs
GraphQL Docs & Tools
Open search icon
Search
Braintree a PayPal Service
Search glass icon
Hit ESC to close
Developer Docs search results icon
From Developer Docs
Current SDKs
Android v3
iOS v4
JavaScript v3
Previous SDKs
Android v2
iOS v3
JavaScript v2
Java
.NET
Node.js
PHP
Python
Ruby
All Content
All Content
Guides
Reference
Start typing to search
Support Articles search results icon
Support Articles
Informational tooltip
What are Support Articles?
Learn the basics of payments, how to best use Braintree features for your business, and what you can do to keep payments secure.
Start typing to search
More in Support Articles
Get Help
Control Panel
Caret down
Sandbox
Log in
Sign up
Production
Log in
Sign up on the website
About
Get Started
Guides
Reference
Integration Experience Survey
Let us know what you think about our developer docs and the Braintree integration experience.
Would you recommend a Braintree integration to another developer?
1
2
3
4
5
6
7
8
9
10
Not at all likely
Extremely likely
What 3 things are most vital to good integration documentation?
Tutorials
API Reference
Copyable code
Clear, consistent content
Runnable example repos
Easy access to support
Navigation & search
Design & usability
Rate your integration experience with our developer docs so far:
Didn't meet expectations
Met expectations
Exceeded expectations
Where are you in your integration?
Select an option
Still researching
Currently integrating
Recently integrated
Maintaining/enhancing an established integration
Other
What size is the organization you are integrating with Braintree?
Startup
Small & medium business
Enterprise
Can we reach out to you for future surveys?
Email address (optional)
This site is protected by reCAPTCHA and the Google
Privacy Policy and
Terms of Service apply.
Hide for now
Submit answers
Menu
Client References
Android
iOS
JavaScript v3
JavaScript v2
Best Practices and Troubleshooting
Browser Support
Configuration
Credit Cards
Hosted Fields
PayPal
Server-Side API Requests
Add-On
All
Address
Create
Delete
Find
Update
Apple Pay
Register Domain
Registered Domains
Unregister Domain
Client Token
Generate
Credit Card
Create
Delete
Expiring Between
Find
Update
Credit Card Verification
Search
Customer
Create
Delete
Find
Search
Update
Discount
All
Dispute
Accept
Add File Evidence
Add Text Evidence
Finalize
Find
Remove Evidence
Search
Document Upload
Create
Merchant Account
All
Create
Create For Currency
Find
Update
Payment Method
Create
Delete
Find
Grant
Revoke
Update
Payment Method Nonce
Create
Find
Plan
All
Settlement Batch Summary
Generate
Subscription
Cancel
Create
Find
Retry Charge
Search
Update
Transaction
Cancel Release
Clone Transaction
Find
Hold In Escrow
Refund
Release From Escrow
Sale
Search
Submit For Partial Settlement
Submit For Settlement
Void
Transaction Line Item
Find All
Server-Side Response Objects
Add-On
Address
Android Pay Card
Apple Pay Card
Apple Pay Options
Credit Card
Credit Card Verification
Customer
Discount
Dispute
Document Upload
Masterpass Card
Merchant Account
PayPal Account
Payment Method
Payment Method Nonce
Plan
Samsung Pay Card
Settlement Batch Summary
Subscription
Transaction
Transaction Line Item
Venmo Account
Visa Checkout Card
General
Best Practices
Braintree IP Addresses
Class-Level vs Instance Methods
Countries
Currencies
Enterprise Third-Party Plugins
Exceptions
Level 2 and 3 Processing
Overview
Required Fields
Processor Responses
Authorization
Settlement
AVS and CVV
Proxy Servers
Result Objects
Searching
Search Fields
Search Results
Statuses
Testing
Upgrade to Braintree SDKs
Validation Errors
Overview
Validation Errors
Webhooks
Overview
Account Updater
Braintree Auth
Disbursement
Dispute
Grant API
OAuth
Payment Method
Sub-merchant Account
Subscription
Test
Customer.update()
SDK
Caret down
Current Braintree SDKsJava.NETNode.jsPHPPythonRuby
See also the Customer response object.
To update a customer, use its ID along with new attributes. The same validations apply as when creating a customer. Any attribute not passed will remain unchanged.
Ruby
Copy
Copied
result = gateway.customer.update(
"a_customer_id", # id of customer to update
:first_name => "New First Name",
:last_name => "New Last Name"
)
if result.success?
puts "customer successfully updated"
else
p result.errors
end
This code snippet now uses gateway instance methods instead of class-level methods. Learn more.
If the customer can't be found, it will raise a Braintree::NotFoundError.
Arguments
id
required, String
A string value representing an existing customer in your Vault.
Additional
Parameters
:company
String
Company name. 255 character maximum.
:credit_card
A credit or debit payment method.
:billing_address
A billing address associated with a specific credit card. The maximum number of addresses per customer is 50.
:company
String
Company name. 255 character maximum.
:country_code_alpha2
String
The ISO 3166-1 alpha-2 country code specified in an address. The gateway only accepts specific alpha-2 values.
:country_code_alpha3
String
The ISO 3166-1 alpha-3 country code specified in an address. The gateway only accepts specific alpha-3 values.
:country_code_numeric
String
The ISO 3166-1 numeric country code specified in an address. The gateway only accepts specific numeric values.
:country_name
String
The country name specified in an address. We only accept specific country names.
:extended_address
String
The extended address information—such as apartment or suite number. 255 character maximum.
:first_name
String
The first name. 255 character maximum.
:last_name
String
The last name. 255 character maximum.
:locality
String
The locality/city. 255 character maximum.
:options
Optional values that can be passed with a request.
:update_existing
bool
Update the billing address associated with the payment method token specified. Other payment methods associated with the same billing address will have their addresses updated, as well.
:postal_code
String
The postal code. Postal code must be a string of 4-9 alphanumeric characters, optionally separated by a dash or a space. Spaces and hyphens are ignored.
:region
String
The state or province. 255 character maximum.
:street_address
String
The credit card billing street address. 255 character maximum. Only required if using card verification when AVS rules are configured to require street address.
:billing_address_id
String
The two-letter value for an address associated with a specific credit card. The maximum number of addresses per customer is 50.
:cardholder_name
String
The name associated with the credit card. Must be less than or equal to 175 characters.
:cvv
String
Typically requires PCI SAQ D compliance
We recommend using payment_method_nonce to avoid any PCI concerns with raw credit card data being present on your server.
A 3 or 4 digit card verification value assigned to a credit card. The CVV will never be stored in the gateway, but it can be provided with one-time requests to verify the card.
:expiration_date
String
While we recommend using payment_method_nonce when updating raw credit card data, the expiration date can be updated directly without any PCI concerns as long as you do not store, process, or transmit the raw PAN or CVV.
The expiration date, formatted MM/YY or MM/YYYY. May be used instead of expiration_month and expiration_year.
:expiration_month
String
While we recommend using payment_method_nonce when updating raw credit card data, the expiration month can be updated directly without any PCI concerns as long as you do not store, process, or transmit the raw PAN or CVV.
The expiration month of a credit card, formatted MM. May be used with expiration_year, and instead of expiration_date.
:expiration_year
String
While we recommend using payment_method_nonce when updating raw credit card data, the expiration year can be updated directly without any PCI concerns as long as you do not store, process, or transmit the raw PAN or CVV.
The two or four digit year associated with a credit card, formatted YYYY or YY. May be used with expiration_month, and instead of expiration_date.
:number
String
Typically requires PCI SAQ D compliance
We recommend using payment_method_nonce to avoid any PCI concerns with raw credit card data being present on your server.
The 12-19 digit value on a credit card consisting of a bank identification number (BIN) and primary account number (PAN).
:options
Optional values that can be passed with a request.
:fail_on_duplicate_payment_method
bool
If this option is passed and the same payment method has already been added to the Vault for any customer, the request will fail. This option will be ignored for PayPal, Pay with Venmo, Apple Pay, Google Pay, and Samsung Pay payment methods.
:make_default
bool
This option makes the specified payment method the default for the customer.
:update_existing_token
String
Update the payment method token specified.
:verification_amount
String
Specify a non-negative amount that you want to use to verify a card. If you do not pass this option, the gateway will automatically use a verification amount of $0 or $1, depending on the processor and/or card type.
:verification_merchant_account_id
String
Specify the merchant account ID that you want to use to verify a card. Can't be a Braintree Marketplace sub-merchant account. For more details on merchant accounts in general, see merchant_account_id on Transaction.sale().
:verify_card
bool
If the payment method is a credit card, this option prompts the gateway to verify the card's number and expiration date. It also verifies the AVS and CVV information if you've enabled AVS and CVV rules.
noteBraintree strongly recommends verifying all cards before they are stored in your Vault by enabling card verification for your entire account in the Control Panel.
In some cases, cardholders may see a temporary authorization on their account after their card has been verified. The authorization will fall off the cardholder's account within a few days and will never settle.
Only returns a CreditCardVerification result if verification runs and is unsuccessful.
:token
String
An alphanumeric value that references a specific payment method stored in your Vault. Must be less than or equal to 36 characters. If using a custom integration, you can specify what you want the token to be. If not specified, the gateway will generate one that can be accessed on the result. If using our Drop-in UI with a customer ID to vault payment methods, you can't specify your own token. Length and format of gateway-generated tokens and IDs may change at any time.
:custom_fields
A collection of custom field/value pairs. Fields and values must be less than 255 characters. You must set up each custom field in the Control Panel prior to passing it with a request. Querying this value returns a collection of custom field values stored on the customer object.
:default_payment_method_token
String
Update the customer's default payment method to the specified token. See example below.
:device_data
String
Customer device information. Pass this value only if you have Advanced Fraud Tools enabled and are adding credit card data to your Vault. Be sure to provide the full string received from the Braintree client SDK.
:email
String
Email address composed of ASCII characters.
:fax
String
Fax number. 255 character maximum.
:first_name
String
The first name. 255 character maximum.
:id
String
If specified, will replace the customer's existing ID. 36 character maximum; must be unique within your Vault; valid characters are letters, numbers, -, and _; the words "all" and "new" currently can't be used.
:last_name
String
The last name. 255 character maximum.
:payment_method_nonce
String
One-time-use reference to payment information provided by your customer, such as a credit card or PayPal account. When passed on customer update, it creates a payment method associated with the existing customer; see example below.
:phone
String
Phone number. Phone must be 10-14 characters and can only contain numbers, dashes, parentheses and periods.
:website
String
Website URL. 255 character maximum. Website must be well-formed. The URL scheme is optional.
Examples
Update customer and existing credit card
To update an existing credit card when using the customer update method, you need to pass the token of the credit card under the credit card options.
noteCredit cards are the only payment method type that you can update using the customer update method. To update other payment method types, use PaymentMethod.update().
Ruby
Copy
Copied
result = gateway.customer.update(
"a_customer_id", # id of customer to update
:payment_method_nonce => nonce_from_the_client,
:email => "new.email@example.com",
:credit_card => {
:options => {
# token of credit card to update
:update_existing_token => "the_token"
}
}
)
This code snippet now uses gateway instance methods instead of class-level methods. Learn more.
If you are only storing the customer ID in your system and using a 1:1 model of customer to credit card, then you can get the token for the credit card from the customer details.
Ruby
Copy
Copied
customer = gateway.customer.find("a_customer_id")
token = customer.credit_cards[0].token
This code snippet now uses gateway instance methods instead of class-level methods. Learn more.
Update customer, credit card, and billing address
The billing address can also be updated by adding in the billing address details and setting the update_existing option in the billing address attributes.
noteUsing this method, you can update any of the credit card parameters listed above, but some parameters have been deprecated to avoid any PCI concerns with raw credit card data being present on your server.
Ruby
Copy
Copied
result = gateway.customer.update(
"a_customer_id",
:payment_method_nonce => nonce_from_the_client,
:email => "new.email@example.com",
:credit_card => {
:options => {
:update_existing_token => "the_token",
},
:billing_address => {
:street_address => "New Street Address",
:postal_code => "60622",
:options => {
:update_existing => true
}
}
}
)
This code snippet now uses gateway instance methods instead of class-level methods. Learn more.
If you omit the update_existing option under the billing address, we will create a new address for the customer and associate it to the credit card. The old address will remain associated to the customer but no longer associated as the billing address of the credit card.
Update customer and create new payment method
You can add a new payment method to an existing customer using the customer update API.
Credit card
If you omit the update_existing_token option from the examples in the previous sections, a new credit card will be created and associated to the customer.
Ruby
Copy
Copied
customer = gateway.customer.find("the_customer_id")
customer.credit_cards.size
#=> 1
result = gateway.customer.update(
customer.id,
:payment_method_nonce => nonce_from_the_client
)
if result.success?
result.customer.credit_cards.size
#=> 2
end
This code snippet now uses gateway instance methods instead of class-level methods. Learn more.
Any payment method type
You can use a payment method nonce for any payment method type—not just a credit card—to associate that payment method to the customer. The example below shows adding a payment method while also updating customer details.
Ruby
Copy
Copied
result = gateway.customer.update(
"a_customer_id", # id of customer to update
:payment_method_nonce => nonce_from_the_client,
:email => "new.email@example.com",
)
This code snippet now uses gateway instance methods instead of class-level methods. Learn more.
Update default payment method
To update a customer's default payment method, get that payment method's token and pass it as the default_payment_method_token value below:
Ruby
Copy
Copied
result = gateway.customer.update(
"a_customer_id",
:default_payment_method_token => "the_token"
)
This code snippet now uses gateway instance methods instead of class-level methods. Learn more.
Card verification
By default we will run credit card validations but not perform verification. Braintree strongly recommends verifying all cards before they are stored in your Vault by enabling card verification for your entire account in the Control Panel.
If you choose to manually verify cards, set verify_card to true.
Ruby
Copy
Copied
result = gateway.customer.update(
"a_customer_id",
:payment_method_nonce => nonce_from_the_client,
:credit_card => {
:options => {
:update_existing_token => "the_token",
:verify_card => true
}
}
)
This code snippet now uses gateway instance methods instead of class-level methods. Learn more.
importantIf you are using our Advanced Fraud Tools, we strongly recommend passing device_data each time you verify a card.
See also
Customer validations
Payment method validations
Card verification
Get help from a human
Submit a request for help with your Braintree sandbox or production account.
Get Help
Give us feedback on this page
Submit this short survey to let us know how we can improve your experience.
Send Feedback
Get Started
Integration Guide
Tutorial (Preview)
Checkout UIs
Example Integrations
Basics
Client Authorization
Payment Method Nonces
Transactions
Customers
Payment Methods
Payment Methods
ACH Direct Debit
Apple Pay
Credit Cards
Masterpass
Google Pay
PayPal
Samsung Pay
UnionPay (Beta)
Venmo
Visa Checkout
Tools
3D Secure
Advanced Fraud
Tools
Client SDK
Disputes
Payment Request API
Reports
Webhooks
Checkout UI
Drop-in UI
Hosted Fields
Additional Features
Braintree Auth (Beta)
Braintree
Marketplace
Grant API (Beta)
OAuth (Beta)
Recurring Billing
API Reference
Client References
Server-side API Requests
Server-side Response
Objects
General
Braintreepayments.com
|
Support Articles
Status
Braintree is a service of PayPal. © 2019 PayPal Privacy Policy | LegalPlease click here if you are not redirected within a few seconds.isbn:0120884690 - Google SearchSearchImagesPlayYouTubeNewsGmailDriveCalendarMoreTranslateBooksBloggerPhotosDocsEven more »Account OptionsSign inSearch settingsWeb History AllImagesVideosNewsBooksSearch OptionsThe webCountry: PakistanAny viewPreview and full viewFull viewAny documentBooksMagazinesNewspapersSorted by relevanceSorted by date2 resultsProceedings of the Thirtieth International Conference on ...books.google.com.pk‎2004 - No previewProceedings 2004 VLDB Conference: The 30th International ...books.google.com.pkVLDB - ‎2004 - No previewProceedings of the 30th Annual International Conference on Very Large Data Bases held in Toronto, Canada on August 31 - September 3 2004. Organized by the VLDB Endowment, VLDB is the premier international conference on database technology.Advanced searchSearch Help Send feedbackGoogle Home Advertising Programmes Business Solutions Privacy Terms About GoogleEloquent by Example
Laravel
Offered by @codebyjeff
Welcome to Lesson Seven of Eloquent by Example!
One of the very first things you learned in Lesson One was the difference between insert() and create(). Inserting is a simple database action that makes an sql statement and puts data directly into the table. Creating is about instantiating a new Eloquent Model.
At the time that may have seemed a little pedantic, but today we are going to learn just how flexible and easy to use Eloquent's create and update statements are and why we prefer using the ORM for these tasks.
Things we'll learn:
simple create and update
fillable/guarded attributes
findOrNew
firstOrNew/firstOrCreate
updateOrCreate
Create and Update:
The only actual difficulty here lies in the similarity of the functions that the QueryBuilder and Eloquent use. We've already seen that without Eloquent, to insert a new record into the database we use the DB facade. Let's compare the following, using Tinker:
DB::table('dogs')->insert(['name' => 'Old Yeller', 'age' => 12]);
// result "true"
As we've mentioned before, this is simply an sql statement sent to the database, so it tells us that yes, "true", it successfully inserted. It won't add timestamps or do any other work for us. Now try Eloquent, but a long-hand method using save():
$dog = new \App\Dogs();
// result "App\Dogs"
$dog->name = 'Just-right Yeller'; // result "Just-right Yeller"
$dog->age = 6;
// result 6
$dog->save();
// result "true"
This is a bit of a hybrid approach. We are creating a new model instance, and so we have all the benefits of Eloquent, but then we build it by setting the attributes one-by-one and finally saving.
Compare this now to the third way we have, with create().
\App\Dogs::create(['name' => 'Young Yeller', 'age' => 3]);
"Illuminate\Database\Eloquent\MassAssignmentException with message 'name'"
Whoops! MassAssignmentException? What is this about?
Perhaps you've read about the $fillable and $guard attributes. These are protective measures that help ensure that only the fields you wish to populate are inserted or updated. $fillable is a whitelist, $guarded the opposite. Since we didn't add name or age to the $fillable array, an exception is thrown.
Now, here's the funny thing about this that may trip you and waste a lot of time. Remember that we made age a nullable field? Let's only add name to the whitelist and see what happens. At the top of our Dogs model, add:
protected $fillable = ['name'];
and now our insert (you'll have to exit and re-enter Tinker):
\App\Dogs::create(['name' => 'Young Yeller', 'age' => 3]);
It simply strips out the age field and inserts everything else, without any sort of warning! A terrible thing to try to track down in a malfunctioning application.
You might think that most developers would therefore shun the use of create() and update() this way. In fact, rather than avoiding such obviously useful code, we prefer to write unit tests. This issue won't hit you as often as you might be thinking, but when you first start out it can be the cause of a lot of hair-loss.
I want to show you one more variation of those techniques (I told you - it can seem a bit overwhelming at first! Don't worry, this will be second nature very quickly.)
$dog = new \App\Dogs(['name' => 'Young Yeller', 'age' => 3]);
// result App\Dogs {#690 name: "Young Yeller",}
Ignoring the fact we still haven't added age to our $fillable array, have a look inside your database "dogs" table. No record added.
This "new Dogs" is only creating a php instance, not a database record to go with it. We will need to call save() if we want to do that. This leads us nicely into the next set of functions.
findOrNew, firstOrNew/firstOrCreate:
These three functions are incredibly useful, and yet many Laravel developers shy away from them as something unfamiliar. There's no need to; in fact, you already understand them at this point.
The real difference we want to look at is "New" vs. "Create". As we just saw, whenever we use "new" with an Eloquent model, we are simply creating a new instance. It is no different than saying "$logger = new Monolog" or any other php instantiation. "Create", on the other hand, is a class function that also writes to the database, using save() internally. Its equivalent could be "$logger = (new Monolog)->log(['My message'])".
Therefore,
findOrNew is simply: "Find a record with primary key X. If you can't find one, return a new, empty model instance"
firstOrNew: "Find the first record that meets this where condition. If you can't find one, return a new, populated model instance"
firstOrCreate: "Find the first record that meets this where condition. If you can't find one, make a new, populated model instance and also save it to the database"
Why would you want to make empty instances? There are a few reasons, but one is that when we search for a record, we will always have a model instance as a result class, even if the one we want isn't found.
$dog = \App\Dogs::find(1);
$dog->name;
// "Joe"
$dog = \App\Dogs::find(100);
$dog->name;
// null
This means we can write our code more consistently and cleanly, because we don't have to litter it with lots of if (!empty($dog)) conditionals all over the place. The same code will work even if $dog is empty.
updateOrCreate:
There's one last function to look at before we stop for today. updateOrCreate() lets us wrap up a multi-part search with either an update or create statement. For example, if we use our "dogs" table again:
\App\Dogs::updateOrCreate(['id' => 1, 'name' => 'Joe'] , ['age' => 15] );
will search for a dog named Joe who is at id 1, and since it finds him, will set his age to 15. On the other hand,
\App\Dogs::updateOrCreate(['id' => 2, 'name' => 'Joe'] , ['age' => 15] );
will create a whole new dog record with 15 year old Joe and an id of 2. This comes in handy for things like a User profile, where you may not want to ask the user to fill in a lot of information when they register, but will want to be able to show them a profile screen where they can finish updating later.
That was a lot of different techniques and information. I'd really suggest that you take a little time and just experiment with those functions; see what works as expected, what doesn't, and what interesting variations you can come up with. There are more small tricks you can use with these, so have a look at the links I posted below as well.
Tomorrow we're going to do more advanced where clauses than what we've seen, which will also give us a chance to practice our updates more than we had time for.
See you next lesson!
Lesson 8: Advanced Where and When
Further Reading:
https://laravel.com/docs/5.3/queries#inserts
https://laravel.com/docs/5.3/queries#updates
https://laravel.com/docs/5.3/eloquent#inserting-and-updating-models
http://codebyjeff.com/blog/2016/04/eloquent-create-update-new-the-untold-story
About Jeff Madsen
Jeff Madsen is a free-lance developer living in Japan. He blogs about Laravel, Vue.js and other web development. Follow him on
Twitter
or Medium, or join his weekly
Laravel Quick Tips newsletter to learn more about the framework.
© 2019 Mahana Designs, LLCPHP | MySQL UPDATE Query - GeeksforGeeks
Courses
Hire with Us
×
Suggest a Topic
Select a Category
Advanced Computer Subject
Advanced Data Structure
Algorithms
Algorithms Quiz
Analysis
AngularJS
Aptitude
Arrays
Articles
Articles
Backtracking
Binary Search Tree
Bit Magic
Bootstrap
Branch and Bound
C
C Programs
C Quiz
C#
C# Programs
C++
C++ Programs
C++ Quiz
CAT
Combinatorial
Competitive Programming
Compiler Design
Compiler Design
Computer Networks
Computer Networks Quiz
Computer Organization & Architecture
Computer Organization and Architecture
Computer Subject
CS – Placements
CSS
Data Structures
Data Structures
DBMS
DBMS Quiz
Design Pattern
DI – Placements
Difference Between
Digital Electronics & Logic Design
Divide and Conquer
Dynamic Programming
Engineering Mathematics
Engineering Mathematics Questions
English – Placements
Experienced
Game Theory
GATE
GATE CS
GBlog
Geek on the Top
GeeksforGeeks Initiatives
Geometric
GFacts
Go Language
Graph
GRE
GRE Quiz
Greedy
Hadoop
Hash
Heap
HTML
Internship
Interview Experiences
ISRO
Java
Java Programs
Java Quiz
JavaScript
JQuery
JS++
Kotlin
Linked List
Linux-Unix
Machine Learning
Mathematical
Matrix
MCQ
Misc
Node.js
Operating Systems
Operating Systems Questions
Pattern Searching
Perl
PHP
PHP Programs
Placements
Program Output
Programming Language
Project
Puzzles
Python
Python Programs
Python-Quizzes
QA – Placement Quizzes
QA – Placements
Queue
Quizzes
Randomized
Reasoning – Placements
Recursion
Ruby
Scala
School Programming
Searching
Software Engineering
Sorting
SQL
Stack
Strings
Technical Scripter
TechTips
test_cat_june
Theory of Computation
Theory of Computation & Automata
Tree
UGC-NET
Web Technologies
Web technologies Questions
Submit
Skip to content
Algo ▼
Analysis of Algorithms
Topicwise ►
Searching Algorithms
Sorting Algorithms
Graph Algorithms
Bit Algorithms
Pattern Searching
Geometric Algorithms
Mathematical Algorithms
Randomized Algorithms
Game Theory
Algorithm Paradigms ►
Greedy Algorithms
Dynamic Programming
Divide and Conquer
Backtracking
Branch & Bound
All Algorithms
DS
▼
Array
LinkedList
Stack
Queue
Tree based DS ►
Binary Tree
Binary Search Tree
Heap
Hashing
Graph
Advanced Data Structure
Matrix
Strings
All Data Structures
Languages ▼
C
C++
Java
Python
C#
Scala
PHP
JavaScript
jQuery
SQL
HTML
CSS
Program Output
Interview
▼
Company Prep
Top Topics
Practice Company Questions
Interview Experiences
Experienced Interviews
Internship Interviews
Competitive Programming
Design Patterns
Multiple Choice Quizzes
Students
▼
Campus Ambassador Program
Project
Geek of the Month
Campus Geek of the Month
Placement Course
Competitive Programming
Testimonials
Geek on the Top
Careers
Internship
School Programming
GATE ▼
GATE Notes
GATE CS Corner
Last Minute Notes
GATE 2019
GATE Official Papers
ISRO CS Exam
UGC NET Papers
UGC NET CS Paper II
UGC NET CS Paper III
CS Subjects ▼
Core Subjects
►
Engg. Mathematics
Operating Systems
Computer Networks
DBMS
Compiler Design
Theory of Computation
Digital Electronics
Computer Organization & Architecture
Software Engineering
Microprocessor
Web Technology
Advanced Topics
Machine Learning
Computer Graphics
What’s Difference?
Quizzes ▼
Languages ►
C
C++
Java
Python
CS Subjectwise ►
Data Structures
Algorithms
Operating Systems
DBMS
Compiler Design
Computer Networks
Theory of Computation
Computer Organization
Software Engineering
HTML & XML
Engg. Mathematics
Aptitude
GBlog
Puzzles
Practice
▲
PHP | header() FunctionPHP date() format when inserting into datetime in MySQLStep by Step guide to Write your own WordPress TemplateMultiple Inheritance in PHPStatic Function in PHPHow to receive JSON POST with PHPPHP program to Generate the random number in the given range (min, max)Interesting Facts About PHPWhat does $$ (dollar dollar or double dollar) means in PHP ?PHP | Common terminology in OOPHow to check form submission in PHP ?PHP multidimensional array search by valueHow to identify server IP address in PHP ?How to check if URL contain certain string using PHP?Step by step guide to make your first Wordpress PluginOverloading in PHPHow to delete an array element based on key in PHP?Refresh a page using PHPDynamically generating a QR code using PHPWhat does '<?=' short open tag mean in PHP ?How to change the maximum upload file size in PHP ?How to recursively delete a directory and its entire contents (files + sub dirs) in PHP?How to create an array for JSON using PHP?Saving an Image from URL in PHPHow to log errors and warnings into a file in php?How to get first day of week in PHP?How to convert timestamp to time ago in PHP ?How to get name of calling function/method in PHP ?Comparing two dates in PHPSort array of objects by object fields in PHP
PHP | MySQL UPDATE Query
The MySQL UPDATE query is used to update existing records in a table in a MySQL database.
It can be used to update one or more field at the same time.
It can be used to specify any condition using the WHERE clause.
Syntax :
The basic syntax of the Update Query is –
Implementation of Where Update Query :
Let us consider the following table “Data” with four columns ‘ID’, ‘FirstName’, ‘LastName’ and ‘Age’.
To update the “Age” of a person whose “ID” is
201 in the “Data” table, we can use the following code :
Update Query using Procedural Method :
filter_none
edit
close
play_arrow
link
brightness_4
code
<?php
$link = mysqli_connect("localhost", "root", "", "Mydb");
if($link === false){
die("ERROR: Could not connect. "
. mysqli_connect_error());
}
$sql = "UPDATE data SET Age='28' WHERE id=201";
if(mysqli_query($link, $sql)){
echo "Record was updated successfully.";
} else {
echo "ERROR: Could not able to execute $sql. "
. mysqli_error($link);
}
mysqli_close($link);
?>
chevron_right
filter_none
Output :
Table After Updation –
The output on Web Browser :
Update Query using Object Oriented Method :
filter_none
edit
close
play_arrow
link
brightness_4
code
<?php
$mysqli = new mysqli("localhost", "root", "", "Mydb");
if($mysqli === false){
die("ERROR: Could not connect. "
. $mysqli->connect_error);
}
$sql = "UPDATE data SET Age='28' WHERE id=201";
if($mysqli->query($sql) === true){
echo "Records was updated successfully.";
} else{
echo "ERROR: Could not able to execute $sql. "
. $mysqli->error;
}
$mysqli->close();
?>
chevron_right
filter_none
Output :
Table After Updation –
The output on Web Browser :
Update Query using PDO Method :
filter_none
edit
close
play_arrow
link
brightness_4
code
<?php
try{
$pdo = new PDO("mysql:host=localhost;
dbname=Mydb", "root", "");
$pdo->setAttribute(PDO::ATTR_ERRMODE,
PDO::ERRMODE_EXCEPTION);
} catch(PDOException $e){
die("ERROR: Could not connect. "
. $e->getMessage());
}
try{
$sql = "UPDATE data SET Age='28' WHERE id=201";
$pdo->exec($sql);
echo "Records was updated successfully.";
} catch(PDOException $e){
die("ERROR: Could not able to execute $sql. "
. $e->getMessage());
}
unset($pdo);
?>
chevron_right
filter_none
Output :
Table After Updation –
The output on Web Browser :
My Personal Notes
arrow_drop_up
Save
Recommended Posts:PHP | MySQL Select QueryPHP | MySQL Delete QuerySQL | UPDATE StatementMongoDB vs MySQLHow to get ID of the last updated row in MySQL?PHP | MySQL WHERE ClauseIFNULL in MySQLMySQL | BIN() FunctionMySQL | Group_CONCAT() FunctionMySQL | LAST_DAY() FunctionMySQL | LEAD() and LAG() FunctionMySQL | RENAME USERMathematical functions in MySQLWhat is the difference between MySQL, MySQLi and PDO?MySQL | DEFAULT() FunctionShubrodeep BanerjeeI am a technology enthusiast who has a keen interest in programming I am pursuing Engineering in Computer Science from GEU, Dehradun I like to unwind by watching movies and English sitcomsI have a keen interest in musicIf you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on
the "Improve Article" button below.
Article Tags : PHPSQLWeb Technologiesmysql
Practice Tags : SQLPHP
thumb_up
Be the First to upvote.
To-do
Done
0
No votes yet.
Please write to us at contribute@geeksforgeeks.org to report any issue with the above content.
Post navigation
Previous first_page
PHP | MySQL Delete Query
Next last_page PHP | MySQL ORDER BY Clause
Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.
Load Comments
Most popular in PHP
Performance of for vs foreach in PHPsession_unset() vs session_destroy() in PHPHow to open a PDF files in web browser using PHP?How to send HTTP response code in PHP?PHP | Type Casting and Conversion of an Object to an Object of other class
Most visited in SQL
Comparisons between DELETE vs DROP in SQLSQL vs NoSQL: Which one is better to use?MySQL | Ranking FunctionsWhat are the Best Ways to Write a SQL Query?Difference between MySQL and MS SQL Server
5th Floor, A-118,
Sector-136, Noida, Uttar Pradesh - 201305
feedback@geeksforgeeks.org
COMPANY
About Us
Careers
Privacy Policy
Contact Us
LEARN
Algorithms
Data Structures
Languages
CS Subjects
Video Tutorials
PRACTICE
Courses
Company-wise
Topic-wise
How to begin?
CONTRIBUTE
Write an Article
Write Interview Experience
Internships
Videos
@geeksforgeeks, Some rights reservedSpring Data - CrudRepository save() Method | Baeldung
Start HereCourses ▼▲
REST with Spring
The canonical reference for building a production grade API with Spring.
Learn Spring Security
THE unique Spring Security education if you’re working with Java today.
New: Learn Spring
From no experience to actually building stuff​.
Guides ▼▲
Persistence
The Persistence with Spring guides
REST
The guides on building REST APIs with Spring
Security
The Spring Security guides
About ▼▲
Work With Me
What I can help with
Full Archive
The high level overview of all the articles on the site.
Write For Baeldung
Become a writer on the site.
About Baeldung
About Baeldung.
Spring Data – CrudRepository save() Method
Last modified: November 6, 2018
by
baeldung
Spring Data
Generic Top
I just announced the new
Learn Spring
course, focused on the fundamentals of Spring 5 and Spring Boot 2:
>> CHECK OUT THE COURSE
If you have a few years of experience in the Java ecosystem, and you're interested in sharing that experience with the community (and getting paid for your work of course), have a look at the "Write for Us" page.
Cheers. Eugen1. Overview
CrudRepository is a Spring Data interface for generic CRUD operations on a repository of a specific type. It provides several methods out of the box for interacting with a database.
In this tutorial, we’ll explain how and when to use the CrudRepository save() method.
To learn more about Spring Data repositories take a look at our article that compares CrudRepository to other repository interfaces of the framework.
2. Dependencies
We’ll have to add Spring Data and H2 database dependencies to our pom.xml file:
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
<dependency>
<groupId>com.h2database</groupId>
<artifactId>h2</artifactId>
<scope>runtime</scope>
</dependency>
3. Example Application
Let’s first create our Spring Data entity called MerchandiseEntity. This class will define the data types that will get persisted to the database when we call the save() method:
@Entity
public class MerchandiseEntity {
@Id
@GeneratedValue(strategy = GenerationType.AUTO)
private Long id;
private double price;
private String brand;
public MerchandiseEntity() {
}
public MerchandiseEntity(String brand, double price) {
this.brand = brand;
this.price = price;
}
}
Next, let’s create a CrudRepository interface to work with the MerchandiseEntity:
@Repository
public interface InventoryRepository
extends CrudRepository<MerchandiseEntity, Long> {
}
Here we specify the entity’s class and the entity id’s class, MerchandiseEntity and Long. When an instance of this repository is instantiated, the underlying logic will automatically be in place for working with our MerchandiseEntity class.
So with very little code, we’re already ready to start using the save() method.
4. CrudRepository save() to Add a New Instance
Let’s create a new instance of MerchandiseEntity and save it to the database using the InventoryRepository:
InventoryRepository repo = context
.getBean(InventoryRepository.class);
MerchandiseEntity pants = new MerchandiseEntity(
"Pair of Pants", BigDecimal.ONE);
pants = repo.save(pants);
Running this will create a new entry in the database table for MerchandiseEntity. Notice that we never specified an id. The instance is initially created with a null value for its id and when we call the save() method, an id is automatically generated.
The save() method returns the saved entity, including the updated id field.
5. CrudRepository save() to Update an Instance
We can use the same save() method to update an existing entry in our database. Suppose we had saved a MerchandiseEntity instance with a specific title:
MerchandiseEntity pants = new MerchandiseEntity(
"Pair of Pants", 34.99);
pants = repo.save(pants);
But later we found that we wanted to update the price of the item. We could then simply get the entity from the database, make the change and use the save() method as before.
Assuming we know the id of the item (pantsId), we can use the CRUDRepository method findById to get our entity from the database:
MerchandiseEntity pantsInDB = repo.findById(pantsId).get();
pantsInDB.setPrice(44.99);
repo.save(pantsInDB);
Here, we’ve updated our original entity with a new price and saved the changes back to the database.
6. Conclusion
In this quick article, we’ve covered the use of CrudRepository‘s save() method. This method can be used to add a new entry into your database as well as updating an existing one.
As usual, the code for the article is over on GitHub.
Generic bottom
I just announced the new Learn Spring course, focused on the fundamentals of Spring 5 and Spring Boot 2:
>> CHECK OUT THE COURSE
CategoriesSpring
REST
Java
Security
Persistence
Jackson
HTTP Client
Kotlin
SeriesJava “Back to Basics” Tutorial
Jackson JSON Tutorial
HttpClient 4 Tutorial
REST with Spring Tutorial
Spring Persistence Tutorial
Security with Spring
AboutAbout Baeldung
The Courses
Consulting Work
Meta Baeldung
The Full Archive
Write for Baeldung
Editors
Our Partners
Advertise on Baeldung
Terms of Service
Privacy Policy
Company Info
ContactMutations | Prisma DocsYou need to enable JavaScript to run this app.NewYou are currently viewing an old version of the docs. Clickhereto view the latest version.Docs1.14homequickstartTutorialsSetup PrismaDemo ServerCreate New DBMySQLPostgresConnect Empty DBMySQLPostgresConnect DB with DataMySQLPostgresBuild GraphQL ServersDevelopmentBuild a GraphQL Server with PrismaBuild a GraphQL Server from ScratchBuild a Realtime GraphQL Server with SubscriptionsAuthPermissionsDeploymentDeployment with NowDeployment with UpMiscResolver PatternsAccess Prisma from ScriptsAccess Prisma from a Node script using Prisma BindingsConnect to Prisma from the frontendDeploy Prisma ServersDigital Ocean (Docker Machine)Local (Docker)Digital Ocean (manual)KubernetesAWS FargateZeit Now and Google Cloud SQLDokkuPrisma Coud (Google Cloud SQL)Database WorkflowsData Export & ImportDatabase Access (SQL)Bootstrapping BoilerplatesTypeScriptNodeReact (Fullstack)ReferenceIntroductionWhat is PrismaGraphQL Server DevelopmentArchitectureService ConfigurationOverviewprisma.ymlOverview & ExampleYAML StructureData ModelData Modelling (SDL)MigrationsIntrospectionPrisma APIOverviewConceptsQueriesMutationsSubscriptionsServer-side SubscriptionsOverviewPrisma Servers & DBsPrisma ServersOverviewDockerDatabase ConnectorsOverviewMySQLPostgresData Import & ExportData ImportData ExportNormalized Data FormatCLI Command ReferenceOverviewDatabase Serviceprisma initprisma deployprisma infoprisma tokenprisma listprisma deleteprisma introspectData Workflowsprisma playgroundprisma importprisma exportprisma seedprisma resetCloudprisma loginprisma consoleprisma accountPrisma BindingsOverviewAPICode generationUpgrade GuidesGraphcool to PrismaOverviewData Modelling & GraphQL APIAuthentication & AuthorizationFunctionsFile HandlingServer HostingUpgrading PrismaOverviewUpgrade to 1.7Upgrade to 1.8FAQGeneralWhat is Prisma?How can I use Prisma?What programming languages does Prisma work with?What platforms and cloud providers does Prisma work with?Who should use Prisma?TechnicalCan I host Prisma myself?How do I connect my database to Prisma?What databases does Prisma support?What are the benefits of GraphQL?How do backups work?Prisma CloudWhat is a workspace?How do I manage access rights and permissions among my team members?What are Prisma servers? How do they relate to Prisma services?How do multi-staging development workflows work?Is there a free version of Prisma Cloud?How do I connect a database?Are there automatic backups?OtherWhere can I ask more questions?How is Prisma different from Graphcool Framework?How can I contribute to the documentation?How can I write a blog post for the Prisma blog?How can I give a conference talk?How can I organize a Meetup?ForumChatBlogOpen Console MutationsLast updated a day ago Edit this pageTable of ContentsObject mutationsCreating nodesUpdating nodesUpserting nodesDeleting nodesNested mutationsOverviewExamplesScalar list mutationsCreating nodesUpdating nodesBatch MutationsThe Prisma API offers
Simple mutations: Create, update, upsert and delete single nodes of a certain object type
Batch mutations: Update and delete many nodes of a certain model
Relation mutations: Connect, disconnect, create, update and upsert nodes across relations
In general, the Prisma API of a service is generated based on its data model. To explore the operations in your Prisma API, you can use a GraphQL Playground.
In the following, we will explore example queries based on a Prisma service with this data model:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
type Post {
id: ID! @unique
title: String!
published: Boolean!
author: User!
}
type User {
id: ID! @unique
age: Int
email: String! @unique
name: String!
posts: [Post!]!
}
#Object mutations
We can use model mutations to modify single nodes of a certain model.#Creating nodes
Here, we use the createUser mutation to create a new user:
1
2
3
4
5
6
7
8
9
10
11
12
13
# Create a new user
mutation {
createUser(
data: {
age: 42
email: "zeus@example.com"
name: "Zeus"
}
) {
id
name
}
}
Note: All required fields without a default value need to be specified in the data input object.
#Updating nodes
We can use updateUser to change the email and name. Note that we're selecting the node to update using the where argument:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
mutation {
updateUser(
data: {
email: "zeus2@example.com"
name: "Zeus2"
}
where: {
email: "zeus@example.com"
}
) {
id
name
}
}
#Upserting nodes
When we want to either update an existing node, or create a new one in a single mutation, we can use upsert mutations.
Here, we use upsertUser to update the User with a certain email, or create a new User if a User with that email doesn't exist yet:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
# Upsert a user
mutation {
upsertUser(
where: {
email: "zeus@example.com"
}
create: {
email: "zeus@example.com"
age: 42
name: "Zeus"
}
update: {
name: "Another Zeus"
}
) {
name
}
}
Note: create and update are of the same type as the data object in the createUser and updateUser mutations.
#Deleting nodes
To delete nodes, all we have to do is to use the select the node(s) to be deleted in a delete mutation.
Here, we use deleteUser to delete a user by its id:
1
2
3
4
5
6
7
8
9
mutation {
deleteUser(where: {
id: "cjcdi63l20adx0146vg20j1ck"
}) {
id
name
email
}
}
Because email is also annotated with the @unique directive, we can also selected (and thus delete) User nodes by their email:
1
2
3
4
5
6
7
8
9
mutation {
deleteUser(where: {
email: "cjcdi63l20adx0146vg20j1ck"
}) {
id
name
email
}
}
#Nested mutations
We can use create and update model mutations to modify nodes across relations at the same time. This is referred to as nested mutations and is executed transactionally.#Overview
Several nested mutation arguments exist:
create
update
upsert
delete
connect
disconnect
Their availability and the exact behaviour depends on the following two parameters:
the type of the parent mutation
create mutation
update mutation
upsert mutation
the type of the relation
optional to-one relation
required to-one
to-many relation
For example
a create mutation only exposes nested create and connect mutations
an update mutation exposes update, upsert mutations for a required to-one relation
#Examples
Rather than mapping out all possible scenarios at this point, we provide a list of examples.
It's recommended to explore the behaviour of different nested mutations by using the GraphQL Playground.Creating and connecting related nodes
We can use the connect action within a nested input object field to connect to one or more related nodes.
Here, we are creating a new Post and connect to an existing author via the unique email field. In this case, connect provides a way for node selection:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
# Create a post and connect it to an author
mutation {
createPost(data: {
title: "This is a draft"
published: false
author: {
connect: {
email: "zeus@example.com"
}
}
}) {
id
author {
name
}
}
}
If we provide a create argument instead of connect within author, we would create a related author and at the same time connect to it, instead of connecting to an existing author.
When creating a User instead of a Post, we can actually create and connect to multiple Post nodes at the same time, because User has a to-many relation Post.
Here, we are creating a new User and directly connect it to several new and existing Post nodes:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
# Create a user, create and connect new posts, and connect to existing posts
mutation {
createUser(
data: {
email: "zeus@example.com"
name: "Zeus"
age: 42
posts: {
create: [{
published: true
title: "First blog post"
}, {
published: true
title: "Second blog post"
}]
connect: [{
id: "cjcdi63j80adw0146z7r59bn5"
}, {
id: "cjcdi63l80ady014658ud1u02"
}]
}
}
) {
id
posts {
id
}
}
}
Updating and upserting related nodes
When updating nodes, you can update one or more related nodes at the same time.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
mutation {
updateUser(
data: {
posts: {
update: [{
where: {
id: "cjcf1cj0r017z014605713ym0"
}
data: {
title: "Hello World"
}
}]
}
}
where: {
id: "cjcf1cj0c017y01461c6enbfe"
}
) {
id
}
}
Note that update accepts a list of objects with where and data fields suitable for the updatePost mutation.
Nested upserting works similarly:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
mutation {
updatePost(
where: {
id: "cjcf1cj0r017z014605713ym0"
}
data: {
author: {
upsert: {
where: {
id: "cjcf1cj0c017y01461c6enbfe"
}
update: {
email: "zeus2@example.com"
name: "Zeus2"
}
create: {
email: "zeus@example.com"
name: "Zeus"
}
}
}
}
) {
id
}
}
Deleting related nodes
When updating nodes, you can delete one or more related nodes at the same time. In this case, delete provides a way node selection:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
mutation {
updateUser(
data: {
posts: {
delete: [{
id: "cjcf1cj0u01800146jii8h8ch"
}, {
id: "cjcf1cj0u01810146m84cnt34"
}]
}
}
where: {
id: "cjcf1cj0c017y01461c6enbfe"
}
) {
id
}
}
#Scalar list mutations
When an object type has a field with a scalar list as its type, there are a number of special mutations available.
In the following data model, the User type has three such fields:
1
2
3
4
5
6
type User {
id: ID! @unique
scores: [Int!]!
# scalar list for integers
friends: [String!]!
# scalar list for strings
coinFlips: [Boolean!]!
# scalar list for booleans
}
#Creating nodes
When creating a new node of type User, a list of values can be provided for each scalar list field using set.Example
1
2
3
4
5
6
7
8
9
mutation {
createUser(data: {
scores: { set: [1, 2, 3] }
friends: { set: ["Sarah", "Jane"] }
coinFlips: { set: [false, false] }
}) {
id
}
}#Updating nodes
When updating an existing node of type User, a number of additional operations can be performed on the scalar list fields:
set: Override the existing list with an entirely new list.
push (coming soon): Add one or more elements anywhere in the list.
pop (coming soon): Remove one or more elements from the beginning or the end of the list.
remove (coming soon): Remove all elements from the list that match a given filter.
Note: push, pop and remove are not yet implemented. If you're curios what these are going to look like, you can get a preview in the respective specification.
set
Each scalar list field takes an object with a set field in an update-mutation. The value of that field is a single value or a list of the corresponding scalar type.Examples
Set the scores of an existing User node to [1]:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
mutation {
updateUser(
where: {
id: "cjd4lfdyww0h00144zst9alur"
}
data: {
scores: {
set: 1
}
}
) {
id
}
}
Set the scores of an existing User node to [10,20,30]:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
mutation {
updateUser(
where: {
id: "cjd4lfdyww0h00144zst9alur"
}
data: {
scores: {
set: [10,20,30]
}
}
) {
id
}
}
#Batch Mutations
Batch mutations are useful to update or delete many nodes at once. The returned data only contains the count of affected nodes.
For updating many nodes, you can select the affected nodes using the where argument, while you specify the new values with data. All nodes will be updated to the same value.
Note that no subscription events are triggered for batch mutations!
Here, we are publishing all unpublished Post nodes that were created in 2017:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
mutation {
updateManyPosts(
where: {
createdAt_gte: "2017"
createdAt_lt: "2018"
published: false
}
data: {
published: true
}
) {
count
}
}
Here, we are deleting all unpublished Post nodes of a certain author:
1
2
3
4
5
6
7
8
9
10
11
12
mutation {
deleteManyPosts(
where: {
published: false
author: {
name: "Zeus"
}
}
) {
count
}
}
Was this page helpful?SendPreviousQueriesNextSubscriptionsID Documents Center | National Center for Transgender Equality
Skip to main content
Top Nav
About UsHistory
Staff & Board
Jobs & Internships
Annual Reports
Contact Us
Join Our Mailing List
Press RoomTips for Journalists
Releases
|
Share Your Story
Donate
Search form
Search
Primary Nav
About Transgender PeopleVideo: An Introduction to Transgender People
Understanding Transgender People: The Basics
Understanding Non-Binary People
FAQs about Transgender People
Supporting Trans People
Transgender People and Bathroom Access
IssuesAgendas
Aging
Anti-Violence
Employment
Families
Health & HIV
Housing & Homelessness
Identity Documents & Privacy
Immigration
International
Military & Veterans
Non-Discrimination Laws
Police, Jails & Prisons
Racial and Economic Justice
Research & Data Needs
Travel
Trump Administration
U.S. Trans Survey
Voting Rights
Youth & Students
Know Your RightsAirport Security
Employment (Federal)
Employment (General)
Healthcare
Housing and Homeless Shelters
Immigration Documents
Medicare
Military Records
Passports
Public Accommodations
Schools
Social Security
Survivors of Violence
Self-Help GuidesHealth Coverage Guide
ID Documents Center
Transgender Legal Services Network
Take ActionAction Centers
Families for Trans Equality
Voices for Trans Equality
Blog
ID Documents Center
Welcome to our one-stop hub for name and gender change information. Find out how to get a legal name change where you live and update your name/gender on state and federal IDs and records.
How friendly is the driver’s license gender change policy in your state? Check the grade we gave your state.
​Last updated April 2019
Name Change, Driver's License & Birth Certificate Policies in:
- Choose State/Territory -
Alabama
Alaska
American Samoa
Arizona
Arkansas
California
Colorado
Commonwealth of the Northern Mariana Islands
Connecticut
Delaware
District Of Columbia
Florida
Georgia
Guam
Hawaii
Idaho
Illinois
Indiana
Iowa
Kansas
Kentucky
Louisiana
Maine
Maryland
Massachusetts
Michigan
Minnesota
Mississippi
Missouri
Montana
Nebraska
Nevada
New Hampshire
New Jersey
New Mexico
New York
North Carolina
North Dakota
Ohio
Oklahoma
Oregon
Pennsylvania
Puerto Rico
Rhode Island
South Carolina
South Dakota
Tennessee
Texas
US Virgin Islands
Utah
Vermont
Virginia
Washington
West Virginia
Wisconsin
Wyoming
Go
Federal IDs and Records:
- Choose -U.S. PassportSocial Security RecordSelective ServiceU.S. Immigration DocumentsMilitary / Veteran RecordsConsular Birth Certificates
Join Our Mailing ListSpam Control Text:   Please leave this field empty
Footer Menu
About Transgender People
IssuesAging
Anti-Violence
Employment
Families
Health & HIV
Housing & Homelessness
Identity Documents & Privacy
Immigration
International
Military & Veterans
National Transgender Discrimination Survey
Non-Discrimination Laws
Police, Jails & Prisons
Racial & Economic Justice
Research & Data Needs
Travel
Voting Rights
Youth & Students
Footer Right
Know Your Rights
ID Document Center
About UsHistory
Our Staff
Jobs, Fellowships & Internships
Annual Reports
Contact Us
Blog
Press RoomTips for Journalists
Releases
In the News
Join Our Mailing List
Donate |
(202) 642-4542
ncte@transequality.org
1133 19th St NWSuite 302Washington D.C. 20036
© 2019 National Center for Transgender Equality
Terms of Use
Privacy and Return PolicyPlease click here if you are not redirected within a few seconds.isbn:3642284965 - Google SearchSearchImagesPlayYouTubeNewsGmailDriveCalendarMoreTranslateBooksBloggerPhotosDocsEven more »Account OptionsSign inSearch settingsWeb History AllImagesVideosNewsBooksSearch OptionsThe webCountry: PakistanAny viewPreview and full viewFull viewAny documentBooksMagazinesNewspapersSorted by relevanceSorted by dateYour search - isbn:3642284965 - did not match any documents. Suggestions:Make sure that all words are spelled correctly.Try different keywords.Try more general keywords.Google Home Advertising Programmes Business Solutions Privacy Terms About GooglePlease click here if you are not redirected within a few seconds.isbn:3030014614 - Google SearchSearchImagesPlayYouTubeNewsGmailDriveCalendarMoreTranslateBooksBloggerPhotosDocsEven more »Account OptionsSign inSearch settingsWeb History AllImagesVideosNewsBooksSearch OptionsThe webCountry: PakistanAny viewPreview and full viewFull viewAny documentBooksMagazinesNewspapersSorted by relevanceSorted by dateYour search - isbn:3030014614 - did not match any documents. Suggestions:Make sure that all words are spelled correctly.Try different keywords.Try more general keywords.Google Home Advertising Programmes Business Solutions Privacy Terms About GoogleUpdate Data in a MySQL Database
Toggle navigation
☰
Home
HTML
CSS
Scripting
Database
Update Data in a MySQL Database
MySQL Queries
Delete Data
This page explains how to update existing data in a MySQL database.
So we've already added data to our database. But now we realize that our data contains a mistake. Apples have been assigned a UnitId of 1 — but this should be 2.
You can see this here:
No problem. We'll just update that record.
The UPDATE Statement
The SQL UPDATE statement allows us to update the data in our database. We can use this statement to change the unit ID from 1 to 2. To do this, we use the WHERE clause to specify the exact record we need to update. Like this:
UPDATE Fruit
SET UnitId = 2
WHERE FruitId = 1;
Generally, it's advisable when doing an UPDATE operation, to specify the ID field of the record you're attempting to update (or whatever its primary key is). This helps guard against accidentally updating the wrong record/s. In this example we knew that apples had an FruitId of 1. But you might not always know the ID of the record you're trying to update. In that case you could do something like this:
UPDATE Fruit
SET UnitId = 2
WHERE FruitName = 'Apple' AND UnitId = 1;
We can follow either of those up with a SELECT statement and here's the result:
Note that the DateUpdated column has been updated too, even though we didn't specify an update for that column. This is because, when we created the table, we set that column to be updated with the current date/time every time there was an update to the record.
Here's the code we used when we created that column:
DateUpdated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
More specifically, it is the ON UPDATE CURRENT_TIMESTAMP that resulted in the column being updated just now when we ran the UPDATE statement.
Safe Updates
We could just as easily have constructed our UPDATE command like this (without
AND UnitId = 1):
UPDATE Fruit
SET UnitId = 2
WHERE FruitName = 'Apple';
However, you might encounter the following error if you try to do that:
Safe Updates Mode
If you encounter the above error, it's because your MySQL connection is running in Safe Updates mode. This helps prevent us from overwriting large amounts of data accidentally. In fact, if we had forgotten to include the WHERE clause we would have updated every single record in the table!
Yes, running the following code will result in every record in our table being updated to Banana:
UPDATE Fruit
SET FruitName = 'Banana'
So there is a real benefit to be had by running in Safe Updates mode.
However, if you really do need to execute that query (or if all your fruit really has turned into bananas), you can do one of the following:
Modify your query to include a KEY column. We did this in the examples at the top of this page.
Disable Safe Updates mode.
Disable Safe Updates Mode
If you find that you need to perform an UPDATE operation without using a KEY field, you can always disable Safe Updates mode.
To disable Safe Updates mode, run the following command prior to running your UPDATE statement:
set sql_safe_updates = 0;
It's always a good idea to restore the setting to its previous state once you're done — especially with settings that could have a widespread impact like this one.
To enable Safe Updates mode, run the following:
set sql_safe_updates = 1;
In fact, you could run everything at the same time, like this:
set sql_safe_updates = 0;
UPDATE Fruit
SET UnitId = 2
WHERE FruitName = 'Apple';
select * from Fruit;
set sql_safe_updates = 1;
Update Multiple Fields
You can update multiple fields by using a comma to separate each field assignment. Like this:
UPDATE Fruit
SET FruitName = 'Red Grapes', Inventory = '11'
WHERE FruitId = 5;
Result:
MySQL Queries
Delete Data
MySQL Tutorial
MySQL Installation
MySQL Workbench
MySQL Create Database
MySQL Create Table
MySQL Insert Data
MySQL Queries
MySQL Update Data
MySQL Delete Data
MySQL Default Database
MySQL Primary Keys
MySQL Foreign Keys
MySQL Views
MySQL Stored Procedures
MySQL Export Data
MySQL Import Data
MySQL Create Website
MySQL Sample Database
MySQL Statements
MySQL DELETE Statement
MySQL INSERT Statement
MySQL SELECT Statement
MySQL UPDATE Statement
Joins & Subqueries
MySQL INNER JOIN
MySQL LEFT JOIN
MySQL RIGHT JOIN
MySQL Self Join
MySQL Subquery
Clauses & Keywords
MySQL DISTINCT
MySQL GROUP BY Clause
MySQL HAVING Clause
MySQL ORDER BY Clause
MySQL WHERE Clause
MySQL Functions
MySQL CHAR_LENGTH()
MySQL CONCAT()
MySQL COUNT()
MySQL LENGTH()
MySQL SUM()
MySQL Workbench
Create a Database
Create a Table
Server Status
Client Connections
Users & Privileges
Status & System Variables
Other DB Tutorials
Database Tutorial
SQL Tutorial
SQLite Tutorial
SQL Server Tutorial
Access Tutorial
MongoDB Tutorial
Neo4j Tutorial
Quackit on Facebook
Home | About | Contact | Terms of Use | Privacy Policy
© Copyright 2000 - 2019 Quackit.comSQL UPDATE Query
Jobs
Examples
Whiteboard
Net Meeting
Tools
Articles
Facebook
Google+
Twitter
Linkedin
YouTube
Home
Q/A
Library
Videos
Tutors
Coding Ground
Store
Search
SQL Tutorial
SQL - Home
SQL - Overview
SQL - RDBMS Concepts
SQL - Databases
SQL - Syntax
SQL - Data Types
SQL - Operators
SQL - Expressions
SQL - Create Database
SQL - Drop Database
SQL - Select Database
SQL - Create Table
SQL - Drop Table
SQL - Insert Query
SQL - Select Query
SQL - Where Clause
SQL - AND & OR Clauses
SQL - Update Query
SQL - Delete Query
SQL - Like Clause
SQL - Top Clause
SQL - Order By
SQL - Group By
SQL - Distinct Keyword
SQL - Sorting Results
Advanced SQL
SQL - Constraints
SQL - Using Joins
SQL - Unions Clause
SQL - NULL Values
SQL - Alias Syntax
SQL - Indexes
SQL - Alter Command
SQL - Truncate Table
SQL - Using Views
SQL - Having Clause
SQL - Transactions
SQL - Wildcards
SQL - Date Functions
SQL - Temporary Tables
SQL - Clone Tables
SQL - Sub Queries
SQL - Using Sequences
SQL - Handling Duplicates
SQL - Injection
SQL Useful Resources
SQL - Database Tuning
SQL - Questions and Answers
SQL - Quick Guide
SQL - Useful Functions
SQL - Useful Resources
SQL - Discussion
Selected Reading
UPSC IAS Exams Notes
Developer's Best Practices
Questions and Answers
Effective Resume Writing
HR Interview Questions
Computer Glossary
Who is Who
SQL - UPDATE Query
Advertisements
Previous Page
Next Page
The SQL UPDATE Query is used to modify the existing records in a table. You can use the WHERE clause with the UPDATE query to update the selected rows, otherwise all the rows would be affected.
Syntax
The basic syntax of the UPDATE query with a WHERE clause is as follows −
UPDATE table_name
SET column1 = value1, column2 = value2...., columnN = valueN
WHERE [condition];
You can combine N number of conditions using the AND or the OR operators.
Example
Consider the CUSTOMERS table having the following records −
+----+----------+-----+-----------+----------+
| ID | NAME
| AGE | ADDRESS
| SALARY
|
+----+----------+-----+-----------+----------+
|
1 | Ramesh
|
32 | Ahmedabad |
2000.00 |
|
2 | Khilan
|
25 | Delhi
|
1500.00 |
|
3 | kaushik
|
23 | Kota
|
2000.00 |
|
4 | Chaitali |
25 | Mumbai
|
6500.00 |
|
5 | Hardik
|
27 | Bhopal
|
8500.00 |
|
6 | Komal
|
22 | MP
|
4500.00 |
|
7 | Muffy
|
24 | Indore
| 10000.00 |
+----+----------+-----+-----------+----------+
The following query will update the ADDRESS for a customer whose ID number is 6 in the table.
SQL> UPDATE CUSTOMERS
SET ADDRESS = 'Pune'
WHERE ID = 6;
Now, the CUSTOMERS table would have the following records −
+----+----------+-----+-----------+----------+
| ID | NAME
| AGE | ADDRESS
| SALARY
|
+----+----------+-----+-----------+----------+
|
1 | Ramesh
|
32 | Ahmedabad |
2000.00 |
|
2 | Khilan
|
25 | Delhi
|
1500.00 |
|
3 | kaushik
|
23 | Kota
|
2000.00 |
|
4 | Chaitali |
25 | Mumbai
|
6500.00 |
|
5 | Hardik
|
27 | Bhopal
|
8500.00 |
|
6 | Komal
|
22 | Pune
|
4500.00 |
|
7 | Muffy
|
24 | Indore
| 10000.00 |
+----+----------+-----+-----------+----------+
If you want to modify all the ADDRESS and the SALARY column values in the CUSTOMERS table, you do not need to use the WHERE clause as the UPDATE query would be enough as shown in the following code block.
SQL> UPDATE CUSTOMERS
SET ADDRESS = 'Pune', SALARY = 1000.00;
Now, CUSTOMERS table would have the following records −
+----+----------+-----+---------+---------+
| ID | NAME
| AGE | ADDRESS | SALARY
|
+----+----------+-----+---------+---------+
|
1 | Ramesh
|
32 | Pune
| 1000.00 |
|
2 | Khilan
|
25 | Pune
| 1000.00 |
|
3 | kaushik
|
23 | Pune
| 1000.00 |
|
4 | Chaitali |
25 | Pune
| 1000.00 |
|
5 | Hardik
|
27 | Pune
| 1000.00 |
|
6 | Komal
|
22 | Pune
| 1000.00 |
|
7 | Muffy
|
24 | Pune
| 1000.00 |
+----+----------+-----+---------+---------+
Previous Page
Print
Next Page
Advertisements
Privacy Policy
Cookies Policy
Contact
© Copyright 2019. All Rights Reserved.
go
We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
Accept
Learn moreChange your address with the RMV | Mass.gov
Skip to main content
Mass.gov
Search terms
Search
State Organizations
Close+
State Organizations
The State Organization Index provides an alphabetical listing of government organizations, including commissions, departments, and bureaus.
Log In to...
Close+
Log In to...
Top-requested sites to log in to services provided by the state
Virtual Gateway
Unemployment Online
Child Support Enforcement
Main navigation
Back
Menu
Search terms
Search
Show the sub topics of Living
Living
Health & Social Services
Families & Children
Housing & Property
Transportation
Legal & Justice
Public Safety
Energy
Environment
Taxes
Unclaimed Property
Vital & Public Records
Voting
See all topics under
Living
Show the sub topics of Working
Working
Business Resources
Professional Licenses & Permits
Unemployment
Finding a Job
Taxes
Workers' Rights & Safety
Industry Regulations
For State Employees
Apprenticeships
See all topics under
Working
Show the sub topics of Learning
Learning
Early Childhood Education & Care
Elementary & Secondary Schools
Higher Education
Continuing Education
For Educators & Administrators
Professional Training & Career Development
See all topics under
Learning
Show the sub topics of Visiting & Exploring
Visiting & Exploring
Parks & Recreation
Hunting & Fishing
Historic Sites
Arts
Family Fun
Travel Options
Seasonal Activities
See all topics under
Visiting & Exploring
Show the sub topics of Your Government
Your Government
Executive
Constitutionals & Independents
Legislative
Judicial
State Offices & Courts A-Z
See all topics under
Your Government
State Organizations
Close+
State Organizations
The State Organization Index provides an alphabetical listing of government organizations, including commissions, departments, and bureaus.
Log In to...
Close+
Log In to...
Top-requested sites to log in to services provided by the state
Virtual Gateway
Unemployment Online
Child Support Enforcement
offered by
Massachusetts Registry of Motor Vehicles
show
more
related to
Passenger (Class D) Driver's Licenses
show
more
Change your address with the RMV
If you change your address, you need to inform the Registry of Motor Vehicles (RMV) about the change within 30 days.
You must inform the RMV of any address change within 30 days.
Change your address online
Contact
for Change your address with the RMV
Registry of Motor Vehicles
Online
Ask the RMV
The Details
of Change your address with the RMV
the Contents of the Change your address with the RMV page
+
Table of Contents
What you need
How to update
More info
Contact
What you need
for Change your address with the RMV
The RMV keeps a record of both your residential address (the number and street where you live) and your mailing address (the address where you receive mail). You are required by law to notify the RMV within 30 days of changing your address.
How to update
Change your address with the RMV
Online
The easiest and quickest way to change your address is online. You will need to provide your:
Driver’s license or Massachusetts ID card number
Last 4 digits of your Social Security Number (SSN)
Email address
By phone
You may call the RMV's contact center to change your address.
(857) 368-8000 From area codes 339, 617, 781, and 857, or from outside Massachusetts
(800) 858-3926From all other Massachusetts area codes
TTY: (877) 768-8833For people who are deaf or hard-of-hearing (in Massachusetts)
You will need to provide your:
Name
Current address
Driver’s license or Massachusetts ID card number
Last 4 digits of your Social Security number
More info
for Change your address with the RMV
If you want a replacement driver’s license, ID card, or registration that shows your new address, you may request a duplicate. The easiest way to get a duplicate is online. The RMV's Schedule of Fees shows the cost of each duplicate document.
If you don’t order a replacement driver's license, ID card, or vehicle registration, you should update your existing documents to show your new address.
Add your new address to the back of your driver's license or ID card in the designated area with permanent ink.
On your vehicle registration, use an address label or similar sticker to cover your old address and write in your new address.
Registered vehicles
If you have vehicles registered, you should:
Notify your insurance agent or company of your address change.
Contact your previous town assessor to find out if you are eligible for an abatement on your excise tax bill.
Voter registration
When you change your residential address, that information is sent to the Secretary of State and your city or town so your voter registration address can be updated. If you do not want to update your voter registration, you must specify that when you make your address change request.
Contact
for Change your address with the RMV
Registry of Motor Vehicles
+
Online
Ask the RMV
Related
Replace your driver's license
Replace your vehicle registration
Address Confidentiality Program (ACP)
Contact
for Change your address with the RMV
Registry of Motor Vehicles
Online
Ask the RMV
Related
to Change your address with the RMV
Replace your driver's license
Replace your vehicle registration
Address Confidentiality Program (ACP)
Feedback
Did you find what you were looking for on this webpage? *
Yes
No
Do you have anything else to tell us?
Please tell us what you were looking for. *
We will use this information to improve the site.
Text Area
Text Area
Do not include sensitive information, such as Social Security or bank account numbers.
Your feedback will not receive a response.
Why?
This form only gathers feedback about the website.
Thanks, your message has been sent to the RMV!
If you need to contact the RMV, please click here
Would you like to provide additional feedback to help improve Mass.gov?
Feedback
Tell us more about your experience
How much do you agree with the following statements?
This page is helpful.
1
2
3
4
5
This page is easy to use.
1
2
3
4
5
I am confident that I will find the information that I need.
1
2
3
4
5
What did you come here to do today?
Text Area
Are you using Mass.gov for professional or personal reasons?
Personal
Professional
What other feedback do you have about Mass.gov? (Optional)
Text Area
If we have additional questions about your feedback, can we contact you? If so, enter your email address below. (Optional)
Email
Thanks, your survey has been submitted to the Mass.gov team!
If you would like to continue helping us improve Mass.gov, join our user panel to test new features for the site.
Join user panel
Follow Mass.gov on Facebook
Follow Mass.gov on Twitter
Follow Mass.gov on LinkedIn
Follow Mass.gov on Youtube
Follow Mass.gov on Instagram
© 2019 Commonwealth of Massachusetts.
Mass.gov® is a registered service mark of the Commonwealth of Massachusetts.
Mass.gov Privacy Policy
Footer Primary Links
Living
Working
Learning
Visiting & Exploring
Your Government
Footer Secondary Links
Site Policies
Public Records Requests
FeedbackModel instance reference | Django documentation | Django
Django
The web framework for perfectionists with deadlines.
Overview
Download
Documentation
News
Community
Code
About
♥ Donate
Documentation
el
es
fr
id
ja
ko
pl
pt-br
zh-hans
Language: en
1.7
1.8
1.9
1.10
1.11
2.0
2.1
dev
Documentation version:
2.2
Model instance reference¶
This document describes the details of the Model API. It builds on the
material presented in the model and database
query guides, so you’ll probably want to read and
understand those documents before reading this one.
Throughout this reference we’ll use the example Weblog models presented in the database query guide.
Creating objects¶
To create a new instance of a model, just instantiate it like any other Python
class:
class Model(**kwargs)[source]¶
The keyword arguments are simply the names of the fields you’ve defined on your
model. Note that instantiating a model in no way touches your database; for
that, you need to save().
Note
You may be tempted to customize the model by overriding the __init__
method. If you do so, however, take care not to change the calling
signature as any change may prevent the model instance from being saved.
Rather than overriding __init__, try using one of these approaches:
Add a classmethod on the model class:
from django.db import models
class Book(models.Model):
title = models.CharField(max_length=100)
@classmethod
def create(cls, title):
book = cls(title=title)
# do something with the book
return book
book = Book.create("Pride and Prejudice")
Add a method on a custom manager (usually preferred):
class BookManager(models.Manager):
def create_book(self, title):
book = self.create(title=title)
# do something with the book
return book
class Book(models.Model):
title = models.CharField(max_length=100)
objects = BookManager()
book = Book.objects.create_book("Pride and Prejudice")
Customizing model loading¶
classmethod Model.from_db(db, field_names, values)[source]¶
The from_db() method can be used to customize model instance creation
when loading from the database.
The db argument contains the database alias for the database the model
is loaded from, field_names contains the names of all loaded fields, and
values contains the loaded values for each field in field_names. The
field_names are in the same order as the values. If all of the model’s
fields are present, then values are guaranteed to be in the order
__init__() expects them. That is, the instance can be created by
cls(*values). If any fields are deferred, they won’t appear in
field_names. In that case, assign a value of django.db.models.DEFERRED
to each of the missing fields.
In addition to creating the new model, the from_db() method must set the
adding and db flags in the new instance’s _state attribute.
Below is an example showing how to record the initial values of fields that
are loaded from the database:
from django.db.models import DEFERRED
@classmethod
def from_db(cls, db, field_names, values):
# Default implementation of from_db() (subject to change and could
# be replaced with super()).
if len(values) != len(cls._meta.concrete_fields):
values = list(values)
values.reverse()
values = [
values.pop() if f.attname in field_names else DEFERRED
for f in cls._meta.concrete_fields
]
instance = cls(*values)
instance._state.adding = False
instance._state.db = db
# customization to store the original field values on the instance
instance._loaded_values = dict(zip(field_names, values))
return instance
def save(self, *args, **kwargs):
# Check how the current values differ from ._loaded_values. For example,
# prevent changing the creator_id of the model. (This example doesn't
# support cases where 'creator_id' is deferred).
if not self._state.adding and (
self.creator_id != self._loaded_values['creator_id']):
raise ValueError("Updating the value of creator isn't allowed")
super().save(*args, **kwargs)
The example above shows a full from_db() implementation to clarify how that
is done. In this case it would of course be possible to just use super() call
in the from_db() method.
Refreshing objects from database¶
If you delete a field from a model instance, accessing it again reloads the
value from the database:
>>> obj = MyModel.objects.first()
>>> del obj.field
>>> obj.field
# Loads the field from the database
Model.refresh_from_db(using=None, fields=None)[source]¶
If you need to reload a model’s values from the database, you can use the
refresh_from_db() method. When this method is called without arguments the
following is done:
All non-deferred fields of the model are updated to the values currently
present in the database.
Any cached relations are cleared from the reloaded instance.
Only fields of the model are reloaded from the database. Other
database-dependent values such as annotations aren’t reloaded. Any
@cached_property attributes
aren’t cleared either.
The reloading happens from the database the instance was loaded from, or from
the default database if the instance wasn’t loaded from the database. The
using argument can be used to force the database used for reloading.
It is possible to force the set of fields to be loaded by using the fields
argument.
For example, to test that an update() call resulted in the expected
update, you could write a test similar to this:
def test_update_result(self):
obj = MyModel.objects.create(val=1)
MyModel.objects.filter(pk=obj.pk).update(val=F('val') + 1)
# At this point obj.val is still 1, but the value in the database
# was updated to 2. The object's updated value needs to be reloaded
# from the database.
obj.refresh_from_db()
self.assertEqual(obj.val, 2)
Note that when deferred fields are accessed, the loading of the deferred
field’s value happens through this method. Thus it is possible to customize
the way deferred loading happens. The example below shows how one can reload
all of the instance’s fields when a deferred field is reloaded:
class ExampleModel(models.Model):
def refresh_from_db(self, using=None, fields=None, **kwargs):
# fields contains the name of the deferred field to be
# loaded.
if fields is not None:
fields = set(fields)
deferred_fields = self.get_deferred_fields()
# If any deferred field is going to be loaded
if fields.intersection(deferred_fields):
# then load all of them
fields = fields.union(deferred_fields)
super().refresh_from_db(using, fields, **kwargs)
Model.get_deferred_fields()[source]¶
A helper method that returns a set containing the attribute names of all those
fields that are currently deferred for this model.
Validating objects¶
There are three steps involved in validating a model:
Validate the model fields - Model.clean_fields()
Validate the model as a whole - Model.clean()
Validate the field uniqueness - Model.validate_unique()
All three steps are performed when you call a model’s
full_clean() method.
When you use a ModelForm, the call to
is_valid() will perform these validation steps for
all the fields that are included on the form. See the ModelForm
documentation for more information. You should only
need to call a model’s full_clean() method if you plan to handle
validation errors yourself, or if you have excluded fields from the
ModelForm that require validation.
Model.full_clean(exclude=None, validate_unique=True)[source]¶
This method calls Model.clean_fields(), Model.clean(), and
Model.validate_unique() (if validate_unique is True), in that
order and raises a ValidationError that has a
message_dict attribute containing errors from all three stages.
The optional exclude argument can be used to provide a list of field names
that can be excluded from validation and cleaning.
ModelForm uses this argument to exclude fields that
aren’t present on your form from being validated since any errors raised could
not be corrected by the user.
Note that full_clean() will not be called automatically when you call
your model’s save() method. You’ll need to call it manually
when you want to run one-step model validation for your own manually created
models. For example:
from django.core.exceptions import ValidationError
try:
article.full_clean()
except ValidationError as e:
# Do something based on the errors contained in e.message_dict.
# Display them to a user, or handle them programmatically.
pass
The first step full_clean() performs is to clean each individual field.
Model.clean_fields(exclude=None)[source]¶
This method will validate all fields on your model. The optional exclude
argument lets you provide a list of field names to exclude from validation. It
will raise a ValidationError if any fields fail
validation.
The second step full_clean() performs is to call Model.clean().
This method should be overridden to perform custom validation on your model.
Model.clean()[source]¶
This method should be used to provide custom model validation, and to modify
attributes on your model if desired. For instance, you could use it to
automatically provide a value for a field, or to do validation that requires
access to more than a single field:
import datetime
from django.core.exceptions import ValidationError
from django.db import models
from django.utils.translation import gettext_lazy as _
class Article(models.Model):
...
def clean(self):
# Don't allow draft entries to have a pub_date.
if self.status == 'draft' and self.pub_date is not None:
raise ValidationError(_('Draft entries may not have a publication date.'))
# Set the pub_date for published items if it hasn't been set already.
if self.status == 'published' and self.pub_date is None:
self.pub_date = datetime.date.today()
Note, however, that like Model.full_clean(), a model’s clean()
method is not invoked when you call your model’s save() method.
In the above example, the ValidationError
exception raised by Model.clean() was instantiated with a string, so it
will be stored in a special error dictionary key,
NON_FIELD_ERRORS. This key is used for errors
that are tied to the entire model instead of to a specific field:
from django.core.exceptions import NON_FIELD_ERRORS, ValidationError
try:
article.full_clean()
except ValidationError as e:
non_field_errors = e.message_dict[NON_FIELD_ERRORS]
To assign exceptions to a specific field, instantiate the
ValidationError with a dictionary, where the
keys are the field names. We could update the previous example to assign the
error to the pub_date field:
class Article(models.Model):
...
def clean(self):
# Don't allow draft entries to have a pub_date.
if self.status == 'draft' and self.pub_date is not None:
raise ValidationError({'pub_date': _('Draft entries may not have a publication date.')})
...
If you detect errors in multiple fields during Model.clean(), you can also
pass a dictionary mapping field names to errors:
raise ValidationError({
'title': ValidationError(_('Missing title.'), code='required'),
'pub_date': ValidationError(_('Invalid date.'), code='invalid'),
})
Finally, full_clean() will check any unique constraints on your model.
How to raise field-specific validation errors if those fields don’t appear in a ModelForm
You can’t raise validation errors in Model.clean() for fields that
don’t appear in a model form (a form may limit its fields using
Meta.fields or Meta.exclude). Doing so will raise a ValueError
because the validation error won’t be able to be associated with the
excluded field.
To work around this dilemma, instead override Model.clean_fields() as it receives the list of fields
that are excluded from validation. For example:
class Article(models.Model):
...
def clean_fields(self, exclude=None):
super().clean_fields(exclude=exclude)
if self.status == 'draft' and self.pub_date is not None:
if exclude and 'status' in exclude:
raise ValidationError(
_('Draft entries may not have a publication date.')
)
else:
raise ValidationError({
'status': _(
'Set status to draft if there is not a '
'publication date.'
),
})
Model.validate_unique(exclude=None)[source]¶
This method is similar to clean_fields(), but validates all
uniqueness constraints on your model instead of individual field values. The
optional exclude argument allows you to provide a list of field names to
exclude from validation. It will raise a
ValidationError if any fields fail validation.
Note that if you provide an exclude argument to validate_unique(), any
unique_together constraint involving one of
the fields you provided will not be checked.
Saving objects¶
To save an object back to the database, call save():
Model.save(force_insert=False, force_update=False, using=DEFAULT_DB_ALIAS, update_fields=None)[source]¶
If you want customized saving behavior, you can override this save()
method. See Overriding predefined model methods for more details.
The model save process also has some subtleties; see the sections below.
Auto-incrementing primary keys¶
If a model has an AutoField — an auto-incrementing
primary key — then that auto-incremented value will be calculated and saved as
an attribute on your object the first time you call save():
>>> b2 = Blog(name='Cheddar Talk', tagline='Thoughts on cheese.')
>>> b2.id
# Returns None, because b2 doesn't have an ID yet.
>>> b2.save()
>>> b2.id
# Returns the ID of your new object.
There’s no way to tell what the value of an ID will be before you call
save(), because that value is calculated by your database, not by Django.
For convenience, each model has an AutoField named
id by default unless you explicitly specify primary_key=True on a field
in your model. See the documentation for AutoField
for more details.
The pk property¶
Model.pk¶
Regardless of whether you define a primary key field yourself, or let Django
supply one for you, each model will have a property called pk. It behaves
like a normal attribute on the model, but is actually an alias for whichever
attribute is the primary key field for the model. You can read and set this
value, just as you would for any other attribute, and it will update the
correct field in the model.
Explicitly specifying auto-primary-key values¶
If a model has an AutoField but you want to define a
new object’s ID explicitly when saving, just define it explicitly before
saving, rather than relying on the auto-assignment of the ID:
>>> b3 = Blog(id=3, name='Cheddar Talk', tagline='Thoughts on cheese.')
>>> b3.id
# Returns 3.
>>> b3.save()
>>> b3.id
# Returns 3.
If you assign auto-primary-key values manually, make sure not to use an
already-existing primary-key value! If you create a new object with an explicit
primary-key value that already exists in the database, Django will assume you’re
changing the existing record rather than creating a new one.
Given the above 'Cheddar Talk' blog example, this example would override the
previous record in the database:
b4 = Blog(id=3, name='Not Cheddar', tagline='Anything but cheese.')
b4.save()
# Overrides the previous blog with ID=3!
See How Django knows to UPDATE vs. INSERT, below, for the reason this
happens.
Explicitly specifying auto-primary-key values is mostly useful for bulk-saving
objects, when you’re confident you won’t have primary-key collision.
If you’re using PostgreSQL, the sequence associated with the primary key might
need to be updated; see Manually-specifying values of auto-incrementing primary keys.
What happens when you save?¶
When you save an object, Django performs the following steps:
Emit a pre-save signal. The pre_save
signal is sent, allowing any functions listening for that signal to do
something.
Preprocess the data. Each field’s
pre_save() method is called to perform any
automated data modification that’s needed. For example, the date/time fields
override pre_save() to implement
auto_now_add and
auto_now.
Prepare the data for the database. Each field’s
get_db_prep_save() method is asked to provide
its current value in a data type that can be written to the database.
Most fields don’t require data preparation. Simple data types, such as
integers and strings, are ‘ready to write’ as a Python object. However, more
complex data types often require some modification.
For example, DateField fields use a Python
datetime object to store data. Databases don’t store datetime
objects, so the field value must be converted into an ISO-compliant date
string for insertion into the database.
Insert the data into the database. The preprocessed, prepared data is
composed into an SQL statement for insertion into the database.
Emit a post-save signal. The post_save
signal is sent, allowing any functions listening for that signal to do
something.
How Django knows to UPDATE vs. INSERT¶
You may have noticed Django database objects use the same save() method
for creating and changing objects. Django abstracts the need to use INSERT
or UPDATE SQL statements. Specifically, when you call save(), Django
follows this algorithm:
If the object’s primary key attribute is set to a value that evaluates to
True (i.e., a value other than None or the empty string), Django
executes an UPDATE.
If the object’s primary key attribute is not set or if the UPDATE
didn’t update anything (e.g. if primary key is set to a value that doesn’t
exist in the database), Django executes an INSERT.
The one gotcha here is that you should be careful not to specify a primary-key
value explicitly when saving new objects, if you cannot guarantee the
primary-key value is unused. For more on this nuance, see Explicitly specifying
auto-primary-key values above and Forcing an INSERT or UPDATE below.
In Django 1.5 and earlier, Django did a SELECT when the primary key
attribute was set. If the SELECT found a row, then Django did an UPDATE,
otherwise it did an INSERT. The old algorithm results in one more query in
the UPDATE case. There are some rare cases where the database doesn’t
report that a row was updated even if the database contains a row for the
object’s primary key value. An example is the PostgreSQL ON UPDATE trigger
which returns NULL. In such cases it is possible to revert to the old
algorithm by setting the select_on_save
option to True.
Forcing an INSERT or UPDATE¶
In some rare circumstances, it’s necessary to be able to force the
save() method to perform an SQL INSERT and not fall back to
doing an UPDATE. Or vice-versa: update, if possible, but not insert a new
row. In these cases you can pass the force_insert=True or
force_update=True parameters to the save() method.
Obviously, passing both parameters is an error: you cannot both insert and
update at the same time!
It should be very rare that you’ll need to use these parameters. Django will
almost always do the right thing and trying to override that will lead to
errors that are difficult to track down. This feature is for advanced use
only.
Using update_fields will force an update similarly to force_update.
Updating attributes based on existing fields¶
Sometimes you’ll need to perform a simple arithmetic task on a field, such
as incrementing or decrementing the current value. The obvious way to
achieve this is to do something like:
>>> product = Product.objects.get(name='Venezuelan Beaver Cheese')
>>> product.number_sold += 1
>>> product.save()
If the old number_sold value retrieved from the database was 10, then
the value of 11 will be written back to the database.
The process can be made robust, avoiding a race condition, as well as slightly faster by expressing
the update relative to the original field value, rather than as an explicit
assignment of a new value. Django provides F expressions for performing this kind of relative update. Using
F expressions, the previous example is expressed
as:
>>> from django.db.models import F
>>> product = Product.objects.get(name='Venezuelan Beaver Cheese')
>>> product.number_sold = F('number_sold') + 1
>>> product.save()
For more details, see the documentation on F expressions and their use in update queries.
Specifying which fields to save¶
If save() is passed a list of field names in keyword argument
update_fields, only the fields named in that list will be updated.
This may be desirable if you want to update just one or a few fields on
an object. There will be a slight performance benefit from preventing
all of the model fields from being updated in the database. For example:
product.name = 'Name changed again'
product.save(update_fields=['name'])
The update_fields argument can be any iterable containing strings. An
empty update_fields iterable will skip the save. A value of None will
perform an update on all fields.
Specifying update_fields will force an update.
When saving a model fetched through deferred model loading
(only() or
defer()) only the fields loaded
from the DB will get updated. In effect there is an automatic
update_fields in this case. If you assign or change any deferred field
value, the field will be added to the updated fields.
Deleting objects¶
Model.delete(using=DEFAULT_DB_ALIAS, keep_parents=False)[source]¶
Issues an SQL DELETE for the object. This only deletes the object in the
database; the Python instance will still exist and will still have data in
its fields. This method returns the number of objects deleted and a dictionary
with the number of deletions per object type.
For more details, including how to delete objects in bulk, see
Deleting objects.
If you want customized deletion behavior, you can override the delete()
method. See Overriding predefined model methods for more details.
Sometimes with multi-table inheritance you may
want to delete only a child model’s data. Specifying keep_parents=True will
keep the parent model’s data.
Pickling objects¶
When you pickle a model, its current state is pickled. When you unpickle
it, it’ll contain the model instance at the moment it was pickled, rather than
the data that’s currently in the database.
You can’t share pickles between versions
Pickles of models are only valid for the version of Django that
was used to generate them. If you generate a pickle using Django
version N, there is no guarantee that pickle will be readable with
Django version N+1. Pickles should not be used as part of a long-term
archival strategy.
Since pickle compatibility errors can be difficult to diagnose, such as
silently corrupted objects, a RuntimeWarning is raised when you try to
unpickle a model in a Django version that is different than the one in
which it was pickled.
Other model instance methods¶
A few object methods have special purposes.
__str__()¶
Model.__str__()[source]¶
The __str__() method is called whenever you call str() on an object.
Django uses str(obj) in a number of places. Most notably, to display an
object in the Django admin site and as the value inserted into a template when
it displays an object. Thus, you should always return a nice, human-readable
representation of the model from the __str__() method.
For example:
from django.db import models
class Person(models.Model):
first_name = models.CharField(max_length=50)
last_name = models.CharField(max_length=50)
def __str__(self):
return '%s %s' % (self.first_name, self.last_name)
__eq__()¶
Model.__eq__()[source]¶
The equality method is defined such that instances with the same primary
key value and the same concrete class are considered equal, except that
instances with a primary key value of None aren’t equal to anything except
themselves. For proxy models, concrete class is defined as the model’s first
non-proxy parent; for all other models it’s simply the model’s class.
For example:
from django.db import models
class MyModel(models.Model):
id = models.AutoField(primary_key=True)
class MyProxyModel(MyModel):
class Meta:
proxy = True
class MultitableInherited(MyModel):
pass
# Primary keys compared
MyModel(id=1) == MyModel(id=1)
MyModel(id=1) != MyModel(id=2)
# Primary keys are None
MyModel(id=None) != MyModel(id=None)
# Same instance
instance = MyModel(id=None)
instance == instance
# Proxy model
MyModel(id=1) == MyProxyModel(id=1)
# Multi-table inheritance
MyModel(id=1) != MultitableInherited(id=1)
__hash__()¶
Model.__hash__()[source]¶
The __hash__() method is based on the instance’s primary key value. It
is effectively hash(obj.pk). If the instance doesn’t have a primary key
value then a TypeError will be raised (otherwise the __hash__()
method would return different values before and after the instance is
saved, but changing the __hash__() value of an instance is
forbidden in Python.
get_absolute_url()¶
Model.get_absolute_url()¶
Define a get_absolute_url() method to tell Django how to calculate the
canonical URL for an object. To callers, this method should appear to return a
string that can be used to refer to the object over HTTP.
For example:
def get_absolute_url(self):
return "/people/%i/" % self.id
While this code is correct and simple, it may not be the most portable way to
to write this kind of method. The reverse() function is
usually the best approach.
For example:
def get_absolute_url(self):
from django.urls import reverse
return reverse('people.views.details', args=[str(self.id)])
One place Django uses get_absolute_url() is in the admin app. If an object
defines this method, the object-editing page will have a “View on site” link
that will jump you directly to the object’s public view, as given by
get_absolute_url().
Similarly, a couple of other bits of Django, such as the syndication feed
framework, use get_absolute_url() when it is
defined. If it makes sense for your model’s instances to each have a unique
URL, you should define get_absolute_url().
Warning
You should avoid building the URL from unvalidated user input, in order to
reduce possibilities of link or redirect poisoning:
def get_absolute_url(self):
return '/%s/' % self.name
If self.name is '/example.com' this returns '//example.com/'
which, in turn, is a valid schema relative URL but not the expected
'/%2Fexample.com/'.
It’s good practice to use get_absolute_url() in templates, instead of
hard-coding your objects’ URLs. For example, this template code is bad:
<!-- BAD template code. Avoid! -->
<a href="/people/{{ object.id }}/">{{ object.name }}</a>
This template code is much better:
<a href="{{ object.get_absolute_url }}">{{ object.name }}</a>
The logic here is that if you change the URL structure of your objects, even
for something simple such as correcting a spelling error, you don’t want to
have to track down every place that the URL might be created. Specify it once,
in get_absolute_url() and have all your other code call that one place.
Note
The string you return from get_absolute_url() must contain only
ASCII characters (required by the URI specification, RFC 2396) and be
URL-encoded, if necessary.
Code and templates calling get_absolute_url() should be able to use the
result directly without any further processing. You may wish to use the
django.utils.encoding.iri_to_uri() function to help with this if you
are using strings containing characters outside the ASCII range.
Extra instance methods¶
In addition to save(), delete(), a model object
might have some of the following methods:
Model.get_FOO_display()¶
For every field that has choices set, the
object will have a get_FOO_display() method, where FOO is the name of
the field. This method returns the “human-readable” value of the field.
For example:
from django.db import models
class Person(models.Model):
SHIRT_SIZES = (
('S', 'Small'),
('M', 'Medium'),
('L', 'Large'),
)
name = models.CharField(max_length=60)
shirt_size = models.CharField(max_length=2, choices=SHIRT_SIZES)
>>> p = Person(name="Fred Flintstone", shirt_size="L")
>>> p.save()
>>> p.shirt_size
'L'
>>> p.get_shirt_size_display()
'Large'
Model.get_next_by_FOO(**kwargs)¶
Model.get_previous_by_FOO(**kwargs)¶
For every DateField and
DateTimeField that does not have null=True, the object will have get_next_by_FOO() and
get_previous_by_FOO() methods, where FOO is the name of the field. This
returns the next and previous object with respect to the date field, raising
a DoesNotExist exception when appropriate.
Both of these methods will perform their queries using the default
manager for the model. If you need to emulate filtering used by a
custom manager, or want to perform one-off custom filtering, both
methods also accept optional keyword arguments, which should be in the
format described in Field lookups.
Note that in the case of identical date values, these methods will use the
primary key as a tie-breaker. This guarantees that no records are skipped or
duplicated. That also means you cannot use those methods on unsaved objects.
Other attributes¶
DoesNotExist¶
exception Model.DoesNotExist¶
This exception is raised by the ORM in a couple places, for example by
QuerySet.get() when an object
is not found for the given query parameters.
Django provides a DoesNotExist exception as an attribute of each model
class to identify the class of object that could not be found and to allow
you to catch a particular model class with try/except. The exception is
a subclass of django.core.exceptions.ObjectDoesNotExist.
Model Meta options
QuerySet API reference
Back to Top
Additional Information
Search:
Search
Support Django!
Tribeca Digital donated to the Django Software Foundation to
support Django development. Donate today!
Contents
Model instance reference
Creating objects
Customizing model loading
Refreshing objects from database
Validating objects
Saving objects
Auto-incrementing primary keys
The pk property
Explicitly specifying auto-primary-key values
What happens when you save?
How Django knows to UPDATE vs. INSERT
Forcing an INSERT or UPDATE
Updating attributes based on existing fields
Specifying which fields to save
Deleting objects
Pickling objects
Other model instance methods
__str__()
__eq__()
__hash__()
get_absolute_url()
Extra instance methods
Other attributes
DoesNotExist
Browse
Prev: Model Meta options
Next: QuerySet API reference
Table of contents
General Index
Python Module Index
You are here:
Django 2.2 documentation
API Reference
Models
Model instance reference
Getting help
FAQ
Try the FAQ — it's got answers to many common questions.
Index, Module Index, or Table of Contents
Handy when looking for specific information.
django-users mailing list
Search for information in the archives of the django-users mailing list, or post a question.
#django IRC channel
Ask a question in the #django IRC channel, or search the IRC logs to see if it’s been asked before.
Ticket tracker
Report bugs with Django or Django documentation in our ticket tracker.
Download:
Offline (Django 2.2):
HTML |
PDF |
ePub
Provided by Read the Docs.
Django Links
Learn More
About Django
Getting Started with Django
Team Organization
Django Software Foundation
Code of Conduct
Diversity Statement
Get Involved
Join a Group
Contribute to Django
Submit a Bug
Report a Security Issue
Follow Us
GitHub
Twitter
News RSS
Django Users Mailing List
Django
Hosting by Rackspace
Design by Threespot &
© 2005-2019
Django Software
Foundation and individual contributors. Django is a
registered
trademark of the Django Software Foundation.Real ID Information - Motor Vehicle Section
Missouri Department of Revenue
Quick Navigation
Skip to Main Content
MO.gov
Governor Parson
Find an Agency
Online Services
Search
Search
Search
Mobile Menu Button
Toolbar Links
Like us on Facebook
Follow us on Twitter
Watch Videos on Youtube
Email us
RSS News Feed
Find a Form
Find a Form
Search
Forms & Manuals
Online Services
Individual Tax
Business Tax
Motor Vehicle
Driver License
Missouri Real ID Information
The following resources are available for your convenience:
Brochures:Interactive Guide:
(Click on images for additional information.)
What is REAL ID?
“REAL ID” comes from the REAL ID Act of
2005, a federal law that focused on fraud protection, anti-terrorism, and
driver license and nondriver license identification card (ID card) security. The
REAL ID Act established minimum security standards for state-issued driver
licenses and ID cards and prohibits federal agencies from accepting for
official purposes driver licenses and ID cards from states that do not meet
these standards. The Missouri
Department of Revenue has been working to meet the
requirements of the REAL ID Act and remains on track to achieve full
implementation in 2019.
Beginning October 1, 2020, residents of every U.S. state and
territory will be required to present a REAL ID-compliant driver license or ID
card, or another form of ID accepted by the Transportation
Security Administration, to board federally
regulated domestic flights. Also beginning October 1, 2020, individuals must
present a REAL ID-compliant driver license or ID card, or another form of
acceptable ID, to access federal facilities, including military bases and
federal courthouses, and to enter nuclear power plants.
Do I need a REAL ID-compliant driver license or
nondriver ID card?
It depends. Effective October 1, 2020,
you will be required to present a REAL ID-compliant
driver license or nondriver ID card, or another form of identification accepted
by the Transportation
Security Administration, for boarding
domestic flights. Also beginning October 1, 2020, you will be required to
present a REAL ID-compliant license or ID card, or another form of acceptable
ID, to access federal facilities, including military bases and federal
courthouses, and to enter nuclear power plants.
You
are not required and likely do not need to obtain a REAL ID-compliant license
or ID card if:
You will not need one for any of the above purposes on or
after October 1, 2020; or
You hold another form of
identification that meets federal requirements, such as a valid U.S. passport
or passport card.
Still not sure if you need a REAL ID? Check out this resource for additional guidance.
Does Missouri law require me to hold a REAL
ID-compliant driver license or nondriver ID card?
No.
Under Missouri law, applying for a REAL ID-compliant driver license or
nondriver ID card is your choice. Issuance of a REAL ID-compliant license or ID
card is not mandatory.
When will I be required to present a REAL
ID-compliant driver license, nondriver ID card, or other
form of identification that meets federal requirements, to board domestic flights, access federal facilities and enter
nuclear power plants?
October
1, 2020. Prior to October 1, 2020, you can continue to use your current
Missouri-issued driver license or nondriver ID card, regardless of whether it is REAL ID-compliant.
Are Missouri’s REAL ID-compliant driver licenses and nondriver ID cards currently
available?
Customers were able to apply for a REAL ID-compliant Missouri driver license or nondriver ID card beginning
March 25, 2019. Please note: the
current Missouri-issued license and ID card will afford you the same access as
a REAL ID-compliant license or ID card until October 1, 2020. Therefore, you do
not need to rush to apply for your REAL ID-compliant license or ID card.
IMPORTANT: When applying for a REAL ID-compliant license or ID card,
please allow time for its processing and mailing (typically 10-15 days). If you
need to fly on October 1, 2020, and you wait to renew until September 30, 2020,
you will not receive your REAL ID-compliant license or ID card in time to fly.
Consider renewing no later than September 1, 2020, if you will need to fly on
or soon after October 1, 2020, to allow sufficient time for delivery of your
license or ID card.
Do I need to obtain a REAL ID-compliant driver
license or nondriver ID card for:
Driving
Voting
or registering to vote
State
purposes
Age
verification
No. The REAL ID Act does not invalidate any previously
issued Missouri driver license or nondriver ID card.
It does not affect current
use of your license or ID card for the purpose of driving, voting or registering to vote,
State purposes, or for age verification.
Do I need to obtain a REAL ID-compliant driver
license or nondriver ID card for:
Boarding
domestic flights
Accessing
certain federal facilities, including military bases and federal courthouses
Entering
a nuclear power plant
Yes,
effective October 1, 2020, if you do not hold another form of
identification that meets federal requirements.
What is the cost of
obtaining a REAL ID-compliant driver license or nondriver ID card?
Transaction
and processing fees for new and renewal applications will be the same as they
are currently.
Click here for detailed fee information.
You
may also apply for an early duplicate license or ID card outside of your
regular renewal period (which is six months prior to the expiration of your
license or ID card).
Missouri law allows for a one-time waiver of the duplicate
transaction fee for persons who have not been issued a REAL ID-compliant
license or
ID card. License office processing fees, however,
will not be waived and are $2.50 (three-year issuance) or $5 (six-year issuance).
Personal information may be changed as part of a duplicate one-time waiver
transaction, but if you are applying for a different class of licensure or to
add any endorsements or restrictions, the one-time waiver will not apply.
Based on the date my current Missouri-issued
driver license or nondriver ID card expires and assuming I do not hold another
form of identification that meets federal requirements, when do I need to apply for a REAL ID-compliant
license or ID card for the purposes of domestic air travel, accessing certain
federal facilities and entering nuclear power plants?
If
your current Missouri-issued driver license or nondriver ID card:
Expired prior
to
March 25, 2019
REAL
ID-compliant licenses and ID cards were not available in Missouri until March 25, 2019;
therefore, if you renewed your Missouri-issued license or ID card before then, you will be able to use it for REAL ID purposes until October 1, 2020, even though it is not REAL
ID-compliant. If you will require a REAL ID-compliant license or ID card as of
October 1, 2020, you can apply for one by requesting a
duplicate transaction prior to the October 1, 2020 compliance date.
Expires on
or after March 25, 2019, but before October 1, 2020
The U.S.
Department of Homeland Security has granted Missouri an extension to comply
with the REAL ID Act and its regulations that will allow you to continue
using your current Missouri-issued license or ID card until October 1, 2020,
regardless of whether it is REAL ID-compliant. Therefore, you can apply for a
REAL ID-compliant license or ID card at your next regularly scheduled renewal.
Expires on
or after October 1, 2020; or if you are 70 years of
age or older and hold a nonexpiring nondriver license
Your
next regularly scheduled license or ID card renewal will not occur until after
REAL ID-compliant licenses and ID cards will be required for the above purposes.
If you need to use a REAL ID-compliant license or ID card, this means you will
need to apply for one prior to October 1, 2020.
IMPORTANT: When applying for a REAL ID-compliant license or ID card,
please allow time for its processing and mailing (typically 10-15 days). If you
need to fly on October 1, 2020, and you wait to renew until September 30, 2020,
you will not receive your REAL ID-compliant license or ID card in time to fly.
Consider renewing no later than September 1, 2020, if you will need to fly on
or soon after October 1, 2020, to allow sufficient time for delivery of your
license or ID card.
How can I obtain a REAL ID-compliant driver
license or nondriver ID card?
You can apply for a REAL ID-compliant
driver license or nondriver ID card at one of Missouri’s more than 175 license
office locations. You will be required to submit the following valid, original
documents demonstrating proof of each item at the time you apply:
Identity (one
acceptable document to verify full legal name and date of birth);
Lawful Status in
the United States (one acceptable document to verify United States citizenship
or immigration status);
Social Security
Number (one acceptable document);
Missouri
Residency (two acceptable documents verifying your Missouri residential
address); and
Additional items
may be required if your name is different from the name on your identity and
date of birth verification document.
Utilize the Department's interactive guide to ensure you have the documents required to apply for your REAL ID.
You may also refer to our complete list of acceptable documents
for REAL ID-compliant license and ID card processing.
IMPORTANT: When applying for a REAL ID-compliant license or ID card,
please allow time for its processing and mailing (typically 10-15 days). If you
need to fly on October 1, 2020, and you wait to renew until September 30, 2020,
you will not receive your REAL ID-compliant license or ID card in time to fly.
Consider renewing no later than September 1, 2020, if you will need to fly on
or soon after October 1, 2020, to allow sufficient time for delivery of your
license or ID card.
What will Missouri’s REAL ID-compliant driver
licenses and nondriver ID cards look like?
Missouri’s
REAL ID-compliant driver licenses and nondriver ID cards will have a gold star
in the upper right hand corner. A license or ID card that is not compliant with
REAL ID will have “Not for REAL ID Purposes” in the upper right hand corner. Licenses
and ID cards, whether they are compliant with the REAL ID Act or not, may also
be marked as “Limited Term” based on the type of document presented as
verification of lawful status.
What is not affected by the REAL ID Act?
The REAL ID Act does not invalidate any
previously issued Missouri driver license or nondriver ID card. It does not
affect current uses of your license or ID card for purposes such as driving, voting
or registering to vote, other State purposes, accessing federal facilities that
do not require a person to present identification, age verification and more.
Is my current Missouri-issued driver license
acceptable for driving under the REAL ID Act?
The REAL ID Act does not invalidate any
previously issued Missouri driver license. It does not affect current uses of
your license or ID card for purposes such as driving, voting or registering to
vote, other State purposes, accessing federal facilities that do not require a
person to present identification, age verification and more.
Will a REAL ID-compliant driver license or
nondriver ID card be issued for a different length of time than the current
Missouri driver license or nondriver ID card?
No. The issuance term for the current Missouri
driver license or nondriver ID card, whether it is new or a renewal, will be
the same as for a REAL ID-compliant license or ID card. The issuance term will
continue to be based on your date of birth, type of license or ID card, lawful
status end date, and certain commercial driver license endorsements. Applicants
applying for a duplicate license or ID card will be issued the same expiration
date as that of their prior license or ID card on file, regardless of whether
it was REAL ID-compliant.
Can
I hold a valid REAL ID-compliant driver license and a valid REAL ID-compliant nondriver
ID card at the same time?
No.
You cannot hold more than one valid REAL ID-compliant driver license or nondriver
ID card at the same time. For example, if you apply for a REAL ID-compliant
Missouri license and also hold or want to apply for an ID card, the ID card
will be issued as noncompliant. If you are transferring to Missouri from
another state and hold a REAL ID-compliant license or ID card, you must
surrender any previously issued license or ID card.
IMPORTANT: At the time you apply, Missouri
will initiate inquiries to determine if you hold a valid license or ID card in
any other state(s). Upon issuance of a Missouri license, ID card or permit
notification, notice of your Missouri application will be sent to the prior
state(s) of issuance; this may result in the cancellation of privileges in the
prior state(s) of issuance.
How
does the REAL ID Act affect the issuance of Missouri driver licenses and nondriver
ID cards?
The
REAL ID Act requires state licensing agencies to:
Ensure production facilities and personnel at license
offices and other locations meet physical and procedural security standards for
the production and issuance of driver licenses and nondriver ID cards;
Ensure the submission, verification, and retention of source
documents provided as proof of identity, lawful status, Social Security Number,
and Missouri residency and mailing address; and
Ensure all licenses and ID cards, whether they are compliant
with the REAL ID Act or not, include a compliance status marking.
REAL ID-compliant licenses and ID cards will have a gold
star in the upper right-hand corner.
Licenses and ID cards that are not compliant with the REAL
ID Act will have “Not for REAL ID Purposes” on the face of the document.
Licenses and ID cards, whether they are compliant with the
REAL ID Act or not, may also be marked as “Limited Term” based on the type of
document presented as verification of lawful status.
This page will be updated with
additional informational as necessary. For more information about the REAL ID
Act, visit the U.S. Department of Homeland Security website at dhs.gov/real-id.
Motor Vehicle
Forms & Manuals
Disabled Placards
Frequently Asked Questions
Titling & Registration
About License Plates
Buying a Vehicle
Missing / Duplicate Titles
Personalized & Specialty Plates
Personalize & Reserve Plates
Renewing Plates
Special Fuel Decals
Repossession Title Requirements
Selling / Gifting a Vehicle
Tab Theft
Titling Abandoned Property
Titling Vehicles
ATV's, Boats & Trailers
ATV Titling & Registration
Boat / Vessel & Motor
Trailer Titling & Registration
Driving in Missouri
Insurance Information
Permits
Vehicle Safety Inspections
Dealer Information
Dealer / Lienholder Information
Complaints about Dealers
Manufactured Homes
Manufactured Homes
Services
Contact Information / Office Locations
Frequently Asked Questions
How Do I?
Customer Satisfaction Survey
Report Fraud
Site Map
Email the Department of Revenue
Resources from Revenue
About Revenue
Human Resources
Career Opportunities
Policy Guidance
Publications
Purchasing (Vendors)
Annual Reports
Public Information Reports
Media Center
Statutory Interest Rates
Letter Rulings
Proposed Rules
Other Resources
Missouri Revised Statutes (RSMo)
Federal (IRS) Forms
Code of State Regulations (CSR)
Missouri Constitution
5-year Rule Review
Related Links
Connect With Us
Facebook
Twitter
YouTube
Email
RSS
Governor
Michael L. Parson
Mo.gov State of Missouri
Acting Director
Kenneth J. Zellers
State of Missouri Navigation
Privacy Policy
Accessibility
Contact UsUpdate multiple records by using ON DUPLICATE KEY UPDATE
in MySQL
Toggle navigation
HOME
plus2net HOME
PHP
JavaScript
HTML
ASP
jQuery
C
PhotoShop
SQL
SQL Home
Database Basic
PHP MySQL
Date
Math
Select
Insert
Delete
Left Join
String
Search
Submit
Login
×
Login
Username
Password
Login
Cancel
Not a member? Sign Up
Forgot Password?
Contact Us
ON DUPLICATE KEY UPDATE to update multiple records
We know by using Insert command we can add records, but by using same insert command we can update multiple records of a table.
In our student table we have one unique auto increment field as ID.
Here we can't have two records with same id. So if we try to use any insert query to add a record ( say with id=2 )
with already existing id ( Duplicate Key ) then we will get error message saying
Duplicate entry '2' for key 'id'
Now we can specify in our query that in such
exception cases ( of having duplicate id
) instead of inserting new record the existing record can be updated with new data.
New record will be inserted if no duplicate key is found or if we are not violating unique constraints set by the table property.
Here is an example which will generate an error message as we are violating unique constraints.
INSERT INTO `student3` (`id`, `name`, `class`, `social`, `science`, `math`) VALUES (2, 'Max Ruin', 'Three', 86, 57, 86)
Duplicate entry '2' for key 'id'
Now same INSERT
query
query will update the record with new data instead of adding any new record.
INSERT INTO `student3` (`id`, `name`, `class`, `social`, `science`, `math`) VALUES (2, 'Max Ruin', 'Three', 86, 57, 86) on duplicate key update social=86,science=57,math=86
We will get a message saying 2 rows inserted, but actually we have updated one record only.
Here mysql will retrun the number of affected rows based on the action it performed.
If a new record is added ( inserted ) then number of affected rows = 1
If a record is updated with new data then number of affected rows = 2
If a new record is updated with same data then number of affected rows = 0
Updating Multiple records
By using same query we can update multiple records with new data.
INSERT INTO `student3` (`id`, `name`, `class`, `social`, `science`, `math`) VALUES
(2, 'Max Ruin', 'Three', 86, 57, 86),
(3, 'Arnold', 'Three', 56, 41, 76),
(4, 'Krish Star', 'Four', 62, 52, 72),
(5, 'John Mike', 'Four', 62, 82, 92),
(6, 'Alex John', 'Four', 58, 93, 83),
(7, 'My John Rob', 'Fifth', 79, 64, 74),
(8, 'Asruid', 'Five', 89, 84, 94),
(9, 'Tes Qry', 'Six', 77, 61, 71),
(10, 'Big John', 'Four', 56, 44, 56)
ON DUPLICATE KEY UPDATE social=values(social),science=values(science),math=values(math);
Above query will
update 9 records with new data. The message we will get is 18 rows inserted.
UPDATE with INSERT
Now let us try
updating existing 9 records
and add one new
record with a new id ( Don't forget to reset table data to old values )
INSERT INTO `student3` (`id`, `name`, `class`, `social`, `science`, `math`) VALUES
(2, 'Max Ruin', 'Three', 86, 57, 86),
(3, 'Arnold', 'Three', 56, 41, 76),
(4, 'Krish Star', 'Four', 62, 52, 72),
(5, 'John Mike', 'Four', 62, 82, 92),
(6, 'Alex John', 'Four', 58, 93, 83),
(7, 'My John Rob', 'Fifth', 79, 64, 74),
(8, 'Asruid', 'Five', 89, 84, 94),
(9, 'Tes Qry', 'Six', 77, 61, 71),
(10, 'Big John', 'Four', 56, 44, 56),
(11,'New Name','Five',75,78,52)
ON DUPLICATE KEY UPDATE social=values(social),science=values(science),math=values(math);
Now 9 records will be updated with new data and one new record ( with id =11 ) will be added . The message we will get is 19 rows inserted.
Download sql dump of student3 table
← UPDATE Query
Export Data→
Be the first to post comment:
Visitors
Rating
Number:9
Average:4.11
Your Rating
Tweet
▼ More on Alter or coy table , add update or delete
records in SQL
Adding records to a table by insert command
Adding records with set option
Changing structure of the table by alter query
Create table query with if exists sql with php script
Creating a new table by using data from one table
Change the name of a table
Copying data from one table to another table
Delete records from a table with conditions
Delete table by using DROP sql
Update SQL commands
Inserting SUM, AVG data from one table column to other using group by command
Listing all tables and Database present in MySQL
Table Records are downloaded as .csv file
Post your comments , suggestion , error , requirements etc here .
Detail
SQL Popular Tutorials
Order by displaying records
Records Between two date ranges
Some of the records by LIMIT query
SQL SUM of data in columns
HTML
MySQL
PHP
JavaScript
ASP
Photoshop
Articles
FORUM .
Contact us
©2000-2019 plus2net.com All rights reserved worldwide
Privacy Policy DisclaimerMySQL UPDATE - w3resource
w3resource
menu
Front End
HTML
CSS
JavaScript
HTML5
Schema.org
php.js
Twitter Bootstrap
Responsive Web Design tutorial
Zurb Foundation 3 tutorials
Pure CSS
HTML5 Canvas
JavaScript Course
Icon
Linux
Linux Home
Linux Commands
Linux Server Administration
Back End
PHP
Python
Java
Node.js
Ruby
C programming
SQL & RDBMS
SQL(2003 standard of ANSI)
MySQL
PostgreSQL
SQLite
NoSQL & MongoDB
NoSQL
MongoDB
API
Google Plus API
Youtube API
Google Maps API
Flickr API
Last.fm API
Twitter REST API
Data Interchnage
XML
JSON
Ajax
Exercises
HTML CSS Exercises
JavaScript Exercises
jQuery Exercises
jQuery-UI Exercises
CoffeeScript Exercises
PHP Exercises
Python Exercises
C Programming Exercises
C# Sharp Exercises
Java Exercises
SQL Exercises
Oracle Exercises
MySQL Exercises
SQLite Exercises
PostgreSQL Exercises
MongoDB Exercises
Twitter Bootstrap Examples
Euler Project
Quiz
HTML5 Quiz
PHP Quiz
SQL Quiz
Python Quiz
MySQL Quiz
JavaScript I Quiz
JavaScript II Quiz
JavaScript III Quiz
MongoDB Quiz
Form Template
Forms Template
Slides
Slides Presentation
Google Docs
Forms Template
Slide Presentation
Conversion Tools
Number Conversion
MS Excel
Excel 2013 tutorial
Videos
PHP Videos
JavaScript Videos
Tools
Firebug Tutorial
Useful Tools
share
Facebook
Twitter
Google Plus
Linkedin
RSS
HomeMySQL Home MySQL Installation MySQL Administration Tools MySQL Connectors and APIs MySQL Storage Engines (table types) MySQL Language Structure MySQL Data Types Connecting to and disconnecting from MySQL MySQL CREATE DATABASES, TABLES MySQL CONSTRAINT MySQL CREATE INDEX MySQL ALTER TABLE MySQL Partitioning MySQL InsertMySQL Update MySQL Delete MySQL basic select statement MySQL UNION Aggregate functions and grouping MySQL functions and operators Advance queries in MySQL MySQL JOINS MySQL Subqueries MySQL Procedure MySQL Triggers MySQL Transaction MySQL Views MySQL Security MySQL Show Commands MySQL DROP Exporting and importing data between mysql and microsoft excel MySQL backup and restore Working with PDO MySQL Cluster Overview MySQL Questions Answers MySQL Exercises
MySQL UPDATE Statement
Last update on April 04 2019 06:28:01 (UTC/GMT +8 hours)
UPDATE Table
The MySQL UPDATE statement is used to update columns of existing rows in a table with new values.
Version: 5.6
Syntax :
Single table:
UPDATE [LOW_PRIORITY] [IGNORE] table_reference
SET col_name1={expr1|DEFAULT} [, col_name2={expr2|DEFAULT}] ...
[WHERE where_condition]
[ORDER BY ...]
[LIMIT row_count]
Multiple tables:
UPDATE [LOW_PRIORITY] [IGNORE] table_references
SET col_name1={expr1|DEFAULT} [, col_name2={expr2|DEFAULT}] ...
[WHERE where_condition]
Arguments
Name
Description
table_reference(s)
Name of table(s) to be updated.
col_name1, col_name2, ..
Name of column(s) to be updated.
expr1, expr2,...
New value(s).
For a single table, the UPDATE statement updates columns of existing rows in the named table with new values. Specific columns can be modified using the SET clause by supplying new values for that column.
The WHERE clause can be used to specify the conditions those identify which rows to update. Without using WHERE clause, all rows are updated.
The ORDER BY clause is used to update the order that is already specified.
The LIMIT clause specifies a limit on the number of rows that can be updated.
For multiple tables, UPDATE updates row in each table named in table_references that satisfy the conditions. In this case, ORDER BY and LIMIT cannot be used.
The UPDATE statement supports the following modifiers:
LOW_PRIORITY: Using LOW_PRIORITY keyword, execution of the UPDATE is delayed until no other clients are reading from the table. This affects only storage engines that use only table-level locking (such as MyISAM, MEMORY, and MERGE).
IGNORE : Using IGNORE keyword, the update statement does not abort even if errors occur during the update. Rows for which duplicate-key conflicts occur are not updated. Rows for which columns are updated to values that would cause data conversion errors are updated to the closest valid values instead.
Following are some examples on MySQL update where we have used newpurchase as sample table.
Sample table: newpurchase
MySQL UPDATE column
MySQL UPDATE column can be used to update some specific columns. The following MySQL statement will update the 'receive_qty' column of newpurchase table with a new value 20.
UPDATE newpurchase SET receive_qty=20;
MySQL UPDATE with WHERE
MySQL UPDATE command can be used with WHERE clause to filter (against certain conditions) which rows will be updated. The following MySQL statement will update the 'receive_qty' column of newpurchase table with a new value 25 if the value of purch_price is more than 50.
UPDATE newpurchase
SET receive_qty=25
WHERE purch_price>50;
MySQL UPDATE using NULL
MySQL UPDATE command can be used to update a column value to NULL by setting column_name = NULL, where column_name is the name of the column to be updated. The following MySQL statement will update pub_lang column with NULL if purch_price is more than 50. In this statement, other columns are also updated with respective new values.
UPDATE newpurchase
SET receive_qty=20,pub_lang='Hindi',pub_lang=NULL
WHERE purch_price>50;
MySQL UPDATE multiple columns
MySQL UPDATE command can be used to update multiple columns by specifying a comma separated
list of column_name = new_value. Where column_name is the name of the column to be updated and new_value is the new value with which the column will be updated. The following MySQL statement will update receive_qty, pub_lang, and receive_dt columns with new values 20, Hindi and 2008-07-10 if purch_price is more than 50.
UPDATE newpurchase
SET receive_qty=20,pub_lang='Hindi',receive_dt='2008-07-10'
WHERE purch_price>50;
MySQL UPDATE with subqueries
Here in the following, we have discussed how to use MySQL UPDATE command with subqueries.
The following MySQL statement will update purch_price with purch_price multiplied by 5 if it satisfies the condition defined in the subquery started with SELECT wrapped within a pair of parenthesis.
The subquery retrieves only those cate_ids from purchase table if their corresponding receive_qty is more than 10.
UPDATE
newpurchase
SET purch_price=purch_price*.05
WHERE cate_id IN(SELECT cate_id
FROM purchase
WHERE receive_qty>10);
Updating MySQL Table using PHP Script
You can update MySQL table data (using UPDATE command) through a PHP script. Within the script, PHP function MySQL_query() execute the SQL command. We have used a table called 'item' to apply the query:
Table Name : item Structure : item_code	varchar(20), value	int(11), quantity	int(11) where item_code is the primary key. In the following rows of item table, 'value' column which is marked with red rectangle will be updated.
PHP Script
<?php
$dbhost = 'localhost';
$dbuser = 'root';
$dbpass = '';
$connec = MySQL_connect($dbhost, $dbuser, $dbpass);
if(!$connec)
{
die('Could not connect: ' . MySQL_error());
}
$sql = "UPDATE item
SET value = '112'
WHERE item_code='item1'";
MySQL_select_db('MySQL');
$result = MySQL_query($sql, $connec);
if(!$result)
{
die('Could not update data: ' . MySQL_error());
}
echo "Data successfully updated...";
MySQL_close($connec);
?>
Sample Output:
Multiple Updates in MySQL
Sample table: table1
Problem
If you want to update the val1 with 5,8 and 7 for concerned id 1,3 and 4 and the other val1 will remain same and the val2 will be updated with 13 and 5 for the concerned id 2 and 4 and the other will remain same, the following update statement can be used by using IF and CASE.
Code:
UPDATE table1 SET val1= CASE id
WHEN 1 THEN 5
WHEN 3 THEN 8
WHEN 4 THEN 7
ELSE val1
END,
val2= CASE id
WHEN 2 THEN 13
WHEN 4 THEN 5
ELSE val2
END
WHERE id IN (1, 2, 3, 4);
Pictorial presentation:
Sample Output:
Examples: MySQL UPDATE on multiple tables
Here we have used two tables book_mast and purchase for the following example as sample table. We have shown some of the columns in the associated tables. Here are the tables below -
MySQL> SELECT book_id,book_name,pub_lang,book_price
-> FROM book_mast;
+--------+------------------------------------+---------+----------+
| book_id| book_name
| pub_lang|book_price|
+--------+------------------------------------+---------+----------+
| BK001
| Introduction to Electrodynamics
| English |
85.00|
| BK002
| Understanding of Steel Construction| English |
105.50|
| BK003
| Guide to Networking
| Hindi
|
200.00|
| BK004
| Transfer
of Heat and Mass
| English |
250.00|
| BK005
| Conceptual Physics
| NULL
|
145.00|
| BK006
| Fundamentals of Heat
| German
|
112.00|
| BK007
| Advanced 3d Graphics
| Hindi
|
56.00|
| BK008
| Human Anatomy
| German
|
50.50|
| BK009
| Mental Health Nursing
| English |
145.00|
| BK010
| Fundamentals of Thermodynamics
| English |
225.00|
| BK011
| The Experimental Analysis of Cat
| French
|
95.00|
| BK012
| The Nature
of World
| English |
88.00|
| BK013
| Environment a Sustainable Future
| German
|
100.00|
| BK014
| Concepts in Health
| NULL
|
180.00|
| BK015
| Anatomy & Physiology
| Hindi
|
135.00|
| BK016
| Networks and Telecommunications
| French
|
45.00|
+--------+------------------------------------+---------+----------+
16 rows in set (0.00 sec)
and
MySQL> SELECT book_id,pub_lang,purch_price,total_cost
-> FROM purchase;
+---------+----------+-------------+------------+
| book_id | pub_lang | purch_price | total_cost |
+---------+----------+-------------+------------+
| BK001
| English
|
75.00 |
1125.00 |
| BK004
| English
|
55.00 |
440.00 |
| BK005
| NULL
|
20.00 |
400.00 |
| BK004
| English
|
35.00 |
525.00 |
| BK001
| English
|
25.00 |
200.00 |
| BK003
| Hindi
|
45.00 |
900.00 |
+---------+----------+-------------+------------+
6 rows in set (0.02 sec)
If we want to update the book_price of the table book_mast by an increment of 5% and also update the purch_price and total_cost of puchase table by an increment of 5%, and this increment will affect only those rows in both book_mast and purchase table, which publishing language is English and book_id matching in both the tables, we can write the following code -
UPDATE book_mast,purchase
SET book_mast.book_price=book_mast.book_price+(book_mast.book_price*.05),
purchase.purch_price=purchase.purch_price+(purchase.purch_price*.05),
purchase.total_cost=receive_qty*(purchase.purch_price+(purchase.purch_price*.05))
WHERE book_mast.book_id=purchase.book_id
AND purchase.pub_lang="English";
After updating it is to be shown that, the highlighted rows have been effected in both the tables.
MySQL> SELECT book_id,book_name,pub_lang,book_price
-> FROM book_mast;
+--------+------------------------------------+---------+----------+
| book_id| book_name
| pub_lang|book_price|
+--------+------------------------------------+---------+----------+
| BK001
| Introduction to Electrodynamics
| English |
89.25|
| BK002
| Understanding of Steel Construction| English |
105.50|
| BK003
| Guide to Networking
| Hindi
|
200.00|
| BK004
| Transfer
of Heat and Mass
| English |
262.50|
| BK005
| Conceptual Physics
| NULL
|
145.00|
| BK006
| Fundamentals of Heat
| German
|
112.00|
| BK007
| Advanced 3d Graphics
| Hindi
|
56.00|
| BK008
| Human Anatomy
| German
|
50.50|
| BK009
| Mental Health Nursing
| English |
145.00|
| BK010
| Fundamentals of Thermodynamics
| English |
225.00|
| BK011
| The Experimental Analysis of Cat
| French
|
95.00|
| BK012
| The Nature
of World
| English |
88.00|
| BK013
| Environment a Sustainable Future
| German
|
100.00|
| BK014
| Concepts in Health
| NULL
|
180.00|
| BK015
| Anatomy & Physiology
| Hindi
|
135.00|
| BK016
| Networks and Telecommunications
| French
|
45.00|
+--------+------------------------------------+---------+----------+
16 rows in set (0.01 sec)
and
MySQL> SELECT book_id,pub_lang,purch_price,total_cost
-> FROM purchase;
+---------+----------+-------------+------------+
| book_id | pub_lang | purch_price | total_cost |
+---------+----------+-------------+------------+
| BK001
| English
|
78.75 |
1181.25 |
| BK004
| English
|
57.75 |
462.00 |
| BK005
| NULL
|
20.00 |
400.00 |
| BK004
| English
|
36.75 |
551.25 |
| BK001
| English
|
26.25 |
210.00 |
| BK003
| Hindi
|
45.00 |
900.00 |
+---------+----------+-------------+------------+
6 rows in set (0.08 sec)
MySQL: Update with Join Statement
Sample tables
Problem
If we want to update the aval1of table11 with the bval1 of table12 against the following condition -
1). the id of table11 and table13 must be matched, and
2). bval2 of table12 must be matched with the cval1 of table13 -
then the following code can be used.
Code:
UPDATE table11, table12, table13
SET table11.aval1 = table12.bval1
WHERE table11.id = table13.id
AND table12.bval2 = table13.cval1
Explanation
Output:
Previous:
INSERT with LEFT JOIN
Next:
MySQL Delete
﻿New Content: Composer: Dependency manager for PHP, R Programming
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
©w3resource.com 2011-2019
Privacy
About
Contact
Feedback
Advertise
bedava pornoGoogle Contacts API version 3.0  |  Contacts API
|  Google Developers
Google Contacts API
Language
Bahasa Indonesia
Deutsch
English
español
français
Português Brasileiro
Русский
日本語
简体中文
한국어
All Products
Sign in
Guides
Reference
Support
Send feedback
Guides
Reference
Support
All Products
Products
G Suite Developer
Contacts API
Guides
Google Contacts API version 3.0
Note: For read and write access to users' contacts, use the People API,
which provides both contact and profile information using JSON instead of the
older GData protocol.
The Google Contacts API allows client applications to view and update a user's contacts. Contacts are stored in the user's Google Account; most Google services have access to the contact list.
Your client application can use the Google Contacts API to create new contacts, edit or delete existing contacts, and query for contacts that match particular criteria
Audience
This document is intended for programmers who want to write client applications that can interact with Google's contact lists. It provides a series of examples of basic API interactions. These examples come in various forms, including raw XML/HTTP requests, Java, .NET and Python source code.
This document assumes that you understand the general ideas behind the Google Data APIs protocol.
For general Google Contacts API reference information, see the reference guide.
Getting started
This section contains some information to help you get started with the Google Contacts API.
Creating a Google Account
You'll need a
Google Account for testing purposes. If you already have a test account with a project registered in
the API Console, then you're all set; you can visit the Google Contacts API user interface to set up, edit, or view your test data.
Note: To view your contacts without using the Google Contacts API, you can log in to Gmail and click the Contacts link.
Running the sample code
ProtocolIf you're using a UNIX system and you want to try the examples in
this document without writing any code, you may find the UNIX
command-line utilities curl or
wget useful; for more
information, see the manual pages for those utilities.JavaA full working
sample client,
containing all the sample code shown in this document, is
available in the
Java client library distribution,
under the directory
gdata/java/sample/contacts/. Build
and execution instructions are included in the same directory in
the README.txt file.The sample client performs several operations on contacts to
demonstrate the use of the Contacts Data API. To compile the
examples in this document into your own code, you'll need the
following import statements:import com.google.gdata.client.*;
import com.google.gdata.client.contacts.*;
import com.google.gdata.data.*;
import com.google.gdata.data.contacts.*;
import com.google.gdata.data.extensions.*;
import com.google.gdata.util.*;
import java.io.IOException;
import java.net.URL;
// ...
ContactsService myService = new ContactsService("YOUR_APPLICATION_NAME");
// Authorize the service object.
// ...
.NETTo compile the examples in this document into your own code,
you'll need to download the latest
.NET client library distribution
and add the following using statements:using Google.Contacts;
using Google.GData.Contacts;
using Google.GData.Client;
using Google.GData.Extensions;
// ...
RequestSettings settings = new RequestSettings("YOUR_APPLICATION_NAME");
// Add authorization token.
// ...
ContactsRequest cr = new ContactsRequest(settings);
// ...
PythonA full working
sample client,
containing all the sample code shown in this document, is available
in the
Python client library distribution,
under the directory
samples/contacts/.The sample client performs several operations on contacts to
demonstrate the use of the Contacts Data API.
To run the examples in this document in your own code, you'll need
the following import statements:import atom.data
import gdata.data
import gdata.contacts.client
import gdata.contacts.data
# ...
gd_client = gdata.contacts.client.ContactsClient(source='YOUR_APPLICATION_NAME')
# Authorize the client.
# ...
Authorizing requests to the Google Contacts API service
When your application requests non-public user data, it must include an access token. The token also identifies your application to Google.
About authorization protocols
Use OAuth 2.0 to authorize requests. You must register your project in the Google API Console and enable the Contacts API service in order to use OAuth 2.0.
OAuth 1.0 was officially deprecated on April 20, 2012 and stopped being supported on May 5, 2015. Old code must be migrated to OAuth 2.0.
Authorizing requests with OAuth 2.0
Requests to the Google Contacts API for non-public user data must be authorized by an authenticated user.
The details of the authorization process, or "flow," for OAuth 2.0 vary somewhat depending on what kind of application you're writing. The following general process applies to all application types:
When you create your application, you register it with Google. Google then provides information you'll need later, such as a client ID and a client secret.
Activate the Google Contacts API in the Services pane of the Google APIs Console. (If it isn't listed in the Console, then skip this step.)
When your application needs access to user data, it asks Google for a particular scope of access.
If your public application uses scopes that permit access to certain user data,
it must pass review.
If you see unverified app on the screen when testing
your application, you must submit a verification request to remove it.
Find out more about unverified
apps in the Help Center.
Google displays an OAuth dialog to the user, asking them to authorize your application to request some of their data.
If the user approves, then Google gives your application a short-lived access token.
Your application requests user data, attaching the access token to the request.
If Google determines that your request and the token are valid, it returns the requested data.
Some flows include additional steps, such as using refresh tokens to acquire new access tokens. For detailed information about flows for various types of applications, see Google's OAuth 2.0 documentation.
Here's the OAuth 2.0 scope information for the Google Contacts API:
Scope
Meaning
https://www.google.com/m8/feeds/
read/write access to Contacts and Contact Groups
https://www.googleapis.com/auth/contacts.readonly
read-only access to Contacts and Contact Groups
To request access using OAuth 2.0, your application needs the scope information, as well as information that Google supplies during application registration (such as the client ID and/or the client secret).
Tip: The Google APIs client libraries can handle some of the authorization process for you. They are available for a variety of programming languages; check the Libraries and Samples page for more details.
Specifying a version
Every request that you send using the Google Contacts API should specify version 3.0 of the API.
To specify a version number, use the GData-Version HTTP header:
GData-Version: 3.0
Alternatively, if you can't set HTTP headers, you can specify v=3.0 as a query parameter in the URL. The HTTP header is preferred where possible.
Note: The client libraries supply appropriate version headers automatically, so don't use the v=3.0 query parameter when you're using a client library.
Working with contacts
Contact Entry
The Google Contacts API allows manipulation of Contact Entry implementing the GData Contact kind element with some restrictions described in the Reference Guide.
Version 3 of the API introduces new structured data formats for the contact's name and structured postal address fields.
Each of those fields let applications store data in 2 flavors:
Formatted: a formatted value that is stored using the gd:fullName property for gd:name field and gd:formattedAddress for gd:structuredPostalAddress field.
Structured: structured data stored using multiple supported properties under the gd:name and gd:structuredPostalAddress fields.
If only one of the flavors is provided, the API uses heuristic parsers to generate the missing flavor using the provided data.
Whether or not the heuristic parsers are used is described in the following tabs. Elements generated by the API are shown in bold in the output.
StructuredIn the following example, only the structured flavor is provided
to the API. The server uses heuristic parsers to try and generate
the formatted flavor.Input:<entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005">
<gd:name>
<gd:givenName>First</gd:givenName>
<gd:familyName>Last</gd:familyName>
</gd:name>
<!-- ... -->
<gd:structuredPostalAddress rel="http://schemas.google.com/g/2005#work" primary="true">
<gd:city>Mountain View</gd:city>
<gd:street>1600 Amphitheatre Pkwy</gd:street>
<gd:region>CA</gd:region>
<gd:postcode>94043</gd:postcode>
<gd:country>United States</gd:country>
</gd:structuredPostalAddress>
<!-- ... -->
Output:<entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005">
<gd:name>
<gd:givenName>First</gd:givenName>
<gd:familyName>Last</gd:familyName>
<gd:fullName>First Last</gd:fullName>
</gd:name>
<!-- ... -->
<gd:structuredPostalAddress rel="http://schemas.google.com/g/2005#work" primary="true">
<gd:city>Mountain View</gd:city>
<gd:street>1600 Amphitheatre Pkwy</gd:street>
<gd:region>CA</gd:region>
<gd:postcode>94043</gd:postcode>
<gd:country>United States</gd:country>
<gd:formattedAddress>1600 Amphitheatre Pkwy Mountain View, CA 94043 United States</gd:formattedAddress>
</gd:structuredPostalAddress>
<!-- ... -->
</entry>
FormattedIn the following example, only the formatted flavor is provided to
the API. The server uses heuristic parsers to try and generate the
structured flavor.Input:<entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005">
<gd:name>
<gd:fullName>First Last</gd:fullName>
</gd:name>
<!-- ... -->
<gd:structuredPostalAddress rel="http://schemas.google.com/g/2005#work" primary="true">
<gd:formattedAddress>1600 Amphitheatre Pkwy Mountain View, CA 94043 United States</gd:formattedAddress>
</gd:structuredPostalAddress>
<!-- ... -->
</entry>
Output:<entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005">
<gd:name>
<gd:givenName>First</gd:givenName>
<gd:familyName>Last</gd:familyName>
<gd:fullName>First Last</gd:fullName>
</gd:name>
<!-- ... -->
<gd:structuredPostalAddress rel="http://schemas.google.com/g/2005#work" primary="true">
<gd:city>Mountain View</gd:city>
<gd:street>1600 Amphitheatre Pkwy</gd:street>
<gd:region>CA</gd:region>
<gd:postcode>94043</gd:postcode>
<gd:country>United States</gd:country>
<gd:formattedAddress>1600 Amphitheatre Pkwy Mountain View, CA 94043 United States</gd:formattedAddress>
</gd:structuredPostalAddress>
<!-- ... -->
</entry>
BothIn the following example, both structured and formatted flavors
are provided to the API. No elements are generated by the server.Input:<entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005">
<gd:name>
<gd:givenName>First</gd:givenName>
<gd:familyName>Last</gd:familyName>
<gd:fullName>Last First</gd:fullName>
</gd:name>
<!-- ... -->
<gd:structuredPostalAddress rel="http://schemas.google.com/g/2005#work" primary="true">
<gd:city>Mountain View</gd:city>
<gd:street>1600 Amphitheatre Pkwy</gd:street>
<gd:region>CA</gd:region>
<gd:postcode>94043</gd:postcode>
<gd:country>United States</gd:country>
<gd:formattedAddress>
1600 Amphitheatre Pkwy Mountain View
</gd:formattedAddress>
</gd:structuredPostalAddress>
<!-- ... -->
</entry>
Output:<entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005">
<gd:name>
<gd:givenName>First</gd:givenName>
<gd:familyName>Last</gd:familyName>
<gd:fullName>Last First</gd:fullName>
</gd:name>
<!-- ... -->
<gd:structuredPostalAddress rel="http://schemas.google.com/g/2005#work" primary="true">
<gd:city>Mountain View</gd:city>
<gd:street>1600 Amphitheatre Pkwy</gd:street>
<gd:region>CA</gd:region>
<gd:postcode>94043</gd:postcode>
<gd:country>United States</gd:country>
<gd:formattedAddress>
1600 Amphitheatre Pkwy Mountain View
</gd:formattedAddress>
</gd:structuredPostalAddress>
<!-- ... -->
</entry>
Retrieving all contacts
To retrieve all of a user's contacts, send an authorized GET request to the following URL:
https://www.google.com/m8/feeds/contacts/{userEmail}/full
With the appropriate value in place of userEmail.
Note: The special userEmail value default can be used to refer to the authenticated user.
Upon success, the server responds with a HTTP 200 OK status code and the requested contacts feed.
ProtocolRequest:GET /m8/feeds/contacts/default/full
GData-Version: 3.0
...
Response Header:HTTP/1.1 200 OK
Content-Type: application/atom+xml; charset=UTF-8; type=feed
...
Response Body:<feed xmlns="http://www.w3.org/2005/Atom"
xmlns:openSearch="http://a9.com/-/spec/opensearch/1.1/"
xmlns:gContact="http://schemas.google.com/contact/2008"
xmlns:batch="http://schemas.google.com/gdata/batch"
xmlns:gd="http://schemas.google.com/g/2005"
gd:etag="feedEtag">
<id>userEmail</id>
<updated>2008-12-10T10:04:15.446Z</updated>
<category scheme="http://schemas.google.com/g/2005#kind" term="http://schemas.google.com/contact/2008#contact"/>
<link rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/userEmail/full"/>
<link rel="http://schemas.google.com/g/2005#post" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/userEmail/full"/>
<link rel="http://schemas.google.com/g/2005#batch" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/userEmail/full/batch"/>
<link rel="self" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/userEmail/full?max-results=25"/>
<author>
<name>User</name>
<email>userEmail</email>
</author>
<generator version="1.0" uri="http://www.google.com/m8/feeds">
Contacts
</generator>
<openSearch:totalResults>1</openSearch:totalResults>
<openSearch:startIndex>1</openSearch:startIndex>
<openSearch:itemsPerPage>25</openSearch:itemsPerPage>
<entry gd:etag="contactEtag">
<id>
http://www.google.com/m8/feeds/contacts/userEmail/base/contactId
</id>
<updated>2008-12-10T04:45:03.331Z</updated>
<app:edited xmlns:app="http://www.w3.org/2007/app">2008-12-10T04:45:03.331Z</app:edited>
<category scheme="http://schemas.google.com/g/2005#kind"
term="http://schemas.google.com/contact/2008#contact"/>
<title>Fitzwilliam Darcy</title>
<gd:name>
<gd:fullName>Fitzwilliam Darcy</gd:fullName>
</gd:name>
<link rel="http://schemas.google.com/contacts/2008/rel#photo" type="image/*"
href="https://www.google.com/m8/feeds/photos/media/userEmail/contactId"
gd:etag="photoEtag"/>
<link rel="self" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/userEmail/full/contactId"/>
<link rel="edit" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/userEmail/full/contactId"/>
<gd:phoneNumber rel="http://schemas.google.com/g/2005#home"
primary="true">
456
</gd:phoneNumber>
<gd:extendedProperty name="pet" value="hamster"/>
<gContact:groupMembershipInfo deleted="false"
href="http://www.google.com/m8/feeds/groups/userEmail/base/groupId"/>
</entry>
<!-- Other entries ... -->
</feed>
Javapublic static void printAllContacts(ContactsService myService)
throws ServiceException, IOException {
// Request the feed
URL feedUrl = new URL("https://www.google.com/m8/feeds/contacts/default/full");
ContactFeed resultFeed = myService.getFeed(feedUrl, ContactFeed.class);
// Print the results
System.out.println(resultFeed.getTitle().getPlainText());
for (ContactEntry entry : resultFeed.getEntries()) {
if (entry.hasName()) {
Name name = entry.getName();
if (name.hasFullName()) {
String fullNameToDisplay = name.getFullName().getValue();
if (name.getFullName().hasYomi()) {
fullNameToDisplay += " (" + name.getFullName().getYomi() + ")";
}
System.out.println("\t\t" + fullNameToDisplay);
} else {
System.out.println("\t\t (no full name found)");
}
if (name.hasNamePrefix()) {
System.out.println("\t\t" + name.getNamePrefix().getValue());
} else {
System.out.println("\t\t (no name prefix found)");
}
if (name.hasGivenName()) {
String givenNameToDisplay = name.getGivenName().getValue();
if (name.getGivenName().hasYomi()) {
givenNameToDisplay += " (" + name.getGivenName().getYomi() + ")";
}
System.out.println("\t\t" + givenNameToDisplay);
} else {
System.out.println("\t\t (no given name found)");
}
if (name.hasAdditionalName()) {
String additionalNameToDisplay = name.getAdditionalName().getValue();
if (name.getAdditionalName().hasYomi()) {
additionalNameToDisplay += " (" + name.getAdditionalName().getYomi() + ")";
}
System.out.println("\t\t" + additionalNameToDisplay);
} else {
System.out.println("\t\t (no additional name found)");
}
if (name.hasFamilyName()) {
String familyNameToDisplay = name.getFamilyName().getValue();
if (name.getFamilyName().hasYomi()) {
familyNameToDisplay += " (" + name.getFamilyName().getYomi() + ")";
}
System.out.println("\t\t" + familyNameToDisplay);
} else {
System.out.println("\t\t (no family name found)");
}
if (name.hasNameSuffix()) {
System.out.println("\t\t" + name.getNameSuffix().getValue());
} else {
System.out.println("\t\t (no name suffix found)");
}
} else {
System.out.println("\t (no name found)");
}
System.out.println("Email addresses:");
for (Email email : entry.getEmailAddresses()) {
System.out.print(" " + email.getAddress());
if (email.getRel() != null) {
System.out.print(" rel:" + email.getRel());
}
if (email.getLabel() != null) {
System.out.print(" label:" + email.getLabel());
}
if (email.getPrimary()) {
System.out.print(" (primary) ");
}
System.out.print("\n");
}
System.out.println("IM addresses:");
for (Im im : entry.getImAddresses()) {
System.out.print(" " + im.getAddress());
if (im.getLabel() != null) {
System.out.print(" label:" + im.getLabel());
}
if (im.getRel() != null) {
System.out.print(" rel:" + im.getRel());
}
if (im.getProtocol() != null) {
System.out.print(" protocol:" + im.getProtocol());
}
if (im.getPrimary()) {
System.out.print(" (primary) ");
}
System.out.print("\n");
}
System.out.println("Groups:");
for (GroupMembershipInfo group : entry.getGroupMembershipInfos()) {
String groupHref = group.getHref();
System.out.println("
Id: " + groupHref);
}
System.out.println("Extended Properties:");
for (ExtendedProperty property : entry.getExtendedProperties()) {
if (property.getValue() != null) {
System.out.println("
" + property.getName() + "(value) = " +
property.getValue());
} else if (property.getXmlBlob() != null) {
System.out.println("
" + property.getName() + "(xmlBlob)= " +
property.getXmlBlob().getBlob());
}
}
Link photoLink = entry.getContactPhotoLink();
String photoLinkHref = photoLink.getHref();
System.out.println("Photo Link: " + photoLinkHref);
if (photoLink.getEtag() != null) {
System.out.println("Contact Photo's ETag: " + photoLink.getEtag());
}
System.out.println("Contact's ETag: " + entry.getEtag());
}
}
.NETpublic static void PrintAllContacts(ContactsRequest cr)
{
Feed<Contact> f = cr.GetContacts();
foreach (Contact entry in f.Entries)
{
if (entry.Name != null)
{
Name name = entry.Name;
if (!string.IsNullOrEmpty(name.FullName))
Console.WriteLine("\t\t" + name.FullName);
else
Console.WriteLine("\t\t (no full name found)");
if (!string.IsNullOrEmpty(name.NamePrefix))
Console.WriteLine("\t\t" + name.NamePrefix);
else
Console.WriteLine("\t\t (no name prefix found)");
if (!string.IsNullOrEmpty(name.GivenName))
{
string givenNameToDisplay = name.GivenName;
if (!string.IsNullOrEmpty(name.GivenNamePhonetics))
givenNameToDisplay += " (" + name.GivenNamePhonetics + ")";
Console.WriteLine("\t\t" + givenNameToDisplay);
}
else
Console.WriteLine("\t\t (no given name found)");
if (!string.IsNullOrEmpty(name.AdditionalName))
{
string additionalNameToDisplay = name.AdditionalName;
if (string.IsNullOrEmpty(name.AdditionalNamePhonetics))
additionalNameToDisplay += " (" + name.AdditionalNamePhonetics + ")";
Console.WriteLine("\t\t" + additionalNameToDisplay);
}
else
Console.WriteLine("\t\t (no additional name found)");
if (!string.IsNullOrEmpty(name.FamilyName))
{
string familyNameToDisplay = name.FamilyName;
if (!string.IsNullOrEmpty(name.FamilyNamePhonetics))
familyNameToDisplay += " (" + name.FamilyNamePhonetics + ")";
Console.WriteLine("\t\t" + familyNameToDisplay);
}
else
Console.WriteLine("\t\t (no family name found)");
if (!string.IsNullOrEmpty(name.NameSuffix))
Console.WriteLine("\t\t" + name.NameSuffix);
else
Console.WriteLine("\t\t (no name suffix found)");
}
else
Console.WriteLine("\t (no name found)");
foreach (EMail email in entry.Emails)
{
Console.WriteLine("\t" + email.Address);
}
}
}
Pythondef PrintAllContacts(gd_client):
feed = gd_client.GetContacts()
for i, entry in enumerate(feed.entry):
print '\n%s %s' % (i+1, entry.name.full_name.text)
if entry.content:
print '
%s' % (entry.content.text)
# Display the primary email address for the contact.
for email in entry.email:
if email.primary and email.primary == 'true':
print '
%s' % (email.address)
# Show the contact groups that this contact is a member of.
for group in entry.group_membership_info:
print '
Member of group: %s' % (group.href)
# Display extended properties.
for extended_property in entry.extended_property:
if extended_property.value:
value = extended_property.value
else:
value = extended_property.GetXmlBlob()
print '
Extended Property - %s: %s' % (extended_property.name, value)
Note: The feed may not contain all of the user's contacts, because there's a default limit on the number of results returned. For more information, see the max-results query parameter in Retrieving contacts using query parameters.
Retrieving contacts using query parameters
The Contacts Data API lets you request a set of contacts that match specified criteria, such as requesting contacts created or updated in a given date range, or published by a particular author.
ProtocolFor example, to send a date-range query, add the updated-min
parameter to the request URL. To get all the contact entries
updated after March 16, 2007, send an HTTP request to the
contact's feed URL:GET https://www.google.com/m8/feeds/contacts/{userEmail}/full?updated-min=2007-03-16T00:00:00
Or you can simply use the following URL, which points to the
authenticated user's contact feed:GET https://www.google.com/m8/feeds/contacts/default/full?updated-min=2007-03-16T00:00:00
When you send that GET request, the server returns an HTTP
200 OK status code and a feed containing any contacts that
were created or updated after the date specified.
The Contacts Data API supports query parameters described in the
Contacts Data API Reference Guide.JavaFor example, to send a date-range query, use the setUpdatedMin
method of the Query object. The following code snippet prints
the title of each contact updated after the given start time:public static void printDateMinQueryResults(
ContactsService myService, DateTime startTime) throws ServiceException, IOException {
// Create query and submit a request
URL feedUrl = new URL("https://www.google.com/m8/feeds/contacts/default/full");
Query myQuery = new Query(feedUrl);
myQuery.setUpdatedMin(startTime);
ContactFeed resultFeed = myService.query(myQuery, ContactFeed.class);
// Print the results
for (ContactEntry entry : resultFeed.getEntries()) {
System.out.println(entry.getName().getFullname().getValue());
System.out.println("Updated on: " + entry.getUpdated().toStringRfc822());
}
}
Notice that the Query object is constructed using the same
contact feed URL used to retrieve contacts.
The Contacts Data API supports the following Query methods:
setMaxResults
Set the maximum number of entries to return.
setStartIndex
Set the 1-based index of the first result to be retrieved (for paging).
setUpdatedMin
Set the lower bound on entry update dates.
setStringCustomParameter("showdeleted","true")
Include deleted contacts in the returned contacts feed. Deleted contacts are shown as entries that contain nothing but an <atom:id> element and a <gd:deleted> element. (Google retains placeholders for deleted contacts for 30 days after deletion; during that time, you can request the placeholders using the showdeleted query parameter.)
setStringCustomParameter("orderby","lastmodified")
Sort the returned contacts by last-modified date.
setStringCustomParameter("sortorder", "ascending")
Set sorting order direction. direction can be either "ascending" or "descending".
setStringCustomParameter("group", "groupId")
Retrieve contacts belonging to the specified group Atom Id.
.NETFor example, to send a date-range query, use the StartDate
property of the ContactsQuery object. The following code
snippet prints out each contact updated after the given start
time:public void PrintDateMinQueryResults(ContactsRequest cr)
{
ContactsQuery query = new ContactsQuery(ContactsQuery.CreateContactsUri("default"));
query.StartDate = new DateTime(2008, 1, 1);
Feed<Contact> feed = cr.Get<Contact>(query);
foreach (Contact contact in feed.Entries)
{
Console.WriteLine(contact.Name.FullName);
Console.WriteLine("Updated on: " + contact.Updated.ToString());
}
}
The Contacts Data API supports the following ContactsQuery
properties:
NumberToRetrieve
Set the maximum number of entries to return.
StartIndex
Set the 1-based index of the first result to be retrieved (for paging).
StartDate
Set the lower bound on entry update dates.
ShowDeleted
Include deleted contacts in the returned contacts feed. Deleted contacts are shown as entries that contain nothing but an <atom:id> element and a <gd:deleted> element. (Google retains placeholders for deleted contacts for 30 days after deletion; during that time, you can request the placeholders using the showdeleted query parameter.)
OrderBy
Sort the returned contacts by last-modified date.
SortOrder
Set sorting order direction. SortOrder can be either "ascending" or "descending".
Group
Retrieve contacts belonging to the specified group Atom Id.
PythonFor example, to send a date-range query, set the updated_min
property of the ContactsQuery object. The following code
snippet prints out each contact updated after the given start
time:def print_datemin_query_results(gd_client):
updated_min = '2008-01-01'
query = gdata.contacts.client.ContactsQuery()
query.updated_min = updated_min
feed = gd_client.GetContacts(q = query)
for contact in feed.entry:
print contact.name.full_name
print 'Updated on %s' % contact.updated.text
Notice that the ContactsQuery object has a feed member
which represents the base URL of the query. It uses the same default
URL as GetContactsFeed.
The Contacts Data API supports the following ContactsQuery properties:
query.max_results
Set the maximum number of entries to return.
query.start_index
Set the 1-based index of the first result to be retrieved (for paging).
query.updated_min
Set the lower bound on entry update dates.
query['showdeleted'] = 'true'
Include deleted contacts in the returned contacts feed. Deleted contacts are shown as entries that contain nothing but an <atom:id> element and a <gd:deleted> element. (Google retains placeholders for deleted contacts for 30 days after deletion; during that time, you can request the placeholders using the showdeleted query parameter.)
query.orderby = 'lastmodified'
Sort the returned contacts by last-modified date.
query['sortorder'] = "direction"
Set sorting order direction. direction can be either "ascending" or "descending".
query.group
Retrieve contacts belonging to the specified group Atom Id.
Retrieving a single contact
To retrieve a single contact, send an authorized GET request to the contact's selfLink URL:
https://www.google.com/m8/feeds/contacts/{userEmail}/full/{contactId}
With the appropriate values in place of userEmail and contactID.
Note: The special userEmail value default can be used to refer to the authenticated user.
Upon success, the server responds with an HTTP 200 OK status code and the requested contact entry.
ProtocolRequest:GET /m8/feeds/contacts/default/full/{contactId}
GData-Version: 3.0
...
Response Header:HTTP/1.1 200 OK
Content-Type: application/atom+xml; charset=UTF-8; type=feed
...
Response Body:<entry xmlns="http://www.w3.org/2005/Atom"
xmlns:gContact="http://schemas.google.com/contact/2008"
xmlns:gd="http://schemas.google.com/g/2005"
gd:etag="contactEtag">
<id>
http://www.google.com/m8/feeds/contacts/{userEmail}/base/{contactId}
</id>
<updated>2008-12-10T04:45:03.331Z</updated>
<app:edited xmlns:app="http://www.w3.org/2007/app">2008-12-10T04:45:03.331Z</app:edited>
<category scheme="http://schemas.google.com/g/2005#kind"
term="http://schemas.google.com/contact/2008#contact"/>
<title>Fitzwilliam Darcy</title>
<gd:name>
<gd:fullName>Fitzwilliam Darcy</gd:fullName>
</gd:name>
<link rel="http://schemas.google.com/contacts/2008/rel#photo" type="image/*"
href="https://www.google.com/m8/feeds/photos/media/{userEmail}/{contactId}"
gd:etag="{photoEtag}"/>
<link rel="self" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/{userEmail}/full/{contactId}"/>
<link rel="edit" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/{userEmail}/full/{contactId}"/>
<gd:phoneNumber rel="http://schemas.google.com/g/2005#home"
primary="true">
456
</gd:phoneNumber>
<gd:extendedProperty name="pet" value="hamster"/>
<gContact:groupMembershipInfo deleted="false"
href="http://www.google.com/m8/feeds/groups/{userEmail}/base/{groupId}"/>
</entry>
Javapublic static ContactEntry retrieveContact(ContactsService myService) {
ContactEntry contact =
myService.getEntry(new URL("https://www.google.com/m8/feeds/contacts/default/full/contactId"),
ContactEntry.class);
// Do something with the contact.
return contact;
}
.NETpublic static Contact retrieveContact(ContactsRequest cr)
{
Contact contact = cr.Retrieve<Contact>("https://www.google.com/m8/feeds/contacts/default/full/contactId");
// Do something with the contact.
return contact;
}
Pythondef retrieve_contact(gd_client):
contact = gd_client.GetContact('https://www.google.com/m8/feeds/contacts/default/full/contactId')
# Do something with the contact.
return contact
Creating contacts
To create a new contact, send an authorized POST request to the user's contacts feed URL with contact data in the body.
The URL is of the form:
https://www.google.com/m8/feeds/contacts/{userEmail}/full
With the appropriate value in place of userEmail.
Note: The special userEmail value default can be used to refer to the authenticated user.
Upon success, the server responds with an HTTP 201 Created status code and the created contact entry with some additional elements and properties (shown in bold) that are set by the server, such as id, various link elements and properties.
ProtocolRequest Header:POST /m8/feeds/contacts/default/full
Content-Type: application/atom+xml
GData-Version: 3.0
...
Request Body:<atom:entry xmlns:atom="http://www.w3.org/2005/Atom"
xmlns:gd="http://schemas.google.com/g/2005">
<atom:category scheme="http://schemas.google.com/g/2005#kind"
term="http://schemas.google.com/contact/2008#contact"/>
<gd:name>
<gd:givenName>Elizabeth</gd:givenName>
<gd:familyName>Bennet</gd:familyName>
<gd:fullName>Elizabeth Bennet</gd:fullName>
</gd:name>
<atom:content type="text">Notes</atom:content>
<gd:email rel="http://schemas.google.com/g/2005#work"
primary="true"
address="liz@gmail.com" displayName="E. Bennet"/>
<gd:email rel="http://schemas.google.com/g/2005#home"
address="liz@example.org"/>
<gd:phoneNumber rel="http://schemas.google.com/g/2005#work"
primary="true">
(206)555-1212
</gd:phoneNumber>
<gd:phoneNumber rel="http://schemas.google.com/g/2005#home">
(206)555-1213
</gd:phoneNumber>
<gd:im address="liz@gmail.com"
protocol="http://schemas.google.com/g/2005#GOOGLE_TALK"
primary="true"
rel="http://schemas.google.com/g/2005#home"/>
<gd:structuredPostalAddress
rel="http://schemas.google.com/g/2005#work"
primary="true">
<gd:city>Mountain View</gd:city>
<gd:street>1600 Amphitheatre Pkwy</gd:street>
<gd:region>CA</gd:region>
<gd:postcode>94043</gd:postcode>
<gd:country>United States</gd:country>
<gd:formattedAddress>
1600 Amphitheatre Pkwy Mountain View
</gd:formattedAddress>
</gd:structuredPostalAddress>
</atom:entry>
Response Header:HTTP/1.1 201 Created
Content-Type: application/atom+xml; charset=UTF-8; type=feed
...
Response Body:<atom:entry xmlns:atom="http://www.w3.org/2005/Atom"
xmlns:gd="http://schemas.google.com/g/2005">
<id>http://www.google.com/m8/feeds/contacts/userEmail</bar>/base/{contactId}</id>
<updated>2008-12-10T04:45:03.331Z</updated>
<app:edited xmlns:app="http://www.w3.org/2007/app">2008-12-10T04:45:03.331Z</app:edited>
<category scheme="http://schemas.google.com/g/2005#kind"
term="http://schemas.google.com/contact/2008#contact"/>
<title>Elizabeth Bennet</title>
<gd:name>
<gd:givenName>Elizabeth</gd:givenName>
<gd:familyName>Bennet</gd:familyName>
<gd:fullName>Elizabeth Bennet</gd:fullName>
</gd:name>
<link rel="http://schemas.google.com/contacts/2008/rel#photo" type="image/*"
href="https://www.google.com/m8/feeds/photos/media/{userEmail}/{contactId}"/>
<link rel="self" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/{userEmail}/full/{contactId}"/>
<link rel="edit" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/{userEmail}/full/{contactId}"/>
<atom:content type="text">Notes</atom:content>
<gd:email rel="http://schemas.google.com/g/2005#work"
primary="true"
address="liz@gmail.com" displayName="E. Bennet"/>
<gd:email rel="http://schemas.google.com/g/2005#home"
address="liz@example.org"/>
<gd:phoneNumber rel="http://schemas.google.com/g/2005#work"
primary="true">
(206)555-1212
</gd:phoneNumber>
<gd:phoneNumber rel="http://schemas.google.com/g/2005#home">
(206)555-1213
</gd:phoneNumber>
<gd:im address="liz@gmail.com"
protocol="http://schemas.google.com/g/2005#GOOGLE_TALK"
primary="true"
rel="http://schemas.google.com/g/2005#home"/>
<gd:structuredPostalAddress
rel="http://schemas.google.com/g/2005#work"
primary="true">
<gd:city>Mountain View</gd:city>
<gd:street>1600 Amphitheatre Pkwy</gd:street>
<gd:region>CA</gd:region>
<gd:postcode>94043</gd:postcode>
<gd:country>United States</gd:country>
<gd:formattedAddress>
1600 Amphitheatre Pkwy Mountain View
</gd:formattedAddress>
</gd:structuredPostalAddress>
</atom:entry>
Javaimport com.google.gdata.client.contacts.ContactsService;
import com.google.gdata.data.contacts.ContactEntry;
import com.google.gdata.data.contacts.ContactGroupFeed;
import com.google.gdata.data.extensions.City;
import com.google.gdata.data.extensions.Country;
import com.google.gdata.data.extensions.Email;
import com.google.gdata.data.extensions.ExtendedProperty;
import com.google.gdata.data.extensions.FormattedAddress;
import com.google.gdata.data.extensions.FullName;
import com.google.gdata.data.extensions.Im;
import com.google.gdata.data.extensions.Name;
import com.google.gdata.data.extensions.PhoneNumber;
import com.google.gdata.data.extensions.PostCode;
import com.google.gdata.data.extensions.Region;
import com.google.gdata.data.extensions.Street;
import com.google.gdata.data.extensions.StructuredPostalAddress;
// ...
public static ContactEntry createContact(ContactsService myService) {
// Create the entry to insert.
ContactEntry contact = new ContactEntry();
// Set the contact's name.
Name name = new Name();
final String NO_YOMI = null;
name.setFullName(new FullName("Elizabeth Bennet", NO_YOMI));
name.setGivenName(new GivenName("Elizabeth", NO_YOMI));
name.setFamilyName(new FamilyName("Bennet", NO_YOMI))
contact.setName(name);
contact.setContent(new PlainTextConstruct("Notes"));
// Set contact's e-mail addresses.
Email primaryMail = new Email();
primaryMail.setAddress("liz@gmail.com");
primaryMail.setDisplayName("E. Bennet");
primaryMail.setRel("http://schemas.google.com/g/2005#home");
primaryMail.setPrimary(true);
contact.addEmailAddress(primaryMail);
Email secondaryMail = new Email();
secondaryMail.setAddress("liz@example.com");
secondaryMail.setRel("http://schemas.google.com/g/2005#work");
secondaryMail.setPrimary(false);
contact.addEmailAddress(secondaryMail);
// Set contact's phone numbers.
PhoneNumber primaryPhoneNumber = new PhoneNumber();
primaryPhoneNumber.setPhoneNumber("(206)555-1212");
primaryPhoneNumber.setRel("http://schemas.google.com/g/2005#work");
primaryPhoneNumber.setPrimary(true);
contact.addPhoneNumber(primaryPhoneNumber);
PhoneNumber secondaryPhoneNumber = new PhoneNumber();
secondaryPhoneNumber.setPhoneNumber("(206)555-1213");
secondaryPhoneNumber.setRel("http://schemas.google.com/g/2005#home");
contact.addPhoneNumber(secondaryPhoneNumber);
// Set contact's IM information.
Im imAddress = new Im();
imAddress.setAddress("liz@gmail.com");
imAddress.setRel("http://schemas.google.com/g/2005#home");
imAddress.setProtocol("http://schemas.google.com/g/2005#GOOGLE_TALK");
imAddress.setPrimary(true);
contact.addImAddress(imAddress);
// Set contact's postal address.
StructuredPostalAddress postalAddress = new StructuredPostalAddress();
postalAddress.setStreet(new Street("1600 Amphitheatre Pkwy"));
postalAddress.setCity(new City("Mountain View"));
postalAddress.setRegion(new Region("CA"));
postalAddress.setPostcode(new PostCode("94043"));
postalAddress.setCountry(new Country("US", "United States"));
postalAddress.setFormattedAddress(new FormattedAddress("1600 Amphitheatre Pkwy Mountain View"));
postalAddress.setRel("http://schemas.google.com/g/2005#work");
postalAddress.setPrimary(true);
contactOne.addStructuredPostalAddress(postalAddress);
// Ask the service to insert the new entry
URL postUrl = new URL("https://www.google.com/m8/feeds/contacts/default/full");
ContactEntry createdContact = myService.insert(postUrl, contact);
System.out.println("Contact's ID: " + createdContact.getId());
return createdContact;
}
.NETpublic static Contact CreateContact(ContactsRequest cr)
{
Contact newEntry = new Contact();
// Set the contact's name.
newEntry.Name = new Name()
{
FullName = "Elizabeth Bennet",
GivenName = "Elizabeth",
FamilyName = "Bennet",
};
newEntry.Content = "Notes";
// Set the contact's e-mail addresses.
newEntry.Emails.Add(new EMail()
{
Primary = true,
Rel = ContactsRelationships.IsHome,
Address = "liz@gmail.com"
});
newEntry.Emails.Add(new EMail()
{
Rel = ContactsRelationships.IsWork,
Address = "liz@example.com"
});
// Set the contact's phone numbers.
newEntry.Phonenumbers.Add(new PhoneNumber()
{
Primary = true,
Rel = ContactsRelationships.IsWork,
Value = "(206)555-1212",
});
newEntry.Phonenumbers.Add(new PhoneNumber()
{
Rel = ContactsRelationships.IsHome,
Value = "(206)555-1213",
});
// Set the contact's IM information.
newEntry.IMs.Add(new IMAddress()
{
Primary = true,
Rel = ContactsRelationships.IsHome,
Protocol = ContactsProtocols.IsGoogleTalk,
});
// Set the contact's postal address.
newEntry.PostalAddresses.Add(new StructuredPostalAddress()
{
Rel = ContactsRelationships.IsWork,
Primary = true,
Street = "1600 Amphitheatre Pkwy",
City ="Mountain View",
Region = "CA",
Postcode = "94043",
Country = "United States",
FormattedAddress = "1600 Amphitheatre Pkwy Mountain View",
});
// Insert the contact.
Uri feedUri = new Uri(ContactsQuery.CreateContactsUri("default"));
Contact createdEntry = cr.Insert(feedUri, newEntry);
Console.WriteLine("Contact's ID: " + createdEntry.Id)
return createdEntry;
}
Pythonimport atom.data
import gdata.data
import gdata.contacts.client
import gdata.contacts.data
def create_contact(gd_client):
new_contact = gdata.contacts.data.ContactEntry()
# Set the contact's name.
new_contact.name = gdata.data.Name(
given_name=gdata.data.GivenName(text='Elizabeth'),
family_name=gdata.data.FamilyName(text='Bennet'),
full_name=gdata.data.FullName(text='Elizabeth Bennet'))
new_contact.content = atom.data.Content(text='Notes')
# Set the contact's email addresses.
new_contact.email.append(gdata.data.Email(address='liz@gmail.com',
primary='true', rel=gdata.data.WORK_REL, display_name='E. Bennet'))
new_contact.email.append(gdata.data.Email(address='liz@example.com',
rel=gdata.data.HOME_REL))
# Set the contact's phone numbers.
new_contact.phone_number.append(gdata.data.PhoneNumber(text='(206)555-1212',
rel=gdata.data.WORK_REL, primary='true'))
new_contact.phone_number.append(gdata.data.PhoneNumber(text='(206)555-1213',
rel=gdata.data.HOME_REL))
# Set the contact's IM address.
new_contact.im.append(gdata.data.Im(text='liz@gmail.com',
primary='true', rel=gdata.data.HOME_REL, protocol=gdata.data.GOOGLE_TALK_PROTOCOL))
# Set the contact's postal address.
new_contact.structured_postal_address.append(
rel=gdata.data.WORK_REL, primary='true',
street=gdata.data.Street(text='1600 Amphitheatre Pkwy'),
city=gdata.data.City(text='Mountain View'),
region=gdata.data.Region(text='CA'),
postcode=gdata.data.Postcode(text='94043'),
country=gdata.data.Country(text='United States'))
# Send the contact data to the server.
contact_entry = gd_client.CreateContact(new_contact)
print "Contact's ID: %s" % contact_entry.id.text
return contact_entry
Updating contacts
To update a contact, first retrieve the contact entry, modify the data and send an authorized PUT request to the contact's edit URL with the modified contact entry in the body.
The URL is of the form:
https://www.google.com/m8/feeds/contacts/userEmail/full/{contactId}
With the appropriate values in place of userEmail and contactId.
Note: The special userEmail value default can be used to refer to the authenticated user.
To ensure that the data sent to the API doesn't overwrite another client's changes, the contact entry's Etag should be provided in the request header.
If-Match: Etag
If the Etag is outdated, the server responds with an HTTP 412 Precondition Failed status code.
Note: The special Etag value * can be used to bypass this verification and process the update regardless of updates from other clients.
For more information about ETags, see the Google Data APIs reference guide.
Upon success, the server responds with an HTTP 200 OK status code and the updated contact entry.
ProtocolRequest Header:PUT /m8/feeds/contacts/default/full/{contactId}
If-Match: {lastKnownEtag}
GData-Version: 3.0
Content-Type: application/atom+xml
...
Request Body:<entry gd:etag="{lastKnownEtag}">
<id>http://www.google.com/m8/feeds/contacts/{userEmail}/base/{contactId}</id>
<updated>2008-02-28T18:47:02.303Z</updated>
<category scheme="http://schemas.google.com/g/2005#kind"
term="http://schemas.google.com/contact/2008#contact"/>
<gd:name>
<gd:givenName>New</gd:givenName>
<gd:familyName>Name</gd:familyName>
<gd:fullName>New Name</gd:fullName>
</gd:name>
<content type="text">Notes</content>
<link rel="http://schemas.google.com/contacts/2008/rel#photo" type="image/*"
href="https://www.google.com/m8/feeds/photos/media/{userEmail}/{contactId}"/>
<link rel="self" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/{userEmail}/full/{contactId}"/>
<link rel="edit" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/{userEmail}/full/{contactId}"/>
<gd:phoneNumber rel="http://schemas.google.com/g/2005#other"
primary="true">456-123-2133</gd:phoneNumber>
<gd:extendedProperty name="pet" value="hamster"/>
<gContact:groupMembershipInfo deleted="false"
href="http://www.google.com/m8/feeds/groups/{userEmail}/base/{groupId}"/>
</entry>
</pre>
Response Header:HTTP/1.1 200 OK
Content-Type: application/atom+xml; charset=UTF-8; type=entry
...
Response Body:<entry gd:etag="{newEtag}">
<id>http://www.google.com/m8/feeds/contacts/{userEmail}/base/{contactId}</id>
<updated>2011-05-11T09:30:00.000Z</updated>
<category scheme="http://schemas.google.com/g/2005#kind"
term="http://schemas.google.com/contact/2008#contact"/>
<title type="text">New Name</title>
<gd:name>
<gd:givenName>New</gd:givenName>
<gd:familyName>Name</gd:familyName>
<gd:fullName>New Name</gd:fullName>
</gd:name>
<content type="text">Notes</content>
<link rel="http://schemas.google.com/contacts/2008/rel#photo" type="image/*"
href="https://www.google.com/m8/feeds/photos/media/{userEmail}/{contactId}"/>
<link rel="self" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/{userEmail}/full/{contactId}"/>
<link rel="edit" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/{userEmail}/full/{contactId}"/>
<gd:phoneNumber rel="http://schemas.google.com/g/2005#other"
primary="true">456-123-2133</gd:phoneNumber>
<gd:extendedProperty name="pet" value="hamster"/>
<gContact:groupMembershipInfo deleted="false"
href="http://www.google.com/m8/feeds/groups/{userEmail}/base/{groupId}"/>
</entry>
Javapublic static ContactEntry updateContactName(
ContactsService myService, URL contactURL)
throws ServiceException, IOException {
// First retrieve the contact to updated.
ContactEntry entryToUpdate = myService.getEntry(contactURL, ContactEntry.class);
entryToUpdate.getName().getFullName().setValue("New Name");
entryToUpdate.getName().getGivenName().setValue("New");
entryToUpdate.getName().getFamilyName().setValue("Name");
URL editUrl = new URL(entryToUpdate.getEditLink().getHref());
try {
ContactEntry contactEntry = myService.update(editUrl, entryToUpdate);
System.out.println("Updated: " + contactEntry.getUpdated().toString());
return contactEntry;
} catch (PreconditionFailedException e) {
// Etags mismatch: handle the exception.
}
return null;
}
.NETpublic static Contact UpdateContactName(ContactsRequest cr, Uri contactURL)
{
// First, retrieve the contact to update.
Contact contact = cr.Retrieve<Contact>(contactURL);
contact.Name.FullName = "New Name";
contact.Name.GivenName = "New";
contact.Name.FamilyName = "Name";
try
{
Contact updatedContact = cr.Update(contact);
Console.WriteLine("Updated: " + updatedEntry.Updated.ToString())
return updatedContact;
}
catch (GDataVersionConflictException e)
{
// Etags mismatch: handle the exception.
}
return null;
}
Pythondef update_contact_name(gd_client, contact_url):
# First retrieve the contact to modify from the API.
contact_entry = gd_client.GetContact(contact_url)
contact_entry.name.full_name.text = 'New Name'
contact_entry.name.given_name.text = 'New'
contact_entry.name.family_name.text = 'Name'
try:
updated_contact = gd_client.Update(contact_entry)
print 'Updated: %s' % updated_contact.updated.text
return updated_contact
except gdata.client.RequestError, e:
if e.status == 412:
# Etags mismatch: handle the exception.
pass
return None
Note: To ensure forward compatibility, be sure that when you PUT an updated entry you preserve all the XML that was present when you retrieved the entry from the server. Otherwise the ignored elements will be deleted. The Google Data API client libraries all handle this correctly, so if you're using one of the libraries you're all set.
Changing group membership
To determine what groups a given contact belongs to, examine the contact's <gContact:groupMembershipInfo> elements. Each such element contains a group Atom ID as the value of its href attribute.
Protocol<entry gd:etag='contactEtag'>
<id>http://www.google.com/m8/feeds/contacts/userEmail/base/contactId</id>
...
<gContact:groupMembershipInfo deleted='false'
href='http://www.google.com/m8/feeds/groups/userEmail/base/groupId'/>
...
</entry>
Javapublic static void printGroupMembershipInfo(ContactsService myService, URL contactURL)
throws IOException, ServiceException {
ContactEntry contact = myService.getEntry(contactURL, ContactEntry.class);
for (GroupMembershipInfo groupMembershipInfo : contact.getGroupMembershipInfos()) {
System.out.println("Group's Atom ID: " + groupMembershipInfo.getHref());
}
}
.NETpublic static void PrintGroupMembershipInfo(ContactsRequest cr, Uri contactURL)
{
Contact contact = cr.Retrieve(contactURL);
foreach (GroupMembership groupMembership in contact.GroupMembership)
{
Console.WriteLine("Group's Atom ID: " + groupMembership.HRef);
}
}
Pythondef print_group_membership_info(gd_client, contact_url):
contact = gd_client.GetContact(contact_url)
for group_membership_info in contact.group_membership_info:
print "Group's Atom ID: %s" % group_membership_info.href
To change a contact's group membership, edit the contact's gd:groupMembershipInfo fields to reflect the new group this contact belongs to and send an update request to the API.
The group's Atom ID can be found as the value of the element for that group which can be retrieved by getting the user's contact groups feed.
ProtocolRequest Header:PUT https://www.google.com/m8/feeds/contacts/{userEmail}/full/{contactId}
If-Match: {lastKnownEtag}
GData-Version: 3.0
Content-Type: application/atom+xml
...
Request Body:<entry gd:etag="{lastKnownEtag}">
<id>http://www.google.com/m8/feeds/contacts/{userEmail}/base/{contactId}</id>
<updated>2008-02-28T18:47:02.303Z</updated>
...
<gContact:groupMembershipInfo deleted="false"
href="http://www.google.com/m8/feeds/groups/{userEmail}/base/{groupId}"/>
</entry>
Response Header:HTTP/1.1 200 OK
...
Response Body:<entry gd:etag="{newEtag}">
<id>http://www.google.com/m8/feeds/contacts/{userEmail}/base/{contactId}</id>
<updated>2011-05-11T09:30:00.000Z</updated>
...
<gContact:groupMembershipInfo deleted="false"
href="http://www.google.com/m8/feeds/groups/{userEmail}/base/{groupId}"/>
</entry>
Javapublic static ContactEntry addGroupMembership(ContactsService myService, URL contactURL, String groupAtomId)
throws IOException, ServiceException {
ContactEntry contact = myService.getEntry(contactURL, ContactEntry.class);
contact.addGroupMembershipInfo(new GroupMembershipInfo(false, groupAtomId));
URL editUrl = new URL(contact.getEditLink().getHref());
try {
ContactEntry updatedContact = myService.update(editUrl, contact);
return contact;
} catch (PreconditionFailedException e) {
// Etags mismatch: handle the exception.
}
return null;
}
.NETpublic static Contact addGroupMembership(ContactsRequest cr, Uri contactURL, string groupAtomId)
{
Contact contact = cr.Retrieve<Contact>(contactURL);
contact.GroupMembership.Add(new GroupMembership()
{
HRef = groupAtomId
});
try
{
Contact updatedContact = cr.Update(contact);
return updatedContact;
}
catch (GDataVersionConflictException e)
{
// Etags mismatch: handle the exception.
}
return null;
}
Pythondef add_group_membership(gd_client, contact_url, group_atom_id):
contact = gd_client.GetContact(contact_url)
contact.group_membership_info.append(gdata.contacts.data.GroupMembershipInfo(href=group_atom_id))
try:
updated_contact = gd_client.Update(contact)
return updated_contact
except gdata.client.RequestError, e:
if e.status == 412:
# Etags mismatch: handle the exception.
pass
return None
Deleting contacts
To delete a contact, send an authorized DELETE request to the contact's edit URL.
The URL is of the form:
https://www.google.com/m8/feeds/contacts/{userEmail}/full/{contactId}
With the appropriate values in place of userEmail and contactID.
Note: The special userEmail value default can be used to refer to the authenticated user.
To ensure that the request sent to the API doesn't overwrite another client's changes, the contact entry's Etag should be provided in the request header.
If-Match: Etag
If the Etag is outdated, the server responds with an HTTP 412 Precondition Failed status code.
Note: The special Etag value * can be used to bypass this verification and process the update regardless of updates from other clients.
For more information about ETags, see the Google Data APIs reference guide.
Upon success, the server responds with an HTTP 200 OK status code.
Protocol<!-- Request -->
DELETE /m8/feeds/contacts/default/full/contactId
If-match: Etag
...
<!-- Response -->
HTTP/1.1 200 OK
Javapublic static void deleteContact(ContactsService myService, URL contactURL)
throws ServiceException, IOException {
// Retrieving the contact is required in order to get the Etag.
ContactEntry contact = myService.getEntry(contactURL, ContactEntry.class);
try {
contact.delete();
} catch (PreconditionFailedException e) {
// Etags mismatch: handle the exception.
}
}
.NETpublic static void DeleteContact(ContactsRequest cr, Uri contactURL)
{
// Retrieving the contact is required in order to get the Etag.
Contact contact = cr.retrieve<Contact>(contactURL);
try
{
cr.Delete(contact);
}
catch (GDataVersionConflictException e)
{
// Etags mismatch: handle the exception.
}
}
Pythondef delete_contact(gd_client, contact_url):
# Retrieving the contact is required in order to get the Etag.
contact = gd_client.GetContact(contact_url)
try:
gd_client.Delete(contact)
except gdata.client.RequestError, e:
if e.status == 412:
# Etags mismatch: handle the exception.
pass
Troubleshooting Tip: Some firewalls block HTTP DELETE messages. To get around this, you can include an X-HTTP-Method-Override: DELETE header in a POST request. For details, see the Google Data API protocol basics document.
Note: Google retains placeholders for deleted contact groups for 30 days after deletion. During this 30 day time period, you can request these placeholders using the showdeleted query parameter.
Contact photo management
Retrieving a contact's photo
To retrieve a contact's photo, send an authorized GET request to the contact's photo link URL.
The URL is of the form:
https://www.google.com/m8/feeds/photos/media/{userEmail}/{contactId}
With the appropriate values in place of userEmail and contactID.
Note: The special userEmail value default can be used to refer to the authenticated user.
The photo link can be retrieved from the contact entry returned by the API:
<entry xmlns="http://www.w3.org/2005/Atom"
xmlns:gContact="http://schemas.google.com/contact/2008"
xmlns:gd="http://schemas.google.com/g/2005"
gd:etag="{contactEtag}">
<id>
http://www.google.com/m8/feeds/contacts/{userEmail}/base/{contactId}
</id>
...
<title>Full Name</title>
<gd:name>
<gd:fullName>Full Name</gd:fullName>
</gd:name>
<link rel="http://schemas.google.com/contacts/2008/rel#photo" type="image/*"
href="https://www.google.com/m8/feeds/photos/media/{userEmail}/{contactId}"
gd:etag="{photoEtag}"/>
<link rel="self" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/{userEmail}/full/{contactId}"/>
...
</entry>
Note: If a contact does not have a photo, then the photo link element has no gd:etag attribute.
Upon success, the server responds with an HTTP 200 OK status code and the photo data bytes.
Protocol<!-- Request -->
GET /m8/feeds/photos/media/default/contactId
...
<!-- Response -->
HTTP/1.1 200 OK
Content-Type: image/*
...
[Photo data bytes]
Javapublic static void downloadPhoto(ContactsService service, URL contactURL)
throws ServiceException, IOException {
ContactEntry entry = service.getEntry(contactURL,
ContactEntry.class);
Link photoLink = entry.getContactPhotoLink();
if (photoLink != null) {
InputStream in = service.getStreamFromLink(photoLink);
ByteArrayOutputStream out = new ByteArrayOutputStream();
RandomAccessFile file = new RandomAccessFile("test.jpg", "rw");
byte[] buffer = new byte[4096];
while (true) {
if ((read = in.read(buffer)) != -1) {
out.write(buffer, 0, read);
} else {
break;
}
}
file.write(out.toByteArray());
file.close();
}
}
.NETpublic static void DownloadPhoto(ContactsRequest cr, Uri contactURL)
{
Contact contact = cr.Retrieve<Contact>(contactURL);
Stream photoStream = cr.GetPhoto(contact);
FileStream outStream = File.OpenWrite("test.jpg");
byte[] buffer = new byte[photoStream.length];
photoStream.Read(buffer, 0, photoStream.length);
outStream.Write(buffer, 0, photoStream.length);
photoStream.Close();
outStream.Close();
}
Pythondef download_photo(gd_client, contact_url):
contact = gd_client.GetContact(contact_url)
hosted_image_binary = gd_client.GetPhoto(contact_entry)
image_file = open('test.jpg', 'wb')
image_file.write(hosted_image_binary)
image_file.close()
Adding/Updating a photo for a contact
To add or update a photo for a contact, send an authorized PUT request to the contact's photo URL with the photo data bytes in the body.
The URL is of the form:
https://www.google.com/m8/feeds/photos/media/{userEmail}/{contactID}
With the appropriate values in place of userEmail and contactID.
Note: The special userEmail value default can be used to refer to the authenticated user.
The photo link can be retrieved from the contact entry returned by the API:
<entry xmlns="http://www.w3.org/2005/Atom"
xmlns:gContact="http://schemas.google.com/contact/2008"
xmlns:gd="http://schemas.google.com/g/2005"
gd:etag="{contactEtag}">
<id>
http://www.google.com/m8/feeds/contacts/{userEmail}/base/{contactId}
</id>
...
<title>Full Name</title>
<gd:name>
<gd:fullName>Full Name</gd:fullName>
</gd:name>
<link rel="http://schemas.google.com/contacts/2008/rel#photo" type="image/*"
href="https://www.google.com/m8/feeds/photos/media/{userEmail}/{contactId}"
gd:etag="{photoEtag}"/>
<link rel="self" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/{userEmail}/full/{contactId}"/>
...
</entry>
To ensure that the request sent to the API doesn't overwrite another client's changes, the contact entry's Etag should be provided in the request header.
If-Match: Etag
If the Etag is outdated, the server responds with an HTTP 412 Precondition Failed status code.
Note: The special Etag value * can be used to bypass this verification and process the update regardless of updates from other clients.
For more information about ETags, see the Google Data APIs reference guide.
If a contact does not have a photo, then the photo link element has no gd:etag attribute and no If-match is required.
Upon success, the server responds with an HTTP 200 OK status code.
Protocol<!-- Request -->
PUT /m8/feeds/photos/media/default/contactId
If-match: Etag
Content-Type: image/*
...
[Photo data bytes]
...
<!-- Response -->
HTTP/1.1 OK
...
Javapublic static void updateContactPhoto(ContactsService myService, URL contactURL, byte[] photoData)
throws ServiceException, IOException {
ContactEntry contact = myService.getEntry(contactURL, ContactEntry.class);
Link photoLink = contact.getContactPhotoLink();
URL photoUrl = new URL(photoLink.getHref());
GDataRequest request = myService.createRequest(GDataRequest.RequestType.UPDATE,
photoUrl, new ContentType("image/jpeg"));
request.setEtag(photoLink.getEtag());
OutputStream requestStream = request.getRequestStream();
requestStream.write(photoData);
try {
request.execute();
} catch (PreconditionFailedException e) {
// Etags mismatch: handle the exception.
}
}
.NETpublic static void UpdateContactPhoto(ContactsRequest cr, Uri contactURL, Stream photoStream)
{
Contact contact = cr.Retrieve<Contact>(contactURL);
try
{
cr.SetPhoto(contact, photoStream);
}
catch (GDataVersionConflictException e)
{
// Etags mismatch: handle the exception.
}
}
Pythondef update_contact_photo(gd_client, contact_url, media_object):
contact = gd_client.GetContact(contact_url)
try:
gd_client.ChangePhoto(media_object, contact)
except gdata.client.RequestError, e:
if e.status == 412:
# Etags mismatch: handle the exception.
pass
Deleting a contact's photo
To delete a contact's photo, send an authorized DELETE request to the contact's photo URL.
The URL is of the form:
https://www.google.com/m8/feeds/photos/media/{userEmail}/{contactID}
With the appropriate values in place of userEmail and contactID.
Note: The special userEmail value default can be used to refer to the authenticated user.
The photo link can be retrieved from the contact entry returned by the API:
<entry xmlns="http://www.w3.org/2005/Atom"
xmlns:gContact="http://schemas.google.com/contact/2008"
xmlns:gd="http://schemas.google.com/g/2005"
gd:etag="contactEtag">
<id>
http://www.google.com/m8/feeds/contacts/userEmail/base/contactId
</id>
...
<title>Full Name</title>
<gd:name>
<gd:fullName>Full Name</gd:fullName>
</gd:name>
<link rel="http://schemas.google.com/contacts/2008/rel#photo" type="image/*"
href="https://www.google.com/m8/feeds/photos/media/userEmail/contactId"
gd:etag="photoEtag"/>
<link rel="self" type="application/atom+xml"
href="https://www.google.com/m8/feeds/contacts/userEmail/full/contactId"/>
...
</entry>
To ensure that the request sent to the API doesn't overwrite another client's changes, the contact entry's Etag should be provided in the request header.
If-Match: Etag
If the Etag is outdated, the server responds with an HTTP 412 Precondition Failed status code.
Note: The special Etag value * can be used to bypass this verification and process the update regardless of updates from other clients.
For more information about ETags, see the Google Data APIs reference guide.
If a contact does not have a photo, then the photo link element has no gd:etag.
Upon success, the server responds with an HTTP 200 OK status code.
Protocol<!-- Request -->
DELETE /m8/feeds/photos/media/default/contactId
If-match: Etag
...
<!-- Response -->
HTTP/1.1 OK
...
Javapublic static void deleteContactPhoto(ContactsService myService, URL contactURL)
throws ServiceException, IOException {
ContactEntry contact = myService.getEntry(contactURL, ContactEntry.class);
Link photoLink = contact.getContactPhotoLink();
URL photoUrl = new URL(photoLink.getHref());
try {
service.delete(photoUrl, photoLink.getEtag());
} catch (PreconditionFailedException e) {
// Etags mismatch: handle the exception.
}
}
.NETpublic static void UpdateContactPhoto(ContactsRequest cr, Uri contactURL)
{
Contact contact = cr.Retrieve<Contact>(contactURL);
try
{
cr.Delete(contact.PhotoUri, contact.PhotoETag);
}
catch (GDataVersionConflictException e)
{
// Etags mismatch: handle the exception.
}
}
Pythondef update_contact_photo(gd_client, contact_url):
contact = gd_client.GetContact(contact_url)
try:
gd_client.DeletePhoto(contact)
except gdata.client.RequestError, e:
if e.status == 412:
# Etags mismatch: handle the exception.
pass
...
Working with contact groups
Contact Group Entry
Contacts can be placed into user-defined groups. You can create,
retrieve, update, and delete these groups using the Contacts Data
API, and you can add contacts to a group or remove contacts from a
group. For details, see the following sections.
The Contacts Data API also provides access to four predefined
"system groups" for each user:
My Contacts
Friends
Family
Coworkers
System groups appear in a groups feed just like user-defined groups
do. In fact, system groups are mostly treated just like other
groups. The differences are:
Each system group entry contains a <gContact:systemGroup>
subelement. The id attribute of that subelement indicates which
system group the group is: Contacts, Friends, Family, or
Coworkers. Note that the My Contacts ID value is simply
Contacts, without the "My". Also note that this system group ID
value is different from the group ID given in the group entry's
<id> element.
You can't add new system groups, change the name of a system group,
add extended properties to a system group, or delete a system
group.
*
The contact-group entry representing a system group doesn't contain
a rel="edit" link.
Note: System groups' names are not guaranteed to be localized,
so in general your client is responsible for presenting the system
groups in a way appropriate for your users, such as by providing
localized names for the system groups, or representing them using
icons.
More information about the Contact Group Entry element can be
found in the reference guide.
Retrieving all contact groups
To retrieve the user's contact groups, send an authorized GET
request to the contact groups feed URL:
https://www.google.com/m8/feeds/groups/{userEmail}/full
With the proper value in place of userEmail.
Note: The special userEmail value default can be used to
refer to the authenticated user.
Upon success, the server responds with an HTTP 200 OK status code
and the user contact groups feed.
Protocol<!-- Request -->
GET /m8/feeds/groups/default/full
...
<!-- Response -->
HTTP/1.1 200 OK
Content-Type: application/atom+xml; charset=UTF-8; type=entry
...
<feed xmlns='http://www.w3.org/2005/Atom'
xmlns:openSearch='http://a9.com/-/spec/opensearch/1.1/'
xmlns:gContact='http://schemas.google.com/contact/2008'
xmlns:batch='http://schemas.google.com/gdata/batch'
xmlns:gd='http://schemas.google.com/g/2005'
gd:etag='feedEtag'>
<id>jo@gmail.com</id>
<updated>2008-12-10T10:44:43.955Z</updated>
<category scheme='http://schemas.google.com/g/2005#kind'
term='http://schemas.google.com/contact/2008#group'/>
<title>Jo March's Contact Groups</title>
<link rel='alternate' type='text/html'
href='http://www.google.com/'/>
<link rel='http://schemas.google.com/g/2005#feed'
type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full'/>
<link rel='http://schemas.google.com/g/2005#post'
type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full'/>
<link rel='http://schemas.google.com/g/2005#batch'
type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/batch'/>
<link rel='self'
type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full?max-results=25'/>
<author>
<name>Jo March</name>
<email>jo@gmail.com</email>
</author>
<generator version='1.0'
uri='http://www.google.com/m8/feeds'>Contacts</generator>
<openSearch:totalResults>5</openSearch:totalResults>
<openSearch:startIndex>1</openSearch:startIndex>
<openSearch:itemsPerPage>25</openSearch:itemsPerPage>
<entry>
<id>http://www.google.com/m8/feeds/groups/userEmail/base/6</id>
<updated>1970-01-01T00:00:00.000Z</updated>
<category scheme='http://schemas.google.com/g/2005#kind'
term='http://schemas.google.com/contact/2008#group'/>
<title>System Group: My Contacts</title>
<content>System Group: My Contacts</content>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/6'/>
<gContact:systemGroup id='Contacts'/>
</entry>
[...Other system groups removed for ease of reading...]
<entry gd:etag='Etag'>
<id>http://www.google.com/m8/feeds/groups/userEmail/base/groupId</id>
<updated>2008-12-10T04:44:37.324Z</updated>
<category scheme='http://schemas.google.com/g/2005#kind'
term='http://schemas.google.com/contact/2008#group'/>
<title>joggers</title>
<content>joggers</content>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/groupId'/>
<link rel='edit' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/groupId'/>
</entry>
</feed>
Javapublic static void printAllGroups(ContactsService myService)
throws ServiceException, IOException {
// Request the feed
URL feedUrl = new URL("https://www.google.com/m8/feeds/groups/default/full");
ContactGroupFeed resultFeed = myService.getFeed(feedUrl, ContactGroupFeed.class);
for (ContactGroupEntry groupEntry : resultFeed.getEntries()) {
System.out.println("Atom Id: " + groupEntry.getId());
System.out.println("Group Name: " + groupEntry.getTitle().getPlainText());
System.out.println("Last Updated: " + groupEntry.getUpdated());
System.out.println("Extended Properties:");
for (ExtendedProperty property : groupEntry.getExtendedProperties()) {
if (property.getValue() != null) {
System.out.println("
" + property.getName() + "(value) = " +
property.getValue());
} else if (property.getXmlBlob() != null) {
System.out.println("
" + property.getName() + "(xmlBlob) = " +
property.getXmlBlob().getBlob());
}
}
System.out.println("Self Link: " + groupEntry.getSelfLink().getHref());
if (!groupEntry.hasSystemGroup()) {
// System groups do not have an edit link
System.out.println("Edit Link: " + groupEntry.getEditLink().getHref());
System.out.println("ETag: " + groupEntry.getEtag());
}
if (groupEntry.hasSystemGroup()) {
System.out.println("System Group Id: " +
groupEntry.getSystemGroup().getId());
}
}
}
.NETpublic static void PrintAllGroups(ContactsRequest cr)
{
Feed<Group> fg = cr.GetGroups();
foreach (Group group in groups.Entries)
{
Console.WriteLine("Atom Id: " + group.Id);
Console.WriteLine("Group Name: " + group.Title);
Console.WriteLine("Last Updated: " + group.Updated.ToString());
Console.WriteLine("Extended Properties:");
foreach (ExtendedProperty property in group.ExtendedProperties)
{
Console.WriteLine("
" + property.Name + " = " + property.Value);
}
Console.WriteLine("Self Link: " + group.Self);
if (!string.IsNullOrEmpty(group.SystemGroup))
{
// System groups do not have an edit link.
Console.WriteLine("Edit Link: " + group.GroupEntry.EditUri.Content);
Console.WriteLine("Etag: " + group.ETag);
}
else
{
Console.WriteLine("System Group Id: " + group.SystemGroup);
}
}
}
Pythondef PrintAllGroups(gd_client):
feed = gd_client.GetGroups()
for entry in feed.entry:
print 'Atom Id: %s' % group.id.text
print 'Group Name: %s' % group.title.text
print 'Last Updated: %s' % group.updated.text
print 'Extended Properties:'
for extended_property in entry.extended_property:
if extended_property.value:
value = extended_property.value
else:
value = extended_property.GetXmlBlob()
print '
%s = %s' % (extended_property.name, value)
print 'Self Link: %s' % entry.GetSelfLink().href
if not entry.system_group:
print 'Edit Link: %s' % entry.GetEditLink().href
print 'ETag: %s' % entry.etag
else:
print 'System Group Id: %s' % entry.system_group.id
Note: The feed may not contain all of the user's contact
groups, because there's a default limit on the number of results
returned. For more information, see the max-results query
parameter in
Retrieving contact groups using query parameters.
Retrieving contact groups using query parameters
The Contacts Data API supports query parameters described in the
Contacts Data API Reference Guide.
It allows a user to request a set of contact groups that match
specified criteria, such as requesting contact groups updated after
a given date.
For example, to send a date-range query, add the updated-min
parameter to the request URL. To get all the contact-group entries
updated after March 16, 2007, send an HTTP request to the contact
group's feed URL:
GET https://www.google.com/m8/feeds/groups/{userEmail}/full?updated-min=2007-03-16T00:00:00
When you send that GET request, the server returns an HTTP
200 OK status code and a feed containing any contact groups that
were created or updated after the date specified.
For the client library examples, the properties corresponding to updated-min are:
Java: setUpdatedMin
.NET: StartDate
Python: updated_min
Protocol<!-- Request -->
GET /m8/feeds/groups/default/full
...
<!-- Response -->
HTTP/1.1 200 OK
Content-Type: application/atom+xml; charset=UTF-8; type=entry
...
<feed xmlns='http://www.w3.org/2005/Atom'
xmlns:openSearch='http://a9.com/-/spec/opensearch/1.1/'
xmlns:gContact='http://schemas.google.com/contact/2008'
xmlns:batch='http://schemas.google.com/gdata/batch'
xmlns:gd='http://schemas.google.com/g/2005'
gd:etag='feedEtag'>
<id>jo@gmail.com</id>
<updated>2008-12-10T10:44:43.955Z</updated>
<category scheme='http://schemas.google.com/g/2005#kind'
term='http://schemas.google.com/contact/2008#group'/>
<title>Jo March's Contact Groups</title>
<link rel='alternate' type='text/html'
href='http://www.google.com/'/>
<link rel='http://schemas.google.com/g/2005#feed'
type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full'/>
<link rel='http://schemas.google.com/g/2005#post'
type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full'/>
<link rel='http://schemas.google.com/g/2005#batch'
type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/batch'/>
<link rel='self'
type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full?max-results=25'/>
<author>
<name>Jo March</name>
<email>jo@gmail.com</email>
</author>
<generator version='1.0'
uri='http://www.google.com/m8/feeds'>Contacts</generator>
<openSearch:totalResults>5</openSearch:totalResults>
<openSearch:startIndex>1</openSearch:startIndex>
<openSearch:itemsPerPage>25</openSearch:itemsPerPage>
<entry>
<id>http://www.google.com/m8/feeds/groups/userEmail/base/6</id>
<updated>1970-01-01T00:00:00.000Z</updated>
<category scheme='http://schemas.google.com/g/2005#kind'
term='http://schemas.google.com/contact/2008#group'/>
<title>System Group: My Contacts</title>
<content>System Group: My Contacts</content>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/6'/>
<gContact:systemGroup id='Contacts'/>
</entry>
[...Other system groups removed for ease of reading...]
<entry gd:etag='Etag'>
<id>http://www.google.com/m8/feeds/groups/userEmail/base/groupId</id>
<updated>2008-12-10T04:44:37.324Z</updated>
<category scheme='http://schemas.google.com/g/2005#kind'
term='http://schemas.google.com/contact/2008#group'/>
<title>joggers</title>
<content>joggers</content>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/groupId'/>
<link rel='edit' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/groupId'/>
</entry>
</feed>
Javapublic static void printDateMinQueryResults(
ContactsService myService, DateTime startTime) throws ServiceException, IOException {
// Create query and submit a request
URL feedUrl = new URL("https://www.google.com/m8/feeds/groups/default/full");
Query myQuery = new Query(feedUrl);
myQuery.setUpdatedMin(startTime);
ContactGroupFeed resultFeed = myService.query(myQuery, ContactGroupFeed.class);
// Print the results
for (ContactGroupEntry entry : resultFeed.getEntries()) {
System.out.println(entry.getTitle().getPlainText());
System.out.println("Updated on: " + entry.getUpdated().toStringRfc822());
}
}
.NETpublic static void PrintDateMinQueryResults(ContactsRequest cr, DateTime startTime)
{
GroupsQuery query = new GroupsQuery(GroupsQuery.CreateGroupUri("default"));
query.StartDate = startTime;
Feed<Group> feed = cr.Get(query);
foreach (Group group in feed.Entries)
{
Console.WriteLine(group.Title);
Console.WriteLine("Updated on: " + group.Updated.ToString());
}
}
Pythondef print_date_min_query_results(gd_client, start_time):
query = gdata.service.Query(feed='/m8/feeds/groups/default/full')
query.updated_min = start_time
feed = gd_client.GetGroups(q=query)
for entry in feed.entry:
print entry.title.text
print 'Updated on: %s' % entry.updated.text
Note: By default, entries in a feed are not ordered.
Retrieving a single contact group
To retrieve a single group, send an authorized HTTP GET request
to the contact group's edit URL.
The URL is of the form:
https://www.google.com/m8/feeds/{userEmail}/full/{groupID}
With the proper values in place of userEmail and groupID.
Note: The special userEmail value default can be used to
refer to the authenticated user.
Upon success, the server responds with an HTTP 200 OK status code
and the requested group entry.
Protocol<!-- Request -->
GET /m8/feeds/groups/default/full/groupID
...
<!-- Response -->
HTTP/1.1 200 OK
Content-Type: application/atom+xml; charset=UTF-8; type=entry
...
<entry xmlns='http://www.w3.org/2005/Atom'
gd:etag='ETAG'>
<id>http://www.google.com/m8/feeds/groups/userEmail/base/groupID</id>
<updated>2008-12-10T04:44:37.324Z</updated>
<category scheme='http://schemas.google.com/g/2005#kind'
term='http://schemas.google.com/contact/2008#group'/>
<title>joggers</title>
<content>joggers</content>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/groupID'/>
<link rel='edit' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/groupID'/>
</entry>
Javapublic static ContactGroupEntry retrieveContactGroup(ContactsService myService)
throws ServiceException, IOException {
ContactGroupEntry group =
myService.getEntry(new URL("https://www.google.com/m8/feeds/groups/default/full/groupId"),
ContactGroupEntry.class);
// Do something with the contact group.
return group;
}
.NETpublic static Group retrieveContactGroup(ContactsRequest cr)
{
Group group = cr.Retrieve<Group>("https://www.google.com/m8/feeds/groups/default/full/groupId");
// Do something with the contact group.
return group;
}
Pythondef retrieve_contact_group(gd_client):
group = gd_client.GetGroup('https://www.google.com/m8/feeds/groups/default/full/groupId')
# Do something with the contact group.
return group
Creating contact groups
To create a new contact group, send an authorized POST request to
the contact groups feed URL with the contact group entry data in
the body:
https://www.google.com/m8/feeds/groups/{userEmail}/full
With the appropriate value in place of userEmail.
Note: The special userEmail value default can be used to
refer to the authenticated user.
Upon success, the server responds with an HTTP 201 Created status
code and the newly created contact group with some additional
elements and properties (shown in bold) such as id, various
link elements and properties.
Protocol<!-- Request -->
POST /m8/feeds/groups/default/full
...
<entry xmlns="http://www.w3.org/2005/Atom"
xmlns:gd="http://schemas.google.com/g/2005">
<category scheme="http://schemas.google.com/g/2005#kind"
term="http://schemas.google.com/g/2008#group"/>
<title>Salsa class members</title>
<gd:extendedProperty name="more info">
<description>A group that gathers salsa members.</description>
</gd:extendedProperty>
</entry>
...
<!-- Response -->
HTTP/1.1 201 Created
Content-Type: application/atom+xml; charset=UTF-8; type=entry
...
<entry xmlns='http://www.w3.org/2005/Atom'
gd:etag='ETAG'>
<id>http://www.google.com/m8/feeds/groups/userEmail/base/groupID</id>
<updated>2008-12-10T04:44:37.324Z</updated>
<category scheme='http://schemas.google.com/g/2005#kind'
term='http://schemas.google.com/contact/2008#group'/>
<atom:title type="text">Salsa class members</atom:title>
<gd:extendedProperty name="more info">
<info>A group that gathers salsa members.</info>
</gd:extendedProperty>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/groupID'/>
<link rel='edit' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/groupID'/>
</entry>
Javapublic static ContactGroupEntry createContactGroup(ContactsService service)
throws ServiceException, IOException {
// Create the entry to insert
ContactGroupEntry newGroup = new ContactGroupEntry();
newGroup.setTitle(new PlainTextConstruct("Salsa group"));
ExtendedProperty additionalInfo = new ExtendedProperty();
additionalInfo.setName("more info about the group");
additionalInfo.setValue("Nice people.");
newGroup.addExtendedProperty(additionalInfo);
// Ask the service to insert the new entry
URL postUrl = new URL("https://www.google.com/m8/feeds/groups/default/full");
ContactGroupEntry createdGroup = service.insert(postUrl, newGroup);
System.out.println("Contact group's Atom Id: " + group.getId());
return createdGroup;
}
.NETpublic static Group createContactGroup(ContactsRequest cr)
{
Group newGroup = new Group();
newGroup.Title = "Salsa group";
newGroup.ExtendedProperties.Add(new ExtendedProperty()
{
Name = "more info about the group",
Value = "Nice people.",
});
Group createdGroup = cr.Insert(new Uri("https://www.google.com/m8/feeds/groups/default/full"),
newGroup);
Console.WriteLine("Contact group's Atom Id: " + createdGroup.Id);
return createdGroup;
}
Pythondef create_contact_group(gd_client):
new_group = gdata.contacts.data.GroupEntry(title=atom.data.Title(text='Salsa group'))
new_group.extended_properties.append(
gdata.data.ExtendedProperty(name='more info about the group', value='Nice people.'))
created_group = gd_client.CreateGroup(new_group)
print "Contact group's Atom Id: %s" % created_group.id.text
return created_group
Updating contact groups
To update a contact group, first
retrieve the group entry, modify the
data and send an authorized PUT request to the contact group's
edit URL with the updated contact group's entry in the body.
The URL is of the form:
https://www.google.com/m8/feeds/groups/{userEmail}/full/{groupID}
With the appropriate values in place of userEmail and groupID.
Note: The special userEmail value default can be used to
refer to the authenticated user.
To ensure that the data sent to the API doesn't overwrite another
client's changes, the contact entry's Etag should be provided in
the request header.
If-Match: Etag
If the Etag is outdated, the server responds with an HTTP
412 Precondition Failed status code.
Note: The special Etag value * can be used to bypass this
verification and process the update regardless of updates from
other clients.
For more information about ETags, see the
Google Data APIs reference guide.
Upon success, the server responds with an HTTP 200 OK status code
and the updated contact group entry.
Protocol<!-- Request -->
POST /m8/feeds/groups/default/full/groupID
If-Match: Etag
...
<entry xmlns:gd="http://schemas.google.com/g/2005"
gd:etag="Etag">
<category scheme="http://schemas.google.com/g/2005#kind"
term="http://schemas.google.com/g/2005#group"/>
<id>http://www.google.com/feeds/groups/userEmail/base/groupId</id>
<published>2005-01-18T21:00:00Z</published>
<updated>2006-01-01T00:00:00Z</updated>
<title type="text">Salsa friends</title>
<content type="text">Friends from Salsa class</content>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/groupId'/>
<link rel='edit' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/groupId'/>
<gd:extendedProperty name="more info about the group">
<info>Very nice people.</info>
</gd:extendedProperty>
</entry>
...
<!-- Response -->
HTTP/1.1 200 OK
Content-Type: application/atom+xml; charset=UTF-8; type=entry
...
<entry xmlns:gd="http://schemas.google.com/g/2005"
gd:etag="newEtag">
<category scheme="http://schemas.google.com/g/2005#kind"
term="http://schemas.google.com/g/2005#group"/>
<id>http://www.google.com/feeds/groups/userEmail/base/groupId</id>
<published>2005-01-18T21:00:00Z</published>
<updated>2011-05-11T00:00:00Z</updated>
<title type="text">Salsa friends</title>
<content type="text">Friends from Salsa class</content>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/groupId'/>
<link rel='edit' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/groupId'/>
<gd:extendedProperty name="more info about the group">
<info>Very nice people.</info>
</gd:extendedProperty>
</entry>
Javapublic static ContactGroupEntry updateContactGrpup(ContactsService myService, URL contactGroupURL)
throws ServiceException, IOException {
ContactGroupEntry group = myService.getEntry(contactGroupURL, ContactGroupEntry.class);
group.setTitle(new PlainTextConstruct("Salsa Friends"));
group.setContent(new PlainTextconstruct("Friends from Salsa class"));
URL editUrl = new URL(entryToUpdate.getEditLink().getHref());
try {
ContactGroupEntry updatedGroup = myService.update(editUrl, entryToUpdate);
System.out.println("Updated: " + updatedGroup.getUpdated().toString());
return updatedGroup;
} catch (PreconditionFailedException e) {
// Etags mismatch: handle the exception.
}
return null;
}
.NETpublic static Group UpdateContactGroup(ContactsRequest cr, Uri contactGroupUrl)
{
Group group = cr.Retrieve<Group>(contactGroupUri);
group.Title = "Salsa Friends";
group.Content = "Friends from Salsa class";
try
{
Group updatedGroup = cr.Update(group);
Console.WriteLine("Updated: " + updatedGroup.Updated.ToString());
return updatedGroup;
}
catch (GDataVersionConflictException e)
{
// Etags mismatch: handle the exception.
}
return null;
}
Pythondef create_contact_group(gd_client):
new_group = gdata.contacts.data.GroupEntry(title=atom.data.Title(text='Salsa group'))
new_group.extended_properties.append(
gdata.data.ExtendedProperty(name='more info about the group', value='Nice people.'))
created_group = gd_client.CreateGroup(new_group)
print "Contact group's Atom Id: %s" % created_group.id.text
return created_group
Note: System groups cannot be updated.
Deleting contact groups
To delete a contact group, send an authorized DELETE request to
the contact group's edit URL.
The URL is of the form:
https://www.google.com/m8/feeds/groups/{userEmail}/full/{groupID}
With the appropriate values in place of userEmail and groupID.
Note: The special userEmail value default can be used to
refer to the authenticated user.
To ensure that the data sent to the API doesn't overwrite another
client's changes, the contact entry's Etag should be provided in
the request header.
If-Match: Etag
If the Etag is outdated, the server responds with an HTTP
412 Precondition Failed status code.
Note: The special Etag value * can be used to bypass this
verification and process the update regardless of updates from
other clients.
For more information about ETags, see the
Google Data APIs reference guide.
Upon success, the server responds with an HTTP 200 OK status
code.
Protocol<!-- Request -->
DELETE /m8/feeds/groups/default/full/groupID
If-Match: Etag
...
<!-- Response -->
HTTP/1.1 200 OK
...
Javapublic static void deleteContactGroup(ContactsService myService, URL contactGroupURL)
throws ServiceException, IOException {
// Retrieving the contact group is required in order to get the Etag.
ContactGroupEntry group = myService.getEntry(contactGroupURL, ContactGroupEntry.class);
try {
group.delete();
} catch (PreconditionFailedException e) {
// Etags mismatch: handle the exception.
}
}
.NETpublic static void DeleteContactGroup(ContactsRequest cr, Uri contactGroupURL)
{
// Retrieving the contact group is required in order to get the Etag.
Group group = cr.Retrieve<Group>(contactGroupURL);
try
{
cr.Delete(group);
}
catch (GDataVersionConflictException e)
{
// Etags mismatch: handle the exception.
}
}
Pythondef delete_contact_group(gd_client, contact_group_url):
# Retrieving the contact group is required in order to get the Etag.
group = gd_client.GetGroup(contact_group_url)
try:
gd_client.Delete(group)
except gdata.client.RequestError, e:
if e.status == 412:
# Etags mismatch: handle the exception.
pass
Note: System groups can not be deleted.
Batch operations
If you're performing a lot of operations, the time it takes to send
and receive all those HTTP messages can really add up, making
your app slow and unresponsive. With batch requests you can have
the server perform multiple operations with a single HTTP request.
The basic idea is that you create a contacts or contact groups feed
and add an entry for each operation you want to perform.
Batch requests are limited to 100 operations at a time. You can
find more information about batch operations in the
Google Data APIs Batch Processing documentation.
Batch operations for Contacts
To send a batch request for operations on contacts, send an
authorized POST request to the contacts batch feed URL with the
batch feed data in the body:
https://www.google.com/m8/feeds/contacts/{userEmail}/full/batch
With the appropriate value in place userEmail.
Note: The special userEmail value default can be used to
refer to the authenticated user.
Upon success, the server responds with an HTTP 200 OK status code
and the batch feed containing each single operation's status code.
Protocol<!-- Request -->
POST /m8/feeds/contacts/default/private/full/batch
...
<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns='http://www.w3.org/2005/Atom'
xmlns:gContact='http://schemas.google.com/contact/2008'
xmlns:gd='http://schemas.google.com/g/2005'
xmlns:batch='http://schemas.google.com/gdata/batch'>
<entry>
<batch:id>retrieve</batch:id>
<batch:operation type='query'/>
<id>https://www.google.com/m8/feeds/contacts/default/full/retrieveContactId</id>
</entry>
<entry>
<batch:id>create</batch:id>
<batch:operation type='insert'/>
<category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/g/2008#contact'/>
<gd:name>
<gd:fullName>Elizabeth Bennet</gd:fullName>
<gd:givenName>Elizabeth</gd:givenName>
<gd:familyName>Bennet</gd:familyName>
</gd:name>
<gd:email rel='http://schemas.google.com/g/2005#home' address='liz@gmail.com' primary='true'/>
</entry>
<entry gd:etag='updateContactEtag'>
<batch:id>update</batch:id>
<batch:operation type='update'/>
<id>http://www.google.com/m8/feeds/contacts/userEmail/base/updateContactId</id>
<updated>2008-02-28T18:47:02.303Z</updated>
<category scheme='http://schemas.google.com/g/2005#kind'
term='http://schemas.google.com/contact/2008#contact'/>
<gd:name>
<gd:givenName>New</gd:givenName>
<gd:familyName>Name</gd:familyName>
<gd:fullName>New Name</gd:fullName>
</gd:name>
<content type='text'>Notes</content>
<link rel='http://schemas.google.com/contacts/2008/rel#photo' type='image/*'
href='https://www.google.com/m8/feeds/photos/media/userEmail/updateContactId'/>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/contacts/userEmail/full/updateContactId'/>
<link rel='edit' type='application/atom+xml'
href='https://www.google.com/m8/feeds/contacts/userEmail/full/updateContactId'/>
<gd:phoneNumber rel='http://schemas.google.com/g/2005#other'
primary='true'>456-123-2133</gd:phoneNumber>
<gd:extendedProperty name='pet' value='hamster'/>
<gContact:groupMembershipInfo deleted='false'
href='http://www.google.com/m8/feeds/groups/userEmail/base/groupId'/>
</entry>
<entry gd:etag='deleteContactEtag'>
<batch:id>delete</batch:id>
<batch:operation type='delete'/>
<id>https://www.google.com/m8/feeds/contacts/default/full/deleteContactId</id>
</entry>
</feed>
<!-- Response -->
HTTP/1.1 200 OK
Content-Type: application/atom+xml;
...
<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns='http://www.w3.org/2005/Atom'
xmlns:gContact='http://schemas.google.com/contact/2008'
xmlns:gd='http://schemas.google.com/g/2005'
xmlns:batch='http://schemas.google.com/gdata/batch'>
<entry gd:etag='retrieveContactEtag'>
<batch:id>retrieve</batch:id>
<batch:operation type='query'/>
<batch:status code='200' reason='Success'/>
<id>
http://www.google.com/m8/feeds/contacts/userEmail/base/retrieveContactId
</id>
<updated>2008-12-10T04:45:03.331Z</updated>
<app:edited xmlns:app='http://www.w3.org/2007/app'>2008-12-10T04:45:03.331Z</app:edited>
<category scheme='http://schemas.google.com/g/2005#kind'
term='http://schemas.google.com/contact/2008#contact'/>
<title>Fitzwilliam Darcy</title>
<gd:name>
<gd:fullName>Fitzwilliam Darcy</gd:fullName>
</gd:name>
<link rel='http://schemas.google.com/contacts/2008/rel#photo' type='image/*'
href='https://www.google.com/m8/feeds/photos/media/userEmail/retrieveContactId'
gd:etag='photoEtag'/>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/contacts/userEmail/full/retrieveContactId'/>
<link rel='edit' type='application/atom+xml'
href='https://www.google.com/m8/feeds/contacts/userEmail/full/retrieveContactId'/>
<gd:phoneNumber rel='http://schemas.google.com/g/2005#home'
primary='true'>
456
</gd:phoneNumber>
<gd:extendedProperty name='pet' value='hamster'/>
<gContact:groupMembershipInfo deleted='false'
href='http://www.google.com/m8/feeds/groups/userEmail/base/groupId'/>
</entry>
<entry gd:etag='createContactEtag'>
<batch:id>create</batch:id>
<batch:operation type='insert'/>
<batch:status code='201' reason='Created'/>
<id>http://www.google.com/m8/feeds/contacts/userEmail/base/createContactId</id>
<updated>2008-12-10T04:45:03.331Z</updated>
<app:edited xmlns:app='http://www.w3.org/2007/app'>2008-12-10T04:45:03.331Z</app:edited>
<category scheme='http://schemas.google.com/g/2005#kind'
term='http://schemas.google.com/contact/2008#contact'/>
<title>Elizabeth Bennet</title>
<gd:name>
<gd:givenName>Elizabeth</gd:givenName>
<gd:familyName>Bennet</gd:familyName>
<gd:fullName>Elizabeth Bennet</gd:fullName>
</gd:name>
<link rel='http://schemas.google.com/contacts/2008/rel#photo' type='image/*'
href='https://www.google.com/m8/feeds/photos/media/userEmail/createContactId'/>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/contacts/userEmail/full/createContactId'/>
<link rel='edit' type='application/atom+xml'
href='https://www.google.com/m8/feeds/contacts/userEmail/full/createContactId'/>
<gd:email rel='http://schemas.google.com/g/2005#work' primary='true' address='liz@gmail.com'/>
</entry>
<entry gd:etag='newUpdateContactEtag'>
<batch:id>update</batch:id>
<batch:operation type='update'/>
<batch:status code='200' reason='Success'/>
<updated>2011-05-11T09:30:00.000Z</updated>
<category scheme='http://schemas.google.com/g/2005#kind'
term='http://schemas.google.com/contact/2008#contact'/>
<title type='text'>New Name</title>
<gd:name>
<gd:givenName>New</gd:givenName>
<gd:familyName>Name</gd:familyName>
<gd:fullName>New Name</gd:fullName>
</gd:name>
<content type='text'>Notes</content>
<link rel='http://schemas.google.com/contacts/2008/rel#photo' type='image/*'
href='https://www.google.com/m8/feeds/photos/media/userEmail/updateContactId'/>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/contacts/userEmail/full/updateContactId'/>
<link rel='edit' type='application/atom+xml'
href='https://www.google.com/m8/feeds/contacts/userEmail/full/updateContactId'/>
<gd:phoneNumber rel='http://schemas.google.com/g/2005#other'
primary='true'>456-123-2133</gd:phoneNumber>
<gd:extendedProperty name='pet' value='hamster'/>
<gContact:groupMembershipInfo deleted='false'
href='http://www.google.com/m8/feeds/groups/userEmail/base/groupId'/>
</entry>
<entry>
<batch:id>delete</batch:id>
<batch:operation type='delete'/>
<batch:status code='200' reason='Success'/>
<updated>2011-05-11T09:30:00.000Z</updated>
<content type='text'>Deleted</content>
<id>https://www.google.com/m8/feeds/contacts/default/full/deleteContactId</id>
</entry>
</feed>
Javapublic static ContactFeed executeBatchRequest(ContactsService myService)
throws ServiceException, IOException {
// Feed that holds all the batch request entries.
ContactFeed requestFeed = new ContactFeed();
// Create a ContactEntry for the retrieve request.
ContactEntry retrieveContact = new ContactEntry();
retreiveContact.setId("https://www.google.com/m8/feeds/contacts/default/private/full/retrieveContactId");
BatchUtils.setBatchId(retrieveContact, "retrieve");
BatchUtils.setBatchOperationType(retrieveContact, BatchOperationType.QUERY);
// Create a ContactEntry for the create request.
ContactEntry createContact = new ContactEntry();
final String NO_YOMI = null;
Name contactTwoName = new Name();
name.setFullName(new FullName("Elizabeth Bennet", NO_YOMI));
name.setGivenName(new GivenName("Elizabeth", NO_YOMI));
name.setFamilyName(new FamilyName("Bennet", NO_YOMI))
createContact.setName(name);
Email primaryMail = new Email();
primaryMail.setAddress("liz@gmail.com");
primaryMail.setRel("http://schemas.google.com/g/2005#home");
primaryMail.setPrimary(true);
createContact.addEmailAddress(primaryMail);
BatchUtils.setBatchId(createContact, "create");
BatchUtils.setBatchOperationType(createContact, BatchOperationType.INSERT);
// Retrieve the ContactEntry to update.
ContactEntry updateContact =
myService.getEntry(new URL("https://www.google.com/m8/feeds/contacts/default/full/updateContactId"),
ContactEntry.class);
updateContact.getName().getFullName().setValue("New Name");
updateContact.getName().getGivenName().setValue("New");
updateContact.getName().getFamilyName().setValue("Name");
BatchUtils.setBatchId(updateContact, "update");
BatchUtils.setBatchOperationType(updateContact, BatchOperationType.UPDATE);
// Retrieve the ContactEntry to delete.
ContactEntry deleteContact =
myService.getEntry(new URL("https://www.google.com/m8/feeds/contacts/default/full/deleteContactId"),
ContactEntry.class);
BatchUtils.setBatchId(deleteContact, "delete");
BatchUtils.setBatchOperationType(deleteContact, BatchOperationType.DELETE);
// Insert the entries to the batch feed.
requestFeed.getEntries().add(retrieveContact);
requestFeed.getEntries().add(createContact);
requestFeed.getEntries().add(updateContact);
requestFeed.getEntries().add(deleteContact);
// Submit the batch request to the server.
ContactFeed responseFeed =
myService.batch(new URL("https://www.google.com/m8/feeds/contacts/default/full/batch"),
requestFeed);
// Check the status of each operation.
for (ContactEntry entry : responseFeed.getEntries()) {
String batchId = BatchUtils.getBatchId(entry);
BatchStatus status = BatchUtils.getBatchStatus(entry);
System.out.println(batchId + ": " + status.getCode() + " (" + status.getReason() + ")");
}
return responseFeed;
}
.NETpublic static Feed<Contact> ExecuteBatchRequest(ContactsRequest cr)
{
// List that holds the batch request entries.
List<Contact> requestFeed = new List<Contact>();
// Create a Contact entry for the retrieve request.
Contact retrieveContact = new Contact();
retrieveContact.Id = "https://www.google.com/m8/feeds/contacts/default/private/full/retrieveContactId";
retrieveContact.BatchData = new GDataBatchEntryData("retrieve", GDataBatchOperationType.query);
// Create a Contact entry for the create request.
Contact createContact = new Contact();
createContact.Name = new Name()
{
FullName = "Elizabeth Bennet",
GivenName = "Elizabeth",
FamilyName = "Bennet",
};
createContact.Emails.Add(new EMail()
{
Address = "liz@gmail.com",
Rel = ContactsRelationships.IsHome,
Primary = true,
});
createContact.BatchData = new GDataBatchEntryData("create", GDataBatchOperationType.insert);
// Retrieve the Contact entry to update.
Contact updateContact = cr.Retrieve<Contact>(
new Uri("https://www.google.com/m8/feeds/contacts/default/full/updateContactId"));
updateContact.Name.FullName = "New Name";
updateContact.Name.GivenName = "New";
updateContact.Name.FamilyName = "Name";
updateContact.BatchData = new GDataBatchEntryData("update", GDataBatchOperationType.update);
// Retrieve the Contact entry to delete.
Contact deleteContact = cr.Retrieve<Contact>(
new Uri("https://www.google.com/m8/feeds/contacts/default/full/deleteContactId"));
deleteContact.BatchData = new GDataBatchEntryData("delete", GDataBatchOperationType.delete);
// Insert the entries to the batch feed.
requestFeed.Add(retrieveContact);
requestFeed.Add(createContact);
requestFeed.Add(updateContact);
requestFeed.Add(deleteContact);
// Submit the batch request to the server.
Feed<Contact> responseFeed = cr.Batch(requestFeed, new Uri("https://www.google.com/m8/feeds/contacts/default/full/batch"),
GDataBatchOperationType.Default);
// Check the status of each operation.
foreach (Contact entry in responseFeed.Entries)
{
Console.WriteLine(entry.BatchData.Id + ": " + entry.BatchData.Status.Code + " (" + entry.BatchData.Status.Reason + ")");
}
return responseFeed;
}
Pythondef execute_batch_request(gd_client):
# Feed that holds the batch request entries.
request_feed = gdata.contacts.data.ContactsFeed()
# Create a ContactEntry for the retrieve request.
retrieve_contact = gdata.contacts.data.ContactEntry()
retrieve_contact.id = atom.data.Id(
text='https://www.google.com/m8/feeds/contacts/default/private/full/retrieveContactId')
# Create a ContactEntry for the create request.
create_contact = gdata.contacts.data.ContactEntry()
create_contact.name = gdata.data.Name(
full_name=gdata.data.FullName(text='Elizabeth Bennet'),
given_name=gdata.data.GivenName(text='Elizabeth'),
family_name=gdata.data.FamilyName(text='Bennet'))
create_contact.email.append(gdata.data.Email(address='liz@gmail.com',
primary='true', rel=gdata.data.HOME_REL))
# Retrieve the ContactEntry to update.
update_contact = gd_client.GetContact('https://www.google.com/m8/feeds/contacts/default/full/updateContactId')
update_contact.name.full_name = 'New Name'
update_contact.name.given_name = 'New'
update_contact.name.family_name = 'Name'
# Retrieve the ContactEntry to delete.
delete_contact = gd_client.GetContact('https://www.google.com/m8/feeds/contacts/default/full/deleteContactId')
# Insert the entries to the batch feed.
request_feed.AddQuery(entry=retrieve_contact, batch_id_string='retrieve')
request_feed.AddInsert(entry=create_contact, batch_id_string='create')
request_feed.AddUpdate(entry=update_contact, batch_id_string='update')
request_feed.AddDelete(entry=delete_contact, batch_id_string='delete')
# submit the batch request to the server.
response_feed = gd_client.ExecuteBatch(request_feed,
'https://www.google.com/m8/feeds/contacts/default/full/batch')
for entry in response_feed.entry:
print '%s: %s (%s)' % (entry.batch_id.text, entry.batch_status.code, entry.batch_status.reason)
return response_feed
Note: The update and delete requests require gd:etag attributes to avoid overwriting another client's changes.
Batch operations for Contact Groups
To send a batch request for operations on contact groups, send an authorized POST request to the contact groups batch feed URL with the batch feed data in the body:
https://www.google.com/m8/feeds/groups/{userEmail}/full/batch
With the appropriate value in place userEmail.
Note: The special userEmail value default can be used to
refer to the authenticated user.
Upon success, the server responds with an HTTP 200 OK status code
and the batch feed containing each single operation's status code.
Protocol<!-- Request -->
POST /m8/feeds/groups/default/private/full/batch
...
<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns='http://www.w3.org/2005/Atom'
xmlns:gContact='http://schemas.google.com/contact/2008'
xmlns:gd='http://schemas.google.com/g/2005'
xmlns:batch='http://schemas.google.com/gdata/batch'>
<entry>
<batch:id>retrieve</batch:id>
<batch:operation type='query'/>
<id>https://www.google.com/m8/feeds/groups/default/full/retrieveContactGroupId</id>
</entry>
<entry>
<batch:id>create</batch:id>
<batch:operation type='insert'/>
<atom:category scheme="http://schemas.google.com/g/2005#kind"
term="http://schemas.google.com/contact/2008#group"/>
<atom:title type="text">Salsa group</atom:title>
<gd:extendedProperty name="more info about the group">
<info>Nice people.</info>
</entry>
<entry gd:etag='updateContactGroupEtag'>
<batch:id>update</batch:id>
<batch:operation type='update'/>
<category scheme="http://schemas.google.com/g/2005#kind"
term="http://schemas.google.com/g/2005#group"/>
<id>http://www.google.com/feeds/groups/userEmail/base/updateContactGroupId</id>
<published>2005-01-18T21:00:00Z</published>
<updated>2006-01-01T00:00:00Z</updated>
<title type="text">New Group Title</title>
<content type="text">New Group Content</content>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/updateContactGroupId'/>
<link rel='edit' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/updateContactGroupId'/>
</entry>
<entry gd:etag='deleteContactGroupEtag'>
<batch:id>delete</batch:id>
<batch:operation type='delete'/>
<id>https://www.google.com/m8/feeds/groups/default/full/deleteContactGroupId</id>
</entry>
</feed>
<!-- Response -->
HTTP/1.1 200 OK
Content-Type: application/atom+xml;
...
<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns='http://www.w3.org/2005/Atom'
xmlns:gContact='http://schemas.google.com/contact/2008'
xmlns:gd='http://schemas.google.com/g/2005'
xmlns:batch='http://schemas.google.com/gdata/batch'>
<entry gd:etag='retrieveContactGroupEtag'>
<batch:id>retrieve</batch:id>
<batch:operation type='query'/>
<batch:status code='200' reason='Success'/>
<id>http://www.google.com/m8/feeds/groups/userEmail/base/retrieveContactGroupId</id>
<updated>2008-12-10T04:44:37.324Z</updated>
<category scheme='http://schemas.google.com/g/2005#kind'
term='http://schemas.google.com/contact/2008#group'/>
<title>joggers</title>
<content>joggers</content>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/retrieveContactGroupId'/>
<link rel='edit' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/retrieveContactGroupId'/>
</entry>
<entry gd:etag='createContactGroupEtag'>
<batch:id>create</batch:id>
<batch:operation type='insert'/>
<batch:status code='201' reason='Created'/>
<id>http://www.google.com/m8/feeds/groups/userEmail/base/createContactGroupID</id>
<updated>2008-12-10T04:44:37.324Z</updated>
<category scheme='http://schemas.google.com/g/2005#kind'
term='http://schemas.google.com/contact/2008#group'/>
<atom:title type="text">Salsa group</atom:title>
<gd:extendedProperty name="more info about the group">
<info>Nice people.</info>
</gd:extendedProperty>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/createContactGroupID'/>
<link rel='edit' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/createContactGroupID'/>
</entry>
<entry gd:etag='newUpdateContactGroupEtag'>
<batch:id>update</batch:id>
<batch:operation type='update'/>
<batch:status code='200' reason='Success'/>
<category scheme="http://schemas.google.com/g/2005#kind"
term="http://schemas.google.com/g/2005#group"/>
<id>http://www.google.com/feeds/groups/userEmail/base/updateContactGroupId</id>
<published>2005-01-18T21:00:00Z</published>
<updated>2011-05-11T00:00:00Z</updated>
<title type="text">New Group Title</title>
<content type="text">New Group Content</content>
<link rel='self' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/updateContactGroupId'/>
<link rel='edit' type='application/atom+xml'
href='https://www.google.com/m8/feeds/groups/userEmail/full/updateContactGroupId'/>
</entry>
<entry>
<batch:id>delete</batch:id>
<batch:operation type='delete'/>
<batch:status code='200' reason='Success'/>
<updated>2011-05-11T09:30:00.000Z</updated>
<content type='text'>Deleted</content>
<id>https://www.google.com/m8/feeds/groups/default/full/deleteContactGroupId</id>
</entry>
</feed>
Javapublic static ContactGroupFeed executeGroupBatchRequest(ContactsService myService)
throws ServiceException, IOException {
// Feed that holds all the batch request entries.
ContactGroupFeed requestFeed = new ContactGroupFeed();
// Create a ContactEntry for the retrieve request.
ContactGroupEntry retrieveContactGroup = new ContactGroupEntry();
retrieveContactGroup.setId("https://www.google.com/m8/feeds/contacts/default/private/full/retrieveContactId");
BatchUtils.setBatchId(retrieveContactGroup, "retrieve");
BatchUtils.setBatchOperationType(retrieveContactGroup, BatchOperationType.QUERY);
// Create a ContactGroupEntry for the create request.
ContactGroupEntry createContactGroup = new ContactGroupEntry();
createContactGroup.setTitle(new PlainTextConstruct("Salsa group"));
ExtendedProperty additionalInfo = new ExtendedProperty();
additionalInfo.setName("more info about the group");
additionalInfo.setValue("Nice people.");
createContactGroup.addExtendedProperty(additionalInfo);
BatchUtils.setBatchId(createContactGroup, "create");
BatchUtils.setBatchOperationType(createContactGroup, BatchOperationType.INSERT);
// Retrieve the ContactGroupEntry to update.
ContactGroupEntry updateContactGroup =
myService.getEntry(new URL("https://www.google.com/m8/feeds/groups/default/full/updateContactGroupId"),
ContactGroupEntry.class);
updateContactGroup.setTitle(new PlainTextConstruct("New Group Title"));
updateContactGroup.setContent(new PlainTextConstruct("New Group Content"));
BatchUtils.setBatchId(updateContactGroup, "update");
BatchUtils.setBatchOperationType(updateContactGroup, BatchOperationType.UPDATE);
// Retrieve the ContactGroupEntry to delete.
ContactGroupEntry deleteContactGroup =
myService.getEntry(new URL("https://www.google.com/m8/feeds/groups/default/full/deleteContactGroupId"),
ContactGroupEntry.class);
BatchUtils.setBatchId(deleteContactGroup, "delete");
BatchUtils.setBatchOperationType(deleteContactGroup, BatchOperationType.DELETE);
// Insert the entries to the batch feed.
requestFeed.getEntries().add(retrieveContactGroup);
requestFeed.getEntries().add(createContactGroup);
requestFeed.getEntries().add(updateContactGroup);
requestFeed.getEntries().add(deleteContactGroup);
// Submit the batch request to the server.
ContactGroupFeed responseFeed =
myService.batch(new URL("https://www.google.com/m8/feeds/groups/default/full/batch"),
requestFeed);
// Check the status of each operation.
for (ContactGroupEntry entry : responseFeed.getEntries()) {
String batchId = BatchUtils.getBatchId(entry);
BatchStatus status = BatchUtils.getBatchStatus(entry);
System.out.println(batchId + ": " + status.getCode() + " (" + status.getReason() + ")");
}
return responseFeed;
}
.NETublic static Feed<ContactGroup> ExecuteGroupBatchRequest(ContactGroupsRequest cr)
{
// List that holds the batch request entries.
List<Group> requestFeed = new List<Group>();
// Create a Group entry for the retrieve request.
Group retrieveContactGroup = new Group();
retrieveContactGroup.Id = "https://www.google.com/m8/feeds/groups/default/private/full/retrieveContactGroupId";
retrieveContactGroup.BatchData = new GDataBatchEntryData("retrieve", GDataBatchOperationType.query);
// Create a Group entry for the create request.
Group createContactGroup = new Group();
createContactGroup.Title = "Salsa group";
createContactGroup.ExtendedProperties.Add(new ExtendedProperty()
{
Name = "more info about the group",
Value = "Nice people.",
});
createContactGroup.BatchData = new GDataBatchEntryData("create", GDataBatchOperationType.insert);
// Retrieve the Group entry to update.
Group updateContactGroup = cr.Retrieve<Group>(
new Uri("https://www.google.com/m8/feeds/groups/default/full/updateContactGroupId"));
updateContactGroup.Title = "New Group Title";
updateContactGroup.Content = "New Group Content";
updateContactGroup.BatchData = new GDataBatchEntryData("update", GDataBatchOperationType.update);
// Retrieve the Group entry to delete.
Group deleteContactGroup = cr.Retrieve<Group>(
new Uri("https://www.google.com/m8/feeds/groups/default/full/deleteContactGroupId"));
deleteContactGroup.BatchData = new GDataBatchEntryData("delete", GDataBatchOperationType.delete);
// Insert the entries to the batch feed.
requestFeed.Add(retrieveContactGroup);
requestFeed.Add(createContactGroup);
requestFeed.Add(updateContactGroup);
requestFeed.Add(deleteContactGroup);
// Submit the batch request to the server.
Feed<Group> responseFeed = cr.Batch(requestFeed, new Uri("https://www.google.com/m8/feeds/groups/default/full/batch"),
GDataBatchOperationType.Default);
// Check the status of each operation.
foreach (Group entry in responseFeed.Entries)
{
Console.WriteLine(entry.BatchData.Id + ": " + entry.BatchData.Status.Code + " (" + entry.BatchData.Status.Reason + ")");
}
return responseFeed;
}
Pythondef execute_batch_request(gd_client):
# Feed that holds the batch request entries.
request_feed = gdata.contacts.data.GroupsFeed()
# Create a GroupEntry for the retrieve request.
retrieve_group = gdata.contacts.data.GroupEntry()
retrieve_group.id = atom.data.Id(
text='https://www.google.com/m8/feeds/groups/default/private/full/retrieveContactGroupId')
# Create a GroupEntry for the create request.
create_group = gdata.contacts.data.GroupEntry()
create_group.title = atom.data.Title(text='Salsa group')
create_group.extended_property.append(gdata.data.ExtendedProperty(name='more info about the group', value='Nice people')
# Retrieve the GroupEntry to update.
update_group = gd_client.GetGroup('https://www.google.com/m8/feeds/groups/default/full/updateContactGroupId')
update_group.title.text = 'New Group Title'
update_group.content.text = 'New Group Content'
# Retrieve the GroupEntry to delete.
delete_group = gd_client.GetGroup('https://www.google.com/m8/feeds/groups/default/full/deleteContactGroupId')
# Insert the entries to the batch feed.
request_feed.AddQuery(entry=retrieve_group, batch_id_string='retrieve')
request_feed.AddInsert(entry=create_group, batch_id_string='create')
request_feed.AddUpdate(entry=update_group, batch_id_string='update')
request_feed.AddDelete(entry=delete_group, batch_id_string='delete')
# submit the batch request to the server.
response_feed = gd_client.ExecuteBatch(request_feed,
'https://www.google.com/m8/feeds/groups/default/full/batch')
for entry in response_feed.entry:
print '%s: %s (%s)' % (entry.batch_id.text, entry.batch_status.code, entry.batch_status.reason)
return response_feed
Note: The update and delete requests require gd:etag attributes to avoid overwriting another client's changes.
Google Contacts API now requires HTTPS
Beginning March 31, 2014, Google requires HTTPS for all communication with the
Contacts API service in order to improve user security. The majority of
application developers already use HTTPS to communicate with the Contacts API,
but there are a few legacy applications that still use the HTTP protocol.
Specifically:
Contact read requests using HTTP (HTTP GET) now return
HTTP 301 Redirect - Moved Permanently, and are redirected to the HTTPS
equivalent of the same URL. Depending on the HTTP library you use, your
application may not require a code change and automatically switches to the
more-secure HTTPS protocol by following these redirects.
Contact update requests using HTTP (POST, PUTS, and DELETE) now
return a HTTP 401 -
Unauthorized error. There are fewer applications making
update requests, and if yours is one of them, simply changing the HTTP URL to
HTTPS will return it to its prior functionality.
Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see our Site Policies. Java is a registered trademark of Oracle and/or its affiliates.
Last updated July 3, 2018.
Terms
Google API Services: User Data Policy
Programs
Women Techmakers
Google Business Groups
Google Developer Groups
Google Developers Experts
Launchpad
Developer Student Clubs
Developer Consoles
Google API Console
Google Cloud Platform Console
Google Play Console
Firebase Console
Actions on Google Console
Cast SDK Developer Console
Chrome Web Store Dashboard
Android
Chrome
Firebase
Google Cloud Platform
All Products
Language
Bahasa Indonesia
Deutsch
English
español
français
Português Brasileiro
Русский
日本語
简体中文
한국어
Terms
Privacy
Sign up for the Google Developers newsletter
Subscribe
Send feedback about...
This page
Documentation feedback
Contacts API
Product feedback
Cancel